name: CI with Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly
    - cron: '0 2 * * 1'

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    name: Security Analysis & Static Code Analysis
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit semgrep bandit[pyproject] black flake8 mypy

    - name: Install project dependencies
      run: |
        pip install -e ".[dev]"

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o security-reports/bandit-report.json || true
        bandit -r src/ -f txt -o security-reports/bandit-report.txt || true
        echo "Bandit scan completed"

    - name: Run Safety dependency vulnerability check
      run: |
        safety check --json --output security-reports/safety-report.json || true
        safety check --output security-reports/safety-report.txt || true
        echo "Safety check completed"

    - name: Run pip-audit for additional vulnerability scanning
      run: |
        pip-audit --format json --output security-reports/pip-audit-report.json || true
        pip-audit --output security-reports/pip-audit-report.txt || true
        echo "pip-audit scan completed"

    - name: Run Semgrep security scan
      run: |
        semgrep scan --config auto --json --output security-reports/semgrep-report.json || true
        semgrep scan --config auto --output security-reports/semgrep-report.txt || true
        echo "Semgrep scan completed"

    - name: Run static code analysis
      run: |
        # Create reports directory
        mkdir -p static-analysis-reports
        
        # Black formatting check
        black --check --diff src/ tests/ > static-analysis-reports/black-report.txt 2>&1 || true
        
        # Flake8 linting
        flake8 src/ tests/ --output-file static-analysis-reports/flake8-report.txt --format=default || true
        
        # MyPy type checking
        mypy src/ --html-report static-analysis-reports/mypy-report || true
        mypy src/ --output-file static-analysis-reports/mypy-report.txt || true
        
        echo "Static analysis completed"

    - name: Generate security summary
      run: |
        mkdir -p security-reports
        cat > security-reports/security-summary.md << 'EOF'
        # Security Analysis Summary
        
        Generated on: $(date)
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        
        ## Security Scan Results
        
        ### Bandit Security Scan
        - **Status**: $(if [ -s security-reports/bandit-report.txt ]; then echo "‚ö†Ô∏è Issues found"; else echo "‚úÖ No issues found"; fi)
        - **Report**: [bandit-report.txt](security-reports/bandit-report.txt)
        
        ### Safety Dependency Check
        - **Status**: $(if [ -s security-reports/safety-report.txt ]; then echo "‚ö†Ô∏è Vulnerabilities found"; else echo "‚úÖ No vulnerabilities found"; fi)
        - **Report**: [safety-report.txt](security-reports/safety-report.txt)
        
        ### pip-audit Vulnerability Scan
        - **Status**: $(if [ -s security-reports/pip-audit-report.txt ]; then echo "‚ö†Ô∏è Vulnerabilities found"; else echo "‚úÖ No vulnerabilities found"; fi)
        - **Report**: [pip-audit-report.txt](security-reports/pip-audit-report.txt)
        
        ### Semgrep Security Scan
        - **Status**: $(if [ -s security-reports/semgrep-report.txt ]; then echo "‚ö†Ô∏è Issues found"; else echo "‚úÖ No issues found"; fi)
        - **Report**: [semgrep-report.txt](security-reports/semgrep-report.txt)
        
        ## Static Analysis Results
        
        ### Code Formatting (Black)
        - **Status**: $(if [ -s static-analysis-reports/black-report.txt ]; then echo "‚ö†Ô∏è Formatting issues"; else echo "‚úÖ Properly formatted"; fi)
        
        ### Code Quality (Flake8)
        - **Status**: $(if [ -s static-analysis-reports/flake8-report.txt ]; then echo "‚ö†Ô∏è Linting issues"; else echo "‚úÖ No linting issues"; fi)
        
        ### Type Checking (MyPy)
        - **Status**: $(if [ -s static-analysis-reports/mypy-report.txt ]; then echo "‚ö†Ô∏è Type issues"; else echo "‚úÖ No type issues"; fi)
        
        ## Overall Security Status
        $(if [ -s security-reports/bandit-report.txt ] || [ -s security-reports/safety-report.txt ] || [ -s security-reports/pip-audit-report.txt ] || [ -s security-reports/semgrep-report.txt ]; then echo "‚ö†Ô∏è **SECURITY ISSUES DETECTED**"; else echo "‚úÖ **NO SECURITY VULNERABILITIES FOUND**"; fi)
        
        ## Recommendations
        - Review all security reports for detailed findings
        - Address any high/critical severity issues immediately
        - Consider implementing additional security measures for medium/low issues
        - Keep dependencies updated regularly
        EOF

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-reports
        path: |
          security-reports/
          static-analysis-reports/
        retention-days: 30

    - name: Comment PR with security status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## üîí Security Analysis Results\n\n';
          
          // Check if security reports exist
          const hasSecurityIssues = fs.existsSync('security-reports/bandit-report.txt') && 
                                   fs.statSync('security-reports/bandit-report.txt').size > 0;
          
          const hasSafetyIssues = fs.existsSync('security-reports/safety-report.txt') && 
                                 fs.statSync('security-reports/safety-report.txt').size > 0;
          
          const hasPipAuditIssues = fs.existsSync('security-reports/pip-audit-report.txt') && 
                                   fs.statSync('security-reports/pip-audit-report.txt').size > 0;
          
          const hasSemgrepIssues = fs.existsSync('security-reports/semgrep-report.txt') && 
                                  fs.statSync('security-reports/semgrep-report.txt').size > 0;
          
          if (hasSecurityIssues || hasSafetyIssues || hasPipAuditIssues || hasSemgrepIssues) {
            comment += '‚ö†Ô∏è **Security issues detected!** Please review the security reports.\n\n';
          } else {
            comment += '‚úÖ **No security vulnerabilities found!**\n\n';
          }
          
          comment += '**Scans performed:**\n';
          comment += '- üîç Bandit (Python security linting)\n';
          comment += '- üõ°Ô∏è Safety (dependency vulnerability check)\n';
          comment += '- üîé pip-audit (additional vulnerability scanning)\n';
          comment += '- üö® Semgrep (security-focused static analysis)\n\n';
          
          comment += 'üìä **Detailed reports available in workflow artifacts.**\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting
      run: |
        flake8 src/ tests/
        mypy src/

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: [test, security-analysis]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Build package
      run: |
        python -m pip install --upgrade pip
        pip install build
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [test, security-analysis]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: docker build -t xprr-agent .

    - name: Test Docker image
      run: docker run --rm xprr-agent --help

  update-security-status:
    runs-on: ubuntu-latest
    needs: security-analysis
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: security-analysis-reports
        path: security-reports/

    - name: Update README with security status
      run: |
        # Check if there are any security issues
        has_issues=false
        if [ -s security-reports/bandit-report.txt ] || [ -s security-reports/safety-report.txt ] || [ -s security-reports/pip-audit-report.txt ] || [ -s security-reports/semgrep-report.txt ]; then
          has_issues=true
        fi
        
        # Create security status badge
        if [ "$has_issues" = true ]; then
          security_badge="![Security Status](https://img.shields.io/badge/security-vulnerabilities%20detected-red)"
          security_status="‚ö†Ô∏è **Security vulnerabilities detected** - See [security reports](.github/workflows/ci.yml) for details"
        else
          security_badge="![Security Status](https://img.shields.io/badge/security-no%20vulnerabilities-green)"
          security_status="‚úÖ **No security vulnerabilities found** - All dependencies and code scanned and verified"
        fi
        
        # Update README with security section
        awk -v badge="$security_badge" -v status="$security_status" '
        /^## üéØ Core Features/ {
          print
          print ""
          print "## üîí Security Status"
          print ""
          print badge
          print ""
          print status
          print ""
          print "**Last Security Scan:** $(date '+%Y-%m-%d %H:%M:%S UTC')"
          print "**Security Tools Used:**"
          print "- üîç [Bandit](https://bandit.readthedocs.io/) - Python security linting"
          print "- üõ°Ô∏è [Safety](https://pyup.io/safety/) - Dependency vulnerability check"
          print "- üîé [pip-audit](https://pypi.org/project/pip-audit/) - Additional vulnerability scanning"
          print "- üö® [Semgrep](https://semgrep.dev/) - Security-focused static analysis"
          print ""
          next
        }
        { print }
        ' README.md > README.md.tmp && mv README.md.tmp README.md

    - name: Commit and push security status update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --quiet && git diff --staged --quiet || git commit -m "üîí Update security status in README [skip ci]"
        git push 