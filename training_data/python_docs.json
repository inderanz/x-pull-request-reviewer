{
  "technology": "python",
  "base_url": "https://docs.python.org/3/",
  "pages": [
    {
      "url": "https://docs.python.org/3/tutorial/index.html",
      "title": "The Python Tutorial — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Tutorial\n¶\nTip\nThis tutorial is designed for\nprogrammers\nthat are new to the Python language,\nnot\nbeginners\nwho are new to programming.\nPython is an easy to learn, powerful programming language. It has efficient\nhigh-level data structures and a simple but effective approach to\nobject-oriented programming. Python’s elegant syntax and dynamic typing,\ntogether with its interpreted nature, make it an ideal language for scripting\nand rapid application development in many areas on most platforms.\nThe Python interpreter and the extensive standard library are freely available\nin source or binary form for all major platforms from the Python web site,\nhttps://www.python.org/\n, and may be freely distributed. The same site also\ncontains distributions of and pointers to many free third party Python modules,\nprograms and tools, and additional documentation.\nThe Python interpreter is easily extended with new functions and data types\nimplemented in C or C++ (or other languages callable from C). Python is also\nsuitable as an extension language for customizable applications.\nThis tutorial introduces the reader informally to the basic concepts and\nfeatures of the Python language and system. Be aware that it expects you to\nhave a basic understanding of programming in general. It helps to have a Python\ninterpreter handy for hands-on experience, but all examples are self-contained,\nso the tutorial can be read off-line as well.\nFor a description of standard objects and modules, see\nThe Python Standard Library\n.\nThe Python Language Reference\ngives a more formal definition of the language.  To write\nextensions in C or C++, read\nExtending and Embedding the Python Interpreter\nand\nPython/C API Reference Manual\n. There are also several books covering Python in depth.\nThis tutorial does not attempt to be comprehensive and cover every single\nfeature, or even every commonly used feature. Instead, it introduces many of\nPython’s most noteworthy features, and will give you a good idea of the\nlanguage’s flavor and style. After reading it, you will be able to read and\nwrite Python modules and programs, and you will be ready to learn more about the\nvarious Python library modules described in\nThe Python Standard Library\n.\nThe\nGlossary\nis also worth going through.\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n3.2. First Steps Towards Programming\n4. More Control Flow Tools\n4.1.\nif\nStatements\n4.2.\nfor\nStatements\n4.3. The\nrange()\nFunction\n4.4.\nbreak\nand\ncontinue\nStatements\n4.5.\nelse\nClauses on Loops\n4.6.\npass\nStatements\n4.7.\nmatch\nStatements\n4.8. Defining Functions\n4.9. More on Defining Functions\n4.9.1. Default Argument Values\n4.9.2. Keyword Arguments\n4.9.3. Special parameters\n4.9.3.1. Positional-or-Keyword Arguments\n4.9.3.2. Positional-Only Parameters\n4.9.3.3. Keyword-Only Arguments\n4.9.3.4. Function Examples\n4.9.3.5. Recap\n4.9.4. Arbitrary Argument Lists\n4.9.5. Unpacking Argument Lists\n4.9.6. Lambda Expressions\n4.9.7. Documentation Strings\n4.9.8. Function Annotations\n4.10. Intermezzo: Coding Style\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n5.2. The\ndel\nstatement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. “Compiled” Python files\n6.2. Standard Modules\n6.3. The\ndir()\nFunction\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with\njson\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n11. Brief Tour of the Standard Library — Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating-Point Arithmetic\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n15. Floating-Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules\nPrevious topic\nChangelog\nNext topic\n1.\nWhetting Your Appetite\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "The Python Tutorial¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731604.3827462
    },
    {
      "url": "https://docs.python.org/3/library/index.html",
      "title": "The Python Standard Library — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Standard Library\n¶\nWhile\nThe Python Language Reference\ndescribes the exact syntax and\nsemantics of the Python language, this library reference manual\ndescribes the standard library that is distributed with Python. It also\ndescribes some of the optional components that are commonly included\nin Python distributions.\nPython’s standard library is very extensive, offering a wide range of\nfacilities as indicated by the long table of contents listed below. The\nlibrary contains built-in modules (written in C) that provide access to\nsystem functionality such as file I/O that would otherwise be\ninaccessible to Python programmers, as well as modules written in Python\nthat provide standardized solutions for many problems that occur in\neveryday programming. Some of these modules are explicitly designed to\nencourage and enhance the portability of Python programs by abstracting\naway platform-specifics into platform-neutral APIs.\nThe Python installers for the Windows platform usually include\nthe entire standard library and often also include many additional\ncomponents. For Unix-like operating systems Python is normally provided\nas a collection of packages, so it may be necessary to use the packaging\ntools provided with the operating system to obtain some or all of the\noptional components.\nIn addition to the standard library, there is an active collection of\nhundreds of thousands of components (from individual programs and modules to\npackages and entire application development frameworks), available from\nthe\nPython Package Index\n.\nIntroduction\nNotes on availability\nBuilt-in Functions\nBuilt-in Constants\nConstants added by the\nsite\nmodule\nBuilt-in Types\nTruth Value Testing\nBoolean Operations —\nand\n,\nor\n,\nnot\nComparisons\nNumeric Types —\nint\n,\nfloat\n,\ncomplex\nBoolean Type -\nbool\nIterator Types\nSequence Types —\nlist\n,\ntuple\n,\nrange\nText Sequence Type —\nstr\nBinary Sequence Types —\nbytes\n,\nbytearray\n,\nmemoryview\nSet Types —\nset\n,\nfrozenset\nMapping Types —\ndict\nContext Manager Types\nType Annotation Types —\nGeneric Alias\n,\nUnion\nOther Built-in Types\nSpecial Attributes\nInteger string conversion length limitation\nBuilt-in Exceptions\nException context\nInheriting from built-in exceptions\nBase classes\nConcrete exceptions\nWarnings\nException groups\nException hierarchy\nText Processing Services\nstring\n— Common string operations\nre\n— Regular expression operations\ndifflib\n— Helpers for computing deltas\ntextwrap\n— Text wrapping and filling\nunicodedata\n— Unicode Database\nstringprep\n— Internet String Preparation\nreadline\n— GNU readline interface\nrlcompleter\n— Completion function for GNU readline\nBinary Data Services\nstruct\n— Interpret bytes as packed binary data\ncodecs\n— Codec registry and base classes\nData Types\ndatetime\n— Basic date and time types\nzoneinfo\n— IANA time zone support\ncalendar\n— General calendar-related functions\ncollections\n— Container datatypes\ncollections.abc\n— Abstract Base Classes for Containers\nheapq\n— Heap queue algorithm\nbisect\n— Array bisection algorithm\narray\n— Efficient arrays of numeric values\nweakref\n— Weak references\ntypes\n— Dynamic type creation and names for built-in types\ncopy\n— Shallow and deep copy operations\npprint\n— Data pretty printer\nreprlib\n— Alternate\nrepr()\nimplementation\nenum\n— Support for enumerations\ngraphlib\n— Functionality to operate with graph-like structures\nNumeric and Mathematical Modules\nnumbers\n— Numeric abstract base classes\nmath\n— Mathematical functions\ncmath\n— Mathematical functions for complex numbers\ndecimal\n— Decimal fixed-point and floating-point arithmetic\nfractions\n— Rational numbers\nrandom\n— Generate pseudo-random numbers\nstatistics\n— Mathematical statistics functions\nFunctional Programming Modules\nitertools\n— Functions creating iterators for efficient looping\nfunctools\n— Higher-order functions and operations on callable objects\noperator\n— Standard operators as functions\nFile and Directory Access\npathlib\n— Object-oriented filesystem paths\nos.path\n— Common pathname manipulations\nstat\n— Interpreting\nstat()\nresults\nfilecmp\n— File and Directory Comparisons\ntempfile\n— Generate temporary files and directories\nglob\n— Unix style pathname pattern expansion\nfnmatch\n— Unix filename pattern matching\nlinecache\n— Random access to text lines\nshutil\n— High-level file operations\nData Persistence\npickle\n— Python object serialization\ncopyreg\n— Register\npickle\nsupport functions\nshelve\n— Python object persistence\nmarshal\n— Internal Python object serialization\ndbm\n— Interfaces to Unix “databases”\nsqlite3\n— DB-API 2.0 interface for SQLite databases\nData Compression and Archiving\nzlib\n— Compression compatible with\ngzip\ngzip\n— Support for\ngzip\nfiles\nbz2\n— Support for\nbzip2\ncompression\nlzma\n— Compression using the LZMA algorithm\nzipfile\n— Work with ZIP archives\ntarfile\n— Read and write tar archive files\nFile Formats\ncsv\n— CSV File Reading and Writing\nconfigparser\n— Configuration file parser\ntomllib\n— Parse TOML files\nnetrc\n— netrc file processing\nplistlib\n— Generate and parse Apple\n.plist\nfiles\nCryptographic Services\nhashlib\n— Secure hashes and message digests\nhmac\n— Keyed-Hashing for Message Authentication\nsecrets\n— Generate secure random numbers for managing secrets\nGeneric Operating System Services\nos\n— Miscellaneous operating system interfaces\nio\n— Core tools for working with streams\ntime\n— Time access and conversions\nlogging\n— Logging facility for Python\nlogging.config\n— Logging configuration\nlogging.handlers\n— Logging handlers\nplatform\n—  Access to underlying platform’s identifying data\nerrno\n— Standard errno system symbols\nctypes\n— A foreign function library for Python\nCommand Line Interface Libraries\nargparse\n— Parser for command-line options, arguments and subcommands\noptparse\n— Parser for command line options\ngetpass\n— Portable password input\nfileinput\n— Iterate over lines from multiple input streams\ncurses\n— Terminal handling for character-cell displays\ncurses.textpad\n— Text input widget for curses programs\ncurses.ascii\n— Utilities for ASCII characters\ncurses.panel\n— A panel stack extension for curses\nConcurrent Execution\nthreading\n— Thread-based parallelism\nmultiprocessing\n— Process-based parallelism\nmultiprocessing.shared_memory\n— Shared memory for direct access across processes\nThe\nconcurrent\npackage\nconcurrent.futures\n— Launching parallel tasks\nsubprocess\n— Subprocess management\nsched\n— Event scheduler\nqueue\n— A synchronized queue class\ncontextvars\n— Context Variables\n_thread\n— Low-level threading API\nNetworking and Interprocess Communication\nasyncio\n— Asynchronous I/O\nsocket\n— Low-level networking interface\nssl\n— TLS/SSL wrapper for socket objects\nselect\n— Waiting for I/O completion\nselectors\n— High-level I/O multiplexing\nsignal\n— Set handlers for asynchronous events\nmmap\n— Memory-mapped file support\nInternet Data Handling\nemail\n— An email and MIME handling package\njson\n— JSON encoder and decoder\nmailbox\n— Manipulate mailboxes in various formats\nmimetypes\n— Map filenames to MIME types\nbase64\n— Base16, Base32, Base64, Base85 Data Encodings\nbinascii\n— Convert between binary and ASCII\nquopri\n— Encode and decode MIME quoted-printable data\nStructured Markup Processing Tools\nhtml\n— HyperText Markup Language support\nhtml.parser\n— Simple HTML and XHTML parser\nhtml.entities\n— Definitions of HTML general entities\nXML Processing Modules\nxml.etree.ElementTree\n— The ElementTree XML API\nxml.dom\n— The Document Object Model API\nxml.dom.minidom\n— Minimal DOM implementation\nxml.dom.pulldom\n— Support for building partial DOM trees\nxml.sax\n— Support for SAX2 parsers\nxml.sax.handler\n— Base classes for SAX handlers\nxml.sax.saxutils\n— SAX Utilities\nxml.sax.xmlreader\n— Interface for XML parsers\nxml.parsers.expat\n— Fast XML parsing using Expat\nInternet Protocols and Support\nwebbrowser\n— Convenient web-browser controller\nwsgiref\n— WSGI Utilities and Reference Implementation\nurllib\n— URL handling modules\nurllib.request\n— Extensible library for opening URLs\nurllib.response\n— Response classes used by urllib\nurllib.parse\n— Parse URLs into components\nurllib.error\n— Exception classes raised by urllib.request\nurllib.robotparser\n—  Parser for robots.txt\nhttp\n— HTTP modules\nhttp.client\n— HTTP protocol client\nftplib\n— FTP protocol client\npoplib\n— POP3 protocol client\nimaplib\n— IMAP4 protocol client\nsmtplib\n— SMTP protocol client\nuuid\n— UUID objects according to\nRFC 4122\nsocketserver\n— A framework for network servers\nhttp.server\n— HTTP servers\nhttp.cookies\n— HTTP state management\nhttp.cookiejar\n— Cookie handling for HTTP clients\nxmlrpc\n— XMLRPC server and client modules\nxmlrpc.client\n— XML-RPC client access\nxmlrpc.server\n— Basic XML-RPC servers\nipaddress\n— IPv4/IPv6 manipulation library\nMultimedia Services\nwave\n— Read and write WAV files\ncolorsys\n— Conversions between color systems\nInternationalization\ngettext\n— Multilingual internationalization services\nlocale\n— Internationalization services\nProgram Frameworks\nturtle\n— Turtle graphics\ncmd\n— Support for line-oriented command interpreters\nshlex\n— Simple lexical analysis\nGraphical User Interfaces with Tk\ntkinter\n— Python interface to Tcl/Tk\ntkinter.colorchooser\n— Color choosing dialog\ntkinter.font\n— Tkinter font wrapper\nTkinter Dialogs\ntkinter.messagebox\n— Tkinter message prompts\ntkinter.scrolledtext\n— Scrolled Text Widget\ntkinter.dnd\n— Drag and drop support\ntkinter.ttk\n— Tk themed widgets\nIDLE — Python editor and shell\nDevelopment Tools\ntyping\n— Support for type hints\npydoc\n— Documentation generator and online help system\nPython Development Mode\ndoctest\n— Test interactive Python examples\nunittest\n— Unit testing framework\nunittest.mock\n— mock object library\nunittest.mock\n— getting started\ntest\n— Regression tests package for Python\ntest.support\n— Utilities for the Python test suite\ntest.support.socket_helper\n— Utilities for socket tests\ntest.support.script_helper\n— Utilities for the Python execution tests\ntest.support.bytecode_helper\n— Support tools for testing correct bytecode generation\ntest.support.threading_helper\n— Utilities for threading tests\ntest.support.os_helper\n— Utilities for os tests\ntest.support.import_helper\n— Utilities for import tests\ntest.support.warnings_helper\n— Utilities for warnings tests\nDebugging and Profiling\nAudit events table\nbdb\n— Debugger framework\nfaulthandler\n— Dump the Python traceback\npdb\n— The Python Debugger\nThe Python Profilers\ntimeit\n— Measure execution time of small code snippets\ntrace\n— Trace or track Python statement execution\ntracemalloc\n— Trace memory allocations\nSoftware Packaging and Distribution\nensurepip\n— Bootstrapping the\npip\ninstaller\nvenv\n— Creation of virtual environments\nzipapp\n— Manage executable Python zip archives\nPython Runtime Services\nsys\n— System-specific parameters and functions\nsys.monitoring\n— Execution event monitoring\nsysconfig\n— Provide access to Python’s configuration information\nbuiltins\n— Built-in objects\n__main__\n— Top-level code environment\nwarnings\n— Warning control\ndataclasses\n— Data Classes\ncontextlib\n— Utilities for\nwith\n-statement contexts\nabc\n— Abstract Base Classes\natexit\n— Exit handlers\ntraceback\n— Print or retrieve a stack traceback\n__future__\n— Future statement definitions\ngc\n— Garbage Collector interface\ninspect\n— Inspect live objects\nsite\n— Site-specific configuration hook\nCustom Python Interpreters\ncode\n— Interpreter base classes\ncodeop\n— Compile Python code\nImporting Modules\nzipimport\n— Import modules from Zip archives\npkgutil\n— Package extension utility\nmodulefinder\n— Find modules used by a script\nrunpy\n— Locating and executing Python modules\nimportlib\n— The implementation of\nimport\nimportlib.resources\n– Package resource reading, opening and access\nimportlib.resources.abc\n– Abstract base classes for resources\nimportlib.metadata\n– Accessing package metadata\nThe initialization of the\nsys.path\nmodule search path\nPython Language Services\nast\n— Abstract Syntax Trees\nsymtable\n— Access to the compiler’s symbol tables\ntoken\n— Constants used with Python parse trees\nkeyword\n— Testing for Python keywords\ntokenize\n— Tokenizer for Python source\ntabnanny\n— Detection of ambiguous indentation\npyclbr\n— Python module browser support\npy_compile\n— Compile Python source files\ncompileall\n— Byte-compile Python libraries\ndis\n— Disassembler for Python bytecode\npickletools\n— Tools for pickle developers\nMS Windows Specific Services\nmsvcrt\n— Useful routines from the MS VC++ runtime\nwinreg\n— Windows registry access\nwinsound\n— Sound-playing interface for Windows\nUnix Specific Services\nposix\n— The most common POSIX system calls\npwd\n— The password database\ngrp\n— The group database\ntermios\n— POSIX style tty control\ntty\n— Terminal control functions\npty\n— Pseudo-terminal utilities\nfcntl\n— The\nfcntl\nand\nioctl\nsystem calls\nresource\n— Resource usage information\nsyslog\n— Unix syslog library routines\nModules command-line interface (CLI)\nSuperseded Modules\ngetopt\n— C-style parser for command line options\nRemoved Modules\nSecurity Considerations\nPrevious topic\n10.\nFull Grammar specification\nNext topic\nIntroduction\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [
        {
          "language": "xref",
          "code": "unicodedata",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code>"
        },
        {
          "language": "xref",
          "code": "rlcompleter",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code>"
        },
        {
          "language": "xref",
          "code": "collections",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code>"
        },
        {
          "language": "xref",
          "code": "collections.abc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code>"
        },
        {
          "language": "xref",
          "code": "configparser",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code>"
        },
        {
          "language": "xref",
          "code": "logging.config",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code>"
        },
        {
          "language": "xref",
          "code": "logging.handlers",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code>"
        },
        {
          "language": "xref",
          "code": "curses.textpad",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.textpad</span></code>"
        },
        {
          "language": "xref",
          "code": "curses.ascii",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code>"
        },
        {
          "language": "xref",
          "code": "curses.panel",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code>"
        },
        {
          "language": "xref",
          "code": "multiprocessing",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code>"
        },
        {
          "language": "xref",
          "code": "multiprocessing.shared_memory",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code>"
        },
        {
          "language": "xref",
          "code": "concurrent.futures",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code>"
        },
        {
          "language": "xref",
          "code": "contextvars",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code>"
        },
        {
          "language": "xref",
          "code": "html.parser",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code>"
        },
        {
          "language": "xref",
          "code": "html.entities",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.etree.ElementTree",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.dom.minidom",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.dom.pulldom",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.sax.handler",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.sax.saxutils",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.sax.xmlreader",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.parsers.expat",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.request",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.response",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.response</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.parse",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.error",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.robotparser",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code>"
        },
        {
          "language": "xref",
          "code": "http.client",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code>"
        },
        {
          "language": "xref",
          "code": "socketserver",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code>"
        },
        {
          "language": "xref",
          "code": "http.server",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code>"
        },
        {
          "language": "xref",
          "code": "http.cookies",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code>"
        },
        {
          "language": "xref",
          "code": "http.cookiejar",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code>"
        },
        {
          "language": "xref",
          "code": "xmlrpc.client",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code>"
        },
        {
          "language": "xref",
          "code": "xmlrpc.server",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.colorchooser",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.font",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.messagebox",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.scrolledtext",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.dnd",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.ttk",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code>"
        },
        {
          "language": "xref",
          "code": "unittest.mock",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code>"
        },
        {
          "language": "xref",
          "code": "unittest.mock",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.socket_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.socket_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.script_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.script_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.bytecode_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.bytecode_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.threading_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.threading_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.os_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.os_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.import_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.import_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "test.support.warnings_helper",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test.support.warnings_helper</span></code>"
        },
        {
          "language": "xref",
          "code": "faulthandler",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code>"
        },
        {
          "language": "xref",
          "code": "tracemalloc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.monitoring",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys.monitoring</span></code>"
        },
        {
          "language": "xref",
          "code": "dataclasses",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code>"
        },
        {
          "language": "xref",
          "code": "modulefinder",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.resources",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.resources.abc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.metadata",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code>"
        },
        {
          "language": "xref",
          "code": "pickletools",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "The Python Standard Library¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731606.479805
    },
    {
      "url": "https://docs.python.org/3/reference/index.html",
      "title": "The Python Language Reference — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Language Reference\n¶\nThis reference manual describes the syntax and “core semantics” of the\nlanguage. It is terse, but attempts to be exact and complete. The semantics of\nnon-essential built-in object types and of the built-in functions and modules\nare described in\nThe Python Standard Library\n. For an informal introduction to the\nlanguage, see\nThe Python Tutorial\n. For C or C++ programmers, two additional\nmanuals exist:\nExtending and Embedding the Python Interpreter\ndescribes the high-level picture of how to\nwrite a Python extension module, and the\nPython/C API Reference Manual\ndescribes the\ninterfaces available to C/C++ programmers in detail.\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n2. Lexical analysis\n2.1. Line structure\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.4. Literals\n2.5. Operators\n2.6. Delimiters\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.3. Special method names\n3.4. Coroutines\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.3. Exceptions\n5. The import system\n5.1.\nimportlib\n5.2. Packages\n5.3. Searching\n5.4. Loading\n5.5. The Path Based Finder\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.9. References\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.3. Primaries\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.3. The\nassert\nstatement\n7.4. The\npass\nstatement\n7.5. The\ndel\nstatement\n7.6. The\nreturn\nstatement\n7.7. The\nyield\nstatement\n7.8. The\nraise\nstatement\n7.9. The\nbreak\nstatement\n7.10. The\ncontinue\nstatement\n7.11. The\nimport\nstatement\n7.12. The\nglobal\nstatement\n7.13. The\nnonlocal\nstatement\n7.14. The\ntype\nstatement\n8. Compound statements\n8.1. The\nif\nstatement\n8.2. The\nwhile\nstatement\n8.3. The\nfor\nstatement\n8.4. The\ntry\nstatement\n8.5. The\nwith\nstatement\n8.6. The\nmatch\nstatement\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n8.10. Type parameter lists\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n10. Full Grammar specification\nPrevious topic\n8.\nEditors and IDEs\nNext topic\n1.\nIntroduction\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "The Python Language Reference¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731608.7430668
    },
    {
      "url": "https://docs.python.org/3/howto/index.html",
      "title": "Python HOWTOs — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython HOWTOs\n|\nTheme\nAuto\nLight\nDark\n|\nPython HOWTOs\n¶\nPython HOWTOs are documents that cover a specific topic in-depth.\nModeled on the Linux Documentation Project’s HOWTO collection, this collection is an\neffort to foster documentation that’s more detailed than the\nPython Library Reference.\nGeneral:\nAnnotations Best Practices\nArgparse Tutorial\nDescriptor Guide\nEnum HOWTO\nFunctional Programming HOWTO\nAn introduction to the ipaddress module\nLogging HOWTO\nLogging Cookbook\nRegular Expression HOWTO\nSorting Techniques\nUnicode HOWTO\nHOWTO Fetch Internet Resources Using The urllib Package\nAdvanced development:\nCurses Programming with Python\nPython experimental support for free threading\nC API Extension Support for Free Threading\nIsolating Extension Modules\nThe Python 2.3 Method Resolution Order\nSocket Programming HOWTO\ntimer file descriptor HOWTO\nPorting Extension Modules to Python 3\nDebugging and profiling:\nDebugging C API extensions and CPython Internals with GDB\nInstrumenting CPython with DTrace and SystemTap\nPython support for the Linux perf profiler\nPrevious topic\nInstalling Python Modules\nNext topic\nPorting Extension Modules to Python 3\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython HOWTOs\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Python HOWTOs¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731610.992342
    },
    {
      "url": "https://docs.python.org/3/distributing/index.html",
      "title": "Distributing Python Modules — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nDistributing Python Modules\n|\nTheme\nAuto\nLight\nDark\n|\nDistributing Python Modules\n¶\nNote\nInformation and guidance on distributing Python modules and packages\nhas been moved to the\nPython Packaging User Guide\n,\nand the tutorial on\npackaging Python projects\n.\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nDistributing Python Modules\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Distributing Python Modules¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        }
      ],
      "timestamp": 1750731613.2437031
    },
    {
      "url": "https://docs.python.org/3/extending/index.html",
      "title": "Extending and Embedding the Python Interpreter — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nExtending and Embedding the Python Interpreter\n|\nTheme\nAuto\nLight\nDark\n|\nExtending and Embedding the Python Interpreter\n¶\nThis document describes how to write modules in C or C++ to extend the Python\ninterpreter with new modules.  Those modules can not only define new functions\nbut also new object types and their methods.  The document also describes how\nto embed the Python interpreter in another application, for use as an extension\nlanguage.  Finally, it shows how to compile and link extension modules so that\nthey can be loaded dynamically (at run time) into the interpreter, if the\nunderlying operating system supports this feature.\nThis document assumes basic knowledge about Python.  For an informal\nintroduction to the language, see\nThe Python Tutorial\n.\nThe Python Language Reference\ngives a more formal definition of the language.\nThe Python Standard Library\ndocuments\nthe existing object types, functions and modules (both built-in and written in\nPython) that give the language its wide application range.\nFor a detailed description of the whole Python/C API, see the separate\nPython/C API Reference Manual\n.\nRecommended third party tools\n¶\nThis guide only covers the basic tools for creating extensions provided\nas part of this version of CPython. Some\nthird party tools\noffer both simpler and more sophisticated approaches to creating\nC and C++ extensions for Python.\nCreating extensions without third party tools\n¶\nThis section of the guide covers creating C and C++ extensions without\nassistance from third party tools. It is intended primarily for creators\nof those tools, rather than being a recommended way to create your own\nC extensions.\nSee also\nPEP 489\n– Multi-phase extension module initialization\n1. Extending Python with C or C++\n1.1. A Simple Example\n1.2. Intermezzo: Errors and Exceptions\n1.3. Back to the Example\n1.4. The Module’s Method Table and Initialization Function\n1.5. Compilation and Linkage\n1.6. Calling Python Functions from C\n1.7. Extracting Parameters in Extension Functions\n1.8. Keyword Parameters for Extension Functions\n1.9. Building Arbitrary Values\n1.10. Reference Counts\n1.11. Writing Extensions in C++\n1.12. Providing a C API for an Extension Module\n2. Defining Extension Types: Tutorial\n2.1. The Basics\n2.2. Adding data and methods to the Basic example\n2.3. Providing finer control over data attributes\n2.4. Supporting cyclic garbage collection\n2.5. Subclassing other types\n3. Defining Extension Types: Assorted Topics\n3.1. Finalization and De-allocation\n3.2. Object Presentation\n3.3. Attribute Management\n3.4. Object Comparison\n3.5. Abstract Protocol Support\n3.6. Weak Reference Support\n3.7. More Suggestions\n4. Building C and C++ Extensions\n4.1. Building C and C++ Extensions with setuptools\n5. Building C and C++ Extensions on Windows\n5.1. A Cookbook Approach\n5.2. Differences Between Unix and Windows\n5.3. Using DLLs in Practice\nEmbedding the CPython runtime in a larger application\n¶\nSometimes, rather than creating an extension that runs inside the Python\ninterpreter as the main application, it is desirable to instead embed\nthe CPython runtime inside a larger application. This section covers\nsome of the details involved in doing that successfully.\n1. Embedding Python in Another Application\n1.1. Very High Level Embedding\n1.2. Beyond Very High Level Embedding: An overview\n1.3. Pure Embedding\n1.4. Extending Embedded Python\n1.5. Embedding Python in C++\n1.6. Compiling and Linking under Unix-like systems\nTable of Contents\nExtending and Embedding the Python Interpreter\nRecommended third party tools\nCreating extensions without third party tools\nEmbedding the CPython runtime in a larger application\nPrevious topic\nSecurity Considerations\nNext topic\n1.\nExtending Python with C or C++\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nExtending and Embedding the Python Interpreter\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Extending and Embedding the Python Interpreter¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Recommended third party tools¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Creating extensions without third party tools¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Embedding the CPython runtime in a larger application¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "Table of Contents",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731615.5992131
    },
    {
      "url": "https://docs.python.org/3/c-api/index.html",
      "title": "Python/C API Reference Manual — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython/C API Reference Manual\n|\nTheme\nAuto\nLight\nDark\n|\nPython/C API Reference Manual\n¶\nThis manual documents the API used by C and C++ programmers who want to write\nextension modules or embed Python.  It is a companion to\nExtending and Embedding the Python Interpreter\n,\nwhich describes the general principles of extension writing but does not\ndocument the API functions in detail.\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nExceptions\nEmbedding Python\nDebugging Builds\nRecommended third party tools\nC API Stability\nUnstable C API\nStable Application Binary Interface\nPlatform Considerations\nContents of Limited API\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nStandard Exceptions\nStandard Warning Categories\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\nPyTime C API\nSupport for Perf Maps\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nConcrete Objects Layer\nFundamental Objects\nNumeric Objects\nSequence Objects\nContainer Objects\nFunction Objects\nOther Objects\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nSub-interpreter support\nAsynchronous Notifications\nProfiling and Tracing\nReference tracing\nAdvanced Debugger Support\nThread Local Storage Support\nSynchronization Primitives\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\nThe mimalloc allocator\ntracemalloc C API\nExamples\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nType Object Structures\nSupporting Cyclic Garbage Collection\nAPI and ABI Versioning\nMonitoring C API\nGenerating Execution Events\nManaging the Monitoring State\nPrevious topic\n1.\nEmbedding Python in Another Application\nNext topic\nIntroduction\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython/C API Reference Manual\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Python/C API Reference Manual¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731617.662317
    },
    {
      "url": "https://docs.python.org/3/faq/index.html",
      "title": "Python Frequently Asked Questions — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Frequently Asked Questions\n|\nTheme\nAuto\nLight\nDark\n|\nPython Frequently Asked Questions\n¶\nGeneral Python FAQ\nProgramming FAQ\nDesign and History FAQ\nLibrary and Extension FAQ\nExtending/Embedding FAQ\nPython on Windows FAQ\nGraphic User Interface FAQ\n“Why is Python Installed on my Computer?” FAQ\nPrevious topic\nC API Extension Support for Free Threading\nNext topic\nGeneral Python FAQ\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Frequently Asked Questions\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Python Frequently Asked Questions¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731619.986557
    },
    {
      "url": "https://docs.python.org/3/whatsnew/3.13.html",
      "title": "What’s New In Python 3.13 — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nWhat’s New in Python\n»\nWhat’s New In Python 3.13\n|\nTheme\nAuto\nLight\nDark\n|\nWhat’s New In Python 3.13\n¶\nEditors\n:\nAdam Turner and Thomas Wouters\nThis article explains the new features in Python 3.13, compared to 3.12.\nPython 3.13 was released on October 7, 2024.\nFor full details, see the\nchangelog\n.\nSee also\nPEP 719\n– Python 3.13 Release Schedule\nSummary – Release Highlights\n¶\nPython 3.13 is the latest stable release of the Python programming\nlanguage, with a mix of changes to the language, the implementation\nand the standard library.\nThe biggest changes include a new\ninteractive interpreter\n,\nexperimental support for running in a\nfree-threaded mode\n(\nPEP 703\n),\nand a\nJust-In-Time compiler\n(\nPEP 744\n).\nError messages continue to improve, with tracebacks now highlighted in color\nby default. The\nlocals()\nbuiltin now has\ndefined semantics\nfor changing the returned mapping,\nand type parameters now support default values.\nThe library changes contain removal of deprecated APIs and modules,\nas well as the usual improvements in user-friendliness and correctness.\nSeveral legacy standard library modules have now\nbeen removed\nfollowing their deprecation in Python 3.11 (\nPEP 594\n).\nThis article doesn’t attempt to provide a complete specification\nof all new features, but instead gives a convenient overview.\nFor full details refer to the documentation,\nsuch as the\nLibrary Reference\nand\nLanguage Reference\n.\nTo understand the complete implementation and design rationale for a change,\nrefer to the PEP for a particular new feature;\nbut note that PEPs usually are not kept up-to-date\nonce a feature has been fully implemented.\nSee\nPorting to Python 3.13\nfor guidance on upgrading from\nearlier versions of Python.\nInterpreter improvements:\nA greatly improved\ninteractive interpreter\nand\nimproved error messages\n.\nPEP 667\n: The\nlocals()\nbuiltin now has\ndefined semantics\nwhen mutating the\nreturned mapping. Python debuggers and similar tools may now more reliably\nupdate local variables in optimized scopes even during concurrent code\nexecution.\nPEP 703\n: CPython 3.13 has experimental support for running with the\nglobal interpreter lock\ndisabled. See\nFree-threaded CPython\nfor more details.\nPEP 744\n: A basic\nJIT compiler\nwas added.\nIt is currently disabled by default (though we may turn it on later).\nPerformance improvements are modest – we expect to improve this\nover the next few releases.\nColor support in the new\ninteractive interpreter\n,\nas well as in\ntracebacks\nand\ndoctest\noutput.\nThis can be disabled through the\nPYTHON_COLORS\nand\nNO_COLOR\nenvironment variables.\nPython data model improvements:\n__static_attributes__\nstores the names of attributes accessed\nthrough\nself.X\nin any function in a class body.\n__firstlineno__\nrecords the first line number of a class\ndefinition.\nSignificant improvements in the standard library:\nAdd a new\nPythonFinalizationError\nexception, raised when an operation\nis blocked during\nfinalization\n.\nThe\nargparse\nmodule now supports deprecating command-line options,\npositional arguments, and subcommands.\nThe new functions\nbase64.z85encode()\nand\nbase64.z85decode()\nsupport encoding and decoding\nZ85 data\n.\nThe\ncopy\nmodule now has a\ncopy.replace()\nfunction,\nwith support for many builtin types and any class defining\nthe\n__replace__()\nmethod.\nThe new\ndbm.sqlite3\nmodule is now the default\ndbm\nbackend.\nThe\nos\nmodule has a\nsuite of new functions\nfor working with Linux’s timer notification file descriptors.\nThe\nrandom\nmodule now has a\ncommand-line interface\n.\nSecurity improvements:\nssl.create_default_context()\nsets\nssl.VERIFY_X509_PARTIAL_CHAIN\nand\nssl.VERIFY_X509_STRICT\nas default flags.\nC API improvements:\nThe\nPy_mod_gil\nslot is now used to indicate that\nan extension module supports running with the\nGIL\ndisabled.\nThe\nPyTime C API\nhas been added,\nproviding access to system clocks.\nPyMutex\nis a new lightweight mutex that occupies a single byte.\nThere is a new\nsuite of functions\nfor generating\nPEP 669\nmonitoring events in the C API.\nNew typing features:\nPEP 696\n: Type parameters (\ntyping.TypeVar\n,\ntyping.ParamSpec\n,\nand\ntyping.TypeVarTuple\n) now support defaults.\nPEP 702\n: The new\nwarnings.deprecated()\ndecorator adds support\nfor marking deprecations in the type system and at runtime.\nPEP 705\n:\ntyping.ReadOnly\ncan be used to mark an item of a\ntyping.TypedDict\nas read-only for type checkers.\nPEP 742\n:\ntyping.TypeIs\nprovides more intuitive\ntype narrowing behavior, as an alternative to\ntyping.TypeGuard\n.\nPlatform support:\nPEP 730\n: Apple’s iOS is now an\nofficially supported platform\n, at\ntier 3\n.\nPEP 738\n: Android is now an\nofficially supported platform\n, at\ntier 3\n.\nwasm32-wasi\nis now supported as a\ntier 2\nplatform.\nwasm32-emscripten\nis no longer an officially supported platform.\nImportant removals:\nPEP 594\n: The remaining 19 “dead batteries”\n(legacy stdlib modules) have been removed from the standard library:\naifc\n,\naudioop\n,\ncgi\n,\ncgitb\n,\nchunk\n,\ncrypt\n,\nimghdr\n,\nmailcap\n,\nmsilib\n,\nnis\n,\nnntplib\n,\nossaudiodev\n,\npipes\n,\nsndhdr\n,\nspwd\n,\nsunau\n,\ntelnetlib\n,\nuu\nand\nxdrlib\n.\nRemove the\n2to3\ntool and\nlib2to3\nmodule\n(deprecated in Python 3.11).\nRemove the\ntkinter.tix\nmodule (deprecated in Python 3.6).\nRemove the\nlocale.resetlocale()\nfunction.\nRemove the\ntyping.io\nand\ntyping.re\nnamespaces.\nRemove chained\nclassmethod\ndescriptors.\nRelease schedule changes:\nPEP 602\n(“Annual Release Cycle for Python”) has been updated\nto extend the full support (‘bugfix’) period for new releases to two years.\nThis updated policy means that:\nPython 3.9–3.12 have one and a half years of full support,\nfollowed by three and a half years of security fixes.\nPython 3.13 and later have two years of full support,\nfollowed by three years of security fixes.\nNew Features\n¶\nA better interactive interpreter\n¶\nPython now uses a new\ninteractive\nshell by default, based on code\nfrom the\nPyPy project\n.\nWhen the user starts the\nREPL\nfrom an interactive terminal,\nthe following new features are now supported:\nMultiline editing with history preservation.\nDirect support for REPL-specific commands like\nhelp\n,\nexit\n,\nand\nquit\n, without the need to call them as functions.\nPrompts and tracebacks with\ncolor enabled by default\n.\nInteractive help browsing using\nF1\nwith a separate command\nhistory.\nHistory browsing using\nF2\nthat skips output as well as the\n>>>\nand\n…\nprompts.\n“Paste mode” with\nF3\nthat makes pasting larger blocks of code\neasier (press\nF3\nagain to return to the regular prompt).\nTo disable the new interactive shell,\nset the\nPYTHON_BASIC_REPL\nenvironment variable.\nFor more on interactive mode, see\nInteractive Mode\n.\n(Contributed by Pablo Galindo Salgado, Łukasz Langa, and\nLysandros Nikolaou in\ngh-111201\nbased on code from the PyPy project.\nWindows support contributed by Dino Viehland and Anthony Shaw.)\nImproved error messages\n¶\nThe interpreter now uses color by default when displaying tracebacks in the\nterminal. This feature\ncan be controlled\nvia the new\nPYTHON_COLORS\nenvironment variable as well as\nthe canonical\nNO_COLOR\nand\nFORCE_COLOR\nenvironment variables.\n(Contributed by Pablo Galindo Salgado in\ngh-112730\n.)\nA common mistake is to write a script with the same name as a\nstandard library module. When this results in errors, we now\ndisplay a more helpful error message:\n$ python random.py\nTraceback (most recent call last):\nFile\n\"/home/me/random.py\"\n, line\n1\n, in\n<module>\nimport\nrandom\nFile\n\"/home/me/random.py\"\n, line\n3\n, in\n<module>\nprint\n(\nrandom\n.\nrandint\n(\n5\n))\n^^^^^^^^^^^^^^\nAttributeError\n:\nmodule 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)\nSimilarly, if a script has the same name as a third-party\nmodule that it attempts to import and this results in errors,\nwe also display a more helpful error message:\n$ python numpy.py\nTraceback (most recent call last):\nFile\n\"/home/me/numpy.py\"\n, line\n1\n, in\n<module>\nimport\nnumpy\nas\nnp\nFile\n\"/home/me/numpy.py\"\n, line\n3\n, in\n<module>\nnp\n.\narray\n([\n1\n,\n2\n,\n3\n])\n^^^^^^^^\nAttributeError\n:\nmodule 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)\n(Contributed by Shantanu Jain in\ngh-95754\n.)\nThe error message now tries to suggest the correct keyword argument\nwhen an incorrect keyword argument is passed to a function.\n>>>\n\"Better error messages!\"\n.\nsplit\n(\nmax_split\n=\n1\n)\nTraceback (most recent call last):\nFile\n\"<python-input-0>\"\n, line\n1\n, in\n<module>\n\"Better error messages!\"\n.\nsplit\n(\nmax_split\n=\n1\n)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\nTypeError\n:\nsplit() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?\n(Contributed by Pablo Galindo Salgado and Shantanu Jain in\ngh-107944\n.)\nFree-threaded CPython\n¶\nCPython now has experimental support for running in a free-threaded mode,\nwith the\nglobal interpreter lock\n(GIL) disabled.\nThis is an experimental feature and therefore is not enabled by default.\nThe free-threaded mode requires a different executable,\nusually called\npython3.13t\nor\npython3.13t.exe\n.\nPre-built binaries marked as\nfree-threaded\ncan be installed as part of\nthe official\nWindows\nand\nmacOS\ninstallers,\nor CPython can be built from source with the\n--disable-gil\noption.\nFree-threaded execution allows for full utilization of the available\nprocessing power by running threads in parallel on available CPU cores.\nWhile not all software will benefit from this automatically, programs\ndesigned with threading in mind will run faster on multi-core hardware.\nThe free-threaded mode is experimental\nand work is ongoing to improve it:\nexpect some bugs and a substantial single-threaded performance hit.\nFree-threaded builds of CPython support optionally running with the GIL\nenabled at runtime using the environment variable\nPYTHON_GIL\nor\nthe command-line option\n-X\ngil=1\n.\nTo check if the current interpreter supports free-threading,\npython\n-VV\nand\nsys.version\ncontain “experimental free-threading build”.\nThe new\nsys._is_gil_enabled()\nfunction can be used to check whether\nthe GIL is actually disabled in the running process.\nC-API extension modules need to be built specifically for the free-threaded\nbuild. Extensions that support running with the\nGIL\ndisabled should\nuse the\nPy_mod_gil\nslot. Extensions using single-phase init should\nuse\nPyUnstable_Module_SetGIL()\nto indicate whether they support\nrunning with the GIL disabled. Importing C extensions that don’t use these\nmechanisms will cause the GIL to be enabled, unless the GIL was explicitly\ndisabled with the\nPYTHON_GIL\nenvironment variable or the\n-X\ngil=0\noption.\npip 24.1 or newer is required to install packages with C extensions in the\nfree-threaded build.\nThis work was made possible thanks to many individuals and\norganizations, including the large community of contributors to Python\nand third-party projects to test and enable free-threading support.\nNotable contributors include:\nSam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers,\nDino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers,\nLysandros Nikolaou, and many others.\nMany of these contributors are employed by Meta, which has\nprovided significant engineering resources to support this project.\nSee also\nPEP 703\n“Making the Global Interpreter Lock Optional in CPython”\ncontains rationale and information surrounding this work.\nPorting Extension Modules to Support Free-Threading\n: A community-maintained\nporting guide for extension authors.\nAn experimental just-in-time (JIT) compiler\n¶\nWhen CPython is configured and built using\nthe\n--enable-experimental-jit\noption,\na just-in-time (JIT) compiler is added which may speed up some Python programs.\nOn Windows, use\nPCbuild/build.bat\n--experimental-jit\nto enable the JIT\nor\n--experimental-jit-interpreter\nto enable the Tier 2 interpreter.\nBuild requirements and further supporting information\nare contained at\nTools/jit/README.md\n.\nThe\n--enable-experimental-jit\noption takes these (optional) values,\ndefaulting to\nyes\nif\n--enable-experimental-jit\nis present\nwithout the optional value.\nno\n: Disable the entire Tier 2 and JIT pipeline.\nyes\n: Enable the JIT.\nTo disable the JIT at runtime, pass the environment variable\nPYTHON_JIT=0\n.\nyes-off\n: Build the JIT but disable it by default.\nTo enable the JIT at runtime, pass the environment variable\nPYTHON_JIT=1\n.\ninterpreter\n: Enable the Tier 2 interpreter but disable the JIT.\nThe interpreter can be disabled by running with\nPYTHON_JIT=0\n.\nThe internal architecture is roughly as follows:\nWe start with specialized\nTier 1 bytecode\n.\nSee\nWhat’s new in 3.11\nfor details.\nWhen the Tier 1 bytecode gets hot enough, it gets translated\nto a new purely internal intermediate representation (IR),\ncalled the\nTier 2 IR\n, and sometimes referred to as micro-ops (“uops”).\nThe Tier 2 IR uses the same stack-based virtual machine as Tier 1,\nbut the instruction format is better suited to translation to machine code.\nWe have several optimization passes for Tier 2 IR, which are applied\nbefore it is interpreted or translated to machine code.\nThere is a Tier 2 interpreter, but it is mostly intended for debugging\nthe earlier stages of the optimization pipeline.\nThe Tier 2 interpreter can be enabled by configuring Python\nwith\n--enable-experimental-jit=interpreter\n.\nWhen the JIT is enabled, the optimized\nTier 2 IR is translated to machine code, which is then executed.\nThe machine code translation process uses a technique called\ncopy-and-patch\n. It has no runtime dependencies, but there is a new\nbuild-time dependency on LLVM.\nSee also\nPEP 744\n(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik Kjolstad.\nTier 2 IR by Mark Shannon and Guido van Rossum.\nTier 2 optimizer by Ken Jin.)\nDefined mutation semantics for\nlocals()\n¶\nHistorically, the expected result of mutating the return value of\nlocals()\nhas been left to individual Python implementations to define.\nStarting from Python 3.13,\nPEP 667\nstandardises\nthe historical behavior of CPython for most code execution scopes,\nbut changes\noptimized scopes\n(functions, generators, coroutines, comprehensions, and generator expressions)\nto explicitly return independent snapshots of the currently assigned local\nvariables, including locally referenced nonlocal variables captured in closures.\nThis change to the semantics of\nlocals()\nin optimized scopes also\naffects the default behavior of code execution functions that implicitly\ntarget\nlocals()\nif no explicit namespace is provided\n(such as\nexec()\nand\neval()\n).\nIn previous versions, whether or not changes could be accessed by calling\nlocals()\nafter calling the code execution function was\nimplementation-dependent. In CPython specifically, such code would typically\nappear to work as desired, but could sometimes fail in optimized scopes based\non other code (including debuggers and code execution tracing tools)\npotentially resetting the shared snapshot in that scope.\nNow, the code will always run against an independent snapshot of\nthe local variables in optimized scopes, and hence the changes will never\nbe visible in subsequent calls to\nlocals()\n.\nTo access the changes made in these cases, an explicit namespace reference\nmust now be passed to the relevant function.\nAlternatively, it may make sense to update affected code to use a higher level\ncode execution API that returns the resulting code execution namespace\n(e.g.\nrunpy.run_path()\nwhen executing Python files from disk).\nTo ensure debuggers and similar tools can reliably update local variables in\nscopes affected by this change,\nFrameType.f_locals\nnow\nreturns a write-through proxy to the frame’s local and locally referenced\nnonlocal variables in these scopes, rather than returning an inconsistently\nupdated shared\ndict\ninstance with undefined runtime semantics.\nSee\nPEP 667\nfor more details, including related C API changes\nand deprecations. Porting notes are also provided below for the affected\nPython APIs\nand\nC APIs\n.\n(PEP and implementation contributed by Mark Shannon and Tian Gao in\ngh-74929\n. Documentation updates provided by Guido van Rossum and\nAlyssa Coghlan.)\nSupport for mobile platforms\n¶\nPEP 730\n: iOS is now a\nPEP 11\nsupported platform, with the\narm64-apple-ios\nand\narm64-apple-ios-simulator\ntargets at tier 3\n(iPhone and iPad devices released after 2013 and the Xcode iOS simulator\nrunning on Apple silicon hardware, respectively).\nx86_64-apple-ios-simulator\n(the Xcode iOS simulator running on older\nx86_64\nhardware)\nis not a tier 3 supported platform, but will have best-effort support.\n(PEP written and implementation contributed by Russell Keith-Magee in\ngh-114099\n.)\nPEP 738\n: Android is now a\nPEP 11\nsupported platform, with the\naarch64-linux-android\nand\nx86_64-linux-android\ntargets at tier 3.\nThe 32-bit targets\narm-linux-androideabi\nand\ni686-linux-android\nare not tier 3 supported platforms, but will have best-effort support.\n(PEP written and implementation contributed by Malcolm Smith in\ngh-116622\n.)\nSee also\nPEP 730\n,\nPEP 738\nOther Language Changes\n¶\nThe compiler now strips common leading whitespace\nfrom every line in a docstring.\nThis reduces the size of the\nbytecode cache\n(such as\n.pyc\nfiles), with reductions in file size of around 5%,\nfor example in\nsqlalchemy.orm.session\nfrom SQLAlchemy 2.0.\nThis change affects tools that use docstrings, such as\ndoctest\n.\n>>>\ndef\nspam\n():\n...\n\"\"\"\n...\nThis is a docstring with\n...\nleading whitespace.\n...\n...\nIt even has multiple paragraphs!\n...\n\"\"\"\n...\n>>>\nspam\n.\n__doc__\n'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has multiple paragraphs!\\n'\n(Contributed by Inada Naoki in\ngh-81283\n.)\nAnnotation scopes\nwithin class scopes\ncan now contain lambdas and comprehensions.\nComprehensions that are located within class scopes\nare not inlined into their parent scope.\nclass\nC\n[\nT\n]:\ntype\nAlias\n=\nlambda\n:\nT\n(Contributed by Jelle Zijlstra in\ngh-109118\nand\ngh-118160\n.)\nFuture statements\nare no longer triggered by\nrelative imports of the\n__future__\nmodule,\nmeaning that statements of the form\nfrom\n.__future__\nimport\n...\nare now simply standard relative imports, with no special features activated.\n(Contributed by Jeremiah Gabriel Pascual in\ngh-118216\n.)\nglobal\ndeclarations are now permitted in\nexcept\nblocks\nwhen that global is used in the\nelse\nblock.\nPreviously this raised an erroneous\nSyntaxError\n.\n(Contributed by Irit Katriel in\ngh-111123\n.)\nAdd\nPYTHON_FROZEN_MODULES\n, a new environment variable that\ndetermines whether frozen modules are ignored by the import machinery,\nequivalent to the\n-X\nfrozen_modules\ncommand-line option.\n(Contributed by Yilei Yang in\ngh-111374\n.)\nAdd\nsupport for the perf profiler\nworking\nwithout\nframe pointers\nthrough\nthe new environment variable\nPYTHON_PERF_JIT_SUPPORT\nand command-line option\n-X\nperf_jit\n.\n(Contributed by Pablo Galindo in\ngh-118518\n.)\nThe location of a\n.python_history\nfile can be changed via the\nnew\nPYTHON_HISTORY\nenvironment variable.\n(Contributed by Levi Sabah, Zackery Spytz and Hugo van Kemenade\nin\ngh-73965\n.)\nClasses have a new\n__static_attributes__\nattribute.\nThis is populated by the compiler with a tuple of the class’s attribute names\nwhich are assigned through\nself.<name>\nfrom any function in its body.\n(Contributed by Irit Katriel in\ngh-115775\n.)\nThe compiler now creates a\n__firstlineno__\nattribute on classes\nwith the line number of the first line of the class definition.\n(Contributed by Serhiy Storchaka in\ngh-118465\n.)\nThe\nexec()\nand\neval()\nbuiltins now accept\nthe\nglobals\nand\nlocals\narguments as keywords.\n(Contributed by Raphael Gaschignard in\ngh-105879\n)\nThe\ncompile()\nbuiltin now accepts a new flag,\nast.PyCF_OPTIMIZED_AST\n, which is similar to\nast.PyCF_ONLY_AST\nexcept that the returned AST is optimized according to\nthe value of the\noptimize\nargument.\n(Contributed by Irit Katriel in\ngh-108113\n).\nAdd a\n__name__\nattribute on\nproperty\nobjects.\n(Contributed by Eugene Toder in\ngh-101860\n.)\nAdd\nPythonFinalizationError\n, a new exception derived from\nRuntimeError\nand used to signal when operations are blocked\nduring\nfinalization\n.\nThe following callables now raise\nPythonFinalizationError\n,\ninstead of\nRuntimeError\n:\n_thread.start_new_thread()\nos.fork()\nos.forkpty()\nsubprocess.Popen\n(Contributed by Victor Stinner in\ngh-114570\n.)\nAllow the\ncount\nargument of\nstr.replace()\nto be a keyword.\n(Contributed by Hugo van Kemenade in\ngh-106487\n.)\nMany functions now emit a warning if a boolean value is passed as\na file descriptor argument.\nThis can help catch some errors earlier.\n(Contributed by Serhiy Storchaka in\ngh-82626\n.)\nAdded\nname\nand\nmode\nattributes\nfor compressed and archived file-like objects in\nthe\nbz2\n,\nlzma\n,\ntarfile\n, and\nzipfile\nmodules.\n(Contributed by Serhiy Storchaka in\ngh-115961\n.)\nNew Modules\n¶\ndbm.sqlite3\n: An SQLite backend for\ndbm\n.\n(Contributed by Raymond Hettinger and Erlend E. Aasland in\ngh-100414\n.)\nImproved Modules\n¶\nargparse\n¶\nAdd the\ndeprecated\nparameter to the\nadd_argument()\nand\nadd_parser()\nmethods, to enable deprecating\ncommand-line options, positional arguments, and subcommands.\n(Contributed by Serhiy Storchaka in\ngh-83648\n.)\narray\n¶\nAdd the\n'w'\ntype code (\nPy_UCS4\n) for Unicode characters.\nIt should be used instead of the deprecated\n'u'\ntype code.\n(Contributed by Inada Naoki in\ngh-80480\n.)\nRegister\narray.array\nas a\nMutableSequence\nby implementing the\nclear()\nmethod.\n(Contributed by Mike Zimin in\ngh-114894\n.)\nast\n¶\nThe constructors of node types in the\nast\nmodule are now\nstricter in the arguments they accept,\nwith more intuitive behavior when arguments are omitted.\nIf an optional field on an AST node is not included as an argument when\nconstructing an instance, the field will now be set to\nNone\n. Similarly,\nif a list field is omitted, that field will now be set to an empty list,\nand if an\nexpr_context\nfield is omitted, it defaults to\nLoad()\n.\n(Previously, in all cases, the attribute would be missing on the newly\nconstructed AST node instance.)\nIn all other cases, where a required argument is omitted,\nthe node constructor will emit a\nDeprecationWarning\n.\nThis will raise an exception in Python 3.15.\nSimilarly, passing a keyword argument to the constructor\nthat does not map to a field on the AST node is now deprecated,\nand will raise an exception in Python 3.15.\nThese changes do not apply to user-defined subclasses of\nast.AST\nunless the class opts in to the new behavior\nby defining the\nAST._field_types\nmapping.\n(Contributed by Jelle Zijlstra in\ngh-105858\n,\ngh-117486\n, and\ngh-118851\n.)\nast.parse()\nnow accepts an optional argument\noptimize\nwhich is passed on to\ncompile()\n.\nThis makes it possible to obtain an optimized AST.\n(Contributed by Irit Katriel in\ngh-108113\n.)\nasyncio\n¶\nasyncio.as_completed()\nnow returns an object that is both an\nasynchronous iterator\nand a plain\niterator\nof\nawaitables\n.\nThe awaitables yielded by asynchronous iteration include original task\nor future objects that were passed in,\nmaking it easier to associate results with the tasks being completed.\n(Contributed by Justin Arthur in\ngh-77714\n.)\nasyncio.loop.create_unix_server()\nwill now automatically remove\nthe Unix socket when the server is closed.\n(Contributed by Pierre Ossman in\ngh-111246\n.)\nDatagramTransport.sendto()\nwill now send zero-length\ndatagrams if called with an empty bytes object.\nThe transport flow control also now accounts for the datagram header\nwhen calculating the buffer size.\n(Contributed by Jamie Phan in\ngh-115199\n.)\nAdd\nQueue.shutdown\nand\nQueueShutDown\nto manage queue termination.\n(Contributed by Laurie Opperman and Yves Duprat in\ngh-104228\n.)\nAdd the\nServer.close_clients()\nand\nServer.abort_clients()\nmethods, which more forcefully close an asyncio server.\n(Contributed by Pierre Ossman in\ngh-113538\n.)\nAccept a tuple of separators in\nStreamReader.readuntil()\n,\nstopping when any one of them is encountered.\n(Contributed by Bruce Merry in\ngh-81322\n.)\nImprove the behavior of\nTaskGroup\nwhen\nan external cancellation collides with an internal cancellation.\nFor example, when two task groups are nested\nand both experience an exception in a child task simultaneously,\nit was possible that the outer task group would hang,\nbecause its internal cancellation was swallowed by the inner task group.\nIn the case where a task group is cancelled externally\nand also must raise an\nExceptionGroup\n,\nit will now call the parent task’s\ncancel()\nmethod.\nThis ensures that a\nCancelledError\nwill be raised\nat the next\nawait\n, so the cancellation is not lost.\nAn added benefit of these changes is that task groups now preserve\nthe cancellation count (\ncancelling()\n).\nIn order to handle some corner cases,\nuncancel()\nmay now\nreset the undocumented\n_must_cancel\nflag\nwhen the cancellation count reaches zero.\n(Inspired by an issue reported by Arthur Tacca in\ngh-116720\n.)\nWhen\nTaskGroup.create_task()\nis called on an inactive\nTaskGroup\n, the given coroutine will be closed (which\nprevents a\nRuntimeWarning\nabout the given coroutine being\nnever awaited).\n(Contributed by Arthur Tacca and Jason Zhang in\ngh-115957\n.)\nThe function and methods named\ncreate_task\nhave received a new\n**kwargs\nargument that is passed through to the task constructor.\nThis change was accidentally added in 3.13.3,\nand broke the API contract for custom task factories.\nSeveral third-party task factories implemented workarounds for this.\nIn 3.13.4 and later releases the old factory contract is honored\nonce again (until 3.14).\nTo keep the workarounds working, the extra\n**kwargs\nargument still\nallows passing additional keyword arguments to\nTask\nand to custom task factories.\nThis affects the following function and methods:\nasyncio.create_task()\n,\nasyncio.loop.create_task()\n,\nasyncio.TaskGroup.create_task()\n.\n(Contributed by Thomas Grainger in\ngh-128307\n.)\nbase64\n¶\nAdd\nz85encode()\nand\nz85decode()\nfunctions\nfor encoding\nbytes\nas\nZ85 data\nand decoding Z85-encoded data to\nbytes\n.\n(Contributed by Matan Perelman in\ngh-75299\n.)\ncompileall\n¶\nThe default number of worker threads and processes is now selected using\nos.process_cpu_count()\ninstead of\nos.cpu_count()\n.\n(Contributed by Victor Stinner in\ngh-109649\n.)\nconcurrent.futures\n¶\nThe default number of worker threads and processes is now selected using\nos.process_cpu_count()\ninstead of\nos.cpu_count()\n.\n(Contributed by Victor Stinner in\ngh-109649\n.)\nconfigparser\n¶\nConfigParser\nnow has support for unnamed sections,\nwhich allows for top-level key-value pairs.\nThis can be enabled with the new\nallow_unnamed_section\nparameter.\n(Contributed by Pedro Sousa Lacerda in\ngh-66449\n.)\ncopy\n¶\nThe new\nreplace()\nfunction and the\nreplace\nprotocol\nmake creating modified copies of objects much simpler.\nThis is especially useful when working with immutable objects.\nThe following types support the\nreplace()\nfunction\nand implement the replace protocol:\ncollections.namedtuple()\ndataclasses.dataclass\ndatetime.datetime\n,\ndatetime.date\n,\ndatetime.time\ninspect.Signature\n,\ninspect.Parameter\ntypes.SimpleNamespace\ncode objects\nAny user-defined class can also support\ncopy.replace()\nby defining\nthe\n__replace__()\nmethod.\n(Contributed by Serhiy Storchaka in\ngh-108751\n.)\nctypes\n¶\nAs a consequence of necessary internal refactoring, initialization of\ninternal metaclasses now happens in\n__init__\nrather\nthan in\n__new__\n. This affects projects that subclass these internal\nmetaclasses to provide custom initialization.\nGenerally:\nCustom logic that was done in\n__new__\nafter calling\nsuper().__new__\nshould be moved to\n__init__\n.\nTo create a class, call the metaclass, not only the metaclass’s\n__new__\nmethod.\nSee\ngh-124520\nfor discussion and links to changes in some affected\nprojects.\nctypes.Structure\nobjects have a new\n_align_\nattribute which allows the alignment of the structure being packed to/from\nmemory to be specified explicitly.\n(Contributed by Matt Sanderson in\ngh-112433\n)\ndbm\n¶\nAdd\ndbm.sqlite3\n, a new module which implements an SQLite backend,\nand make it the default\ndbm\nbackend.\n(Contributed by Raymond Hettinger and Erlend E. Aasland in\ngh-100414\n.)\nAllow removing all items from the database through\nthe new\ngdbm.clear()\nand\nndbm.clear()\nmethods.\n(Contributed by Donghee Na in\ngh-107122\n.)\ndis\n¶\nChange the output of\ndis\nmodule functions to show logical\nlabels for jump targets and exception handlers, rather than offsets.\nThe offsets can be added with the new\n-O\ncommand-line option\nor the\nshow_offsets\nargument.\n(Contributed by Irit Katriel in\ngh-112137\n.)\nget_instructions()\nno longer represents cache entries\nas separate instructions.\nInstead, it returns them as part of the\nInstruction\n,\nin the new\ncache_info\nfield.\nThe\nshow_caches\nargument to\nget_instructions()\nis deprecated\nand no longer has any effect.\n(Contributed by Irit Katriel in\ngh-112962\n.)\ndoctest\n¶\ndoctest\noutput is now colored by default.\nThis can be controlled via the new\nPYTHON_COLORS\nenvironment\nvariable as well as the canonical\nNO_COLOR\nand\nFORCE_COLOR\nenvironment variables.\nSee also\nControlling color\n.\n(Contributed by Hugo van Kemenade in\ngh-117225\n.)\nThe\nDocTestRunner.run()\nmethod now counts the number of skipped tests.\nAdd the\nDocTestRunner.skips\nand\nTestResults.skipped\nattributes.\n(Contributed by Victor Stinner in\ngh-108794\n.)\nemail\n¶\nHeaders with embedded newlines are now quoted on output.\nThe\ngenerator\nwill now refuse to serialize (write) headers\nthat are improperly folded or delimited, such that they would be parsed as\nmultiple headers or joined with adjacent data.\nIf you need to turn this safety feature off,\nset\nverify_generated_headers\n.\n(Contributed by Bas Bloemsaat and Petr Viktorin in\ngh-121650\n.)\ngetaddresses()\nand\nparseaddr()\nnow\nreturn\n('',\n'')\npairs in more situations where invalid email addresses\nare encountered instead of potentially inaccurate values.\nThe two functions have a new optional\nstrict\nparameter (default\nTrue\n).\nTo get the old behavior (accepting malformed input), use\nstrict=False\n.\ngetattr(email.utils,\n'supports_strict_parsing',\nFalse)\ncan be used\nto check if the\nstrict\nparameter is available.\n(Contributed by Thomas Dwyer and Victor Stinner for\ngh-102988\nto improve\nthe\nCVE 2023-27043\nfix.)\nenum\n¶\nEnumDict\nhas been made public to better support subclassing\nEnumType\n.\nfractions\n¶\nFraction\nobjects now support the standard\nformat specification mini-language\nrules\nfor fill, alignment, sign handling, minimum width, and grouping.\n(Contributed by Mark Dickinson in\ngh-111320\n.)\nglob\n¶\nAdd\ntranslate()\n, a function to convert a path specification\nwith shell-style wildcards to a regular expression.\n(Contributed by Barney Gale in\ngh-72904\n.)\nimportlib\n¶\nThe following functions in\nimportlib.resources\nnow allow accessing\na directory (or tree) of resources, using multiple positional arguments\n(the\nencoding\nand\nerrors\narguments in the text-reading functions\nare now keyword-only):\nis_resource()\nopen_binary()\nopen_text()\npath()\nread_binary()\nread_text()\nThese functions are no longer deprecated and are not scheduled for removal.\n(Contributed by Petr Viktorin in\ngh-116608\n.)\ncontents()\nremains deprecated in favor of\nthe fully-featured\nTraversable\nAPI.\nHowever, there is now no plan to remove it.\n(Contributed by Petr Viktorin in\ngh-116608\n.)\nio\n¶\nThe\nIOBase\nfinalizer now logs any errors raised by\nthe\nclose()\nmethod with\nsys.unraisablehook\n.\nPreviously, errors were ignored silently by default,\nand only logged in\nPython Development Mode\nor when using a\nPython debug build\n.\n(Contributed by Victor Stinner in\ngh-62948\n.)\nipaddress\n¶\nAdd the\nIPv4Address.ipv6_mapped\nproperty,\nwhich returns the IPv4-mapped IPv6 address.\n(Contributed by Charles Machalow in\ngh-109466\n.)\nFix\nis_global\nand\nis_private\nbehavior in\nIPv4Address\n,\nIPv6Address\n,\nIPv4Network\n, and\nIPv6Network\n.\n(Contributed by Jakub Stasiak in\ngh-113171\n.)\nitertools\n¶\nbatched()\nhas a new\nstrict\nparameter,\nwhich raises a\nValueError\nif the final batch is shorter\nthan the specified batch size.\n(Contributed by Raymond Hettinger in\ngh-113202\n.)\nmarshal\n¶\nAdd the\nallow_code\nparameter in module functions.\nPassing\nallow_code=False\nprevents serialization and de-serialization\nof code objects which are incompatible between Python versions.\n(Contributed by Serhiy Storchaka in\ngh-113626\n.)\nmath\n¶\nThe new function\nfma()\nperforms fused multiply-add operations.\nThis computes\nx\n*\ny\n+\nz\nwith only a single round,\nand so avoids any intermediate loss of precision.\nIt wraps the\nfma()\nfunction provided by C99,\nand follows the specification of the IEEE 754 “fusedMultiplyAdd” operation\nfor special cases.\n(Contributed by Mark Dickinson and Victor Stinner in\ngh-73468\n.)\nmimetypes\n¶\nAdd the\nguess_file_type()\nfunction to guess a MIME type\nfrom a filesystem path.\nUsing paths with\nguess_type()\nis now\nsoft deprecated\n.\n(Contributed by Serhiy Storchaka in\ngh-66543\n.)\nmmap\n¶\nmmap\nis now protected from crashing on Windows when the\nmapped memory is inaccessible due to file system errors or access violations.\n(Contributed by Jannis Weigend in\ngh-118209\n.)\nmmap\nhas a new\nseekable()\nmethod\nthat can be used when a seekable file-like object is required.\nThe\nseek()\nmethod now returns the new absolute position.\n(Contributed by Donghee Na and Sylvie Liberman in\ngh-111835\n.)\nThe new UNIX-only\ntrackfd\nparameter for\nmmap\ncontrols\nfile descriptor duplication;\nif false, the file descriptor specified by\nfileno\nwill not be duplicated.\n(Contributed by Zackery Spytz and Petr Viktorin in\ngh-78502\n.)\nmultiprocessing\n¶\nThe default number of worker threads and processes is now selected using\nos.process_cpu_count()\ninstead of\nos.cpu_count()\n.\n(Contributed by Victor Stinner in\ngh-109649\n.)\nos\n¶\nAdd\nprocess_cpu_count()\nfunction to get the number\nof logical CPU cores usable by the calling thread of the current process.\n(Contributed by Victor Stinner in\ngh-109649\n.)\ncpu_count()\nand\nprocess_cpu_count()\ncan be overridden\nthrough the new environment variable\nPYTHON_CPU_COUNT\nor the new command-line option\n-X\ncpu_count\n.\nThis option is useful for users who need to limit CPU resources\nof a container system without having to modify application code\nor the container itself.\n(Contributed by Donghee Na in\ngh-109595\n.)\nAdd a\nlow level interface\nto Linux’s\ntimer file descriptors\nvia\ntimerfd_create()\n,\ntimerfd_settime()\n,\ntimerfd_settime_ns()\n,\ntimerfd_gettime()\n,\ntimerfd_gettime_ns()\n,\nTFD_NONBLOCK\n,\nTFD_CLOEXEC\n,\nTFD_TIMER_ABSTIME\n, and\nTFD_TIMER_CANCEL_ON_SET\n(Contributed by Masaru Tsuchiyama in\ngh-108277\n.)\nlchmod()\nand the\nfollow_symlinks\nargument of\nchmod()\nare both now available on Windows.\nNote that the default value of\nfollow_symlinks\nin\nlchmod()\nis\nFalse\non Windows.\n(Contributed by Serhiy Storchaka in\ngh-59616\n.)\nfchmod()\nand support for file descriptors in\nchmod()\nare both now available on Windows.\n(Contributed by Serhiy Storchaka in\ngh-113191\n.)\nOn Windows,\nmkdir()\nand\nmakedirs()\nnow support passing\na\nmode\nvalue of\n0o700\nto apply access control to the new directory.\nThis implicitly affects\ntempfile.mkdtemp()\nand is a mitigation for\nCVE 2024-4030\n.\nOther values for\nmode\ncontinue to be ignored.\n(Contributed by Steve Dower in\ngh-118486\n.)\nposix_spawn()\nnow accepts\nNone\nfor the\nenv\nargument,\nwhich makes the newly spawned process use the current process environment.\n(Contributed by Jakub Kulik in\ngh-113119\n.)\nposix_spawn()\ncan now use the\nPOSIX_SPAWN_CLOSEFROM\nattribute in the\nfile_actions\nparameter on platforms that support\nposix_spawn_file_actions_addclosefrom_np()\n.\n(Contributed by Jakub Kulik in\ngh-113117\n.)\nos.path\n¶\nAdd\nisreserved()\nto check if a path is reserved\non the current system.\nThis function is only available on Windows.\n(Contributed by Barney Gale in\ngh-88569\n.)\nOn Windows,\nisabs()\nno longer considers paths\nstarting with exactly one slash (\n\\\nor\n/\n) to be absolute.\n(Contributed by Barney Gale and Jon Foster in\ngh-44626\n.)\nrealpath()\nnow resolves MS-DOS style file names\neven if the file is not accessible.\n(Contributed by Moonsik Park in\ngh-82367\n.)\npathlib\n¶\nAdd\nUnsupportedOperation\n, which is raised instead of\nNotImplementedError\nwhen a path operation isn’t supported.\n(Contributed by Barney Gale in\ngh-89812\n.)\nAdd a new constructor for creating\nPath\nobjects\nfrom ‘file’ URIs (\nfile:///\n),\nPath.from_uri()\n.\n(Contributed by Barney Gale in\ngh-107465\n.)\nAdd\nPurePath.full_match()\nfor matching paths with\nshell-style wildcards, including the recursive wildcard “\n**\n”.\n(Contributed by Barney Gale in\ngh-73435\n.)\nAdd the\nPurePath.parser\nclass attribute to store the\nimplementation of\nos.path\nused\nfor low-level path parsing and joining.\nThis will be either\nposixpath\nor\nntpath\n.\nAdd\nrecurse_symlinks\nkeyword-only argument to\nPath.glob()\nand\nrglob()\n.\n(Contributed by Barney Gale in\ngh-77609\n.)\nPath.glob()\nand\nrglob()\nnow return files and directories when given a pattern that ends with “\n**\n”.\nPreviously, only directories were returned.\n(Contributed by Barney Gale in\ngh-70303\n.)\nAdd the\nfollow_symlinks\nkeyword-only argument to\nPath.is_file\n,\nPath.is_dir\n,\nPath.owner()\n, and\nPath.group()\n.\n(Contributed by Barney Gale in\ngh-105793\nand Kamil Turek in\ngh-107962\n.)\npdb\n¶\nbreakpoint()\nand\nset_trace()\nnow enter the debugger immediately\nrather than on the next line of code to be executed. This change prevents the\ndebugger from breaking outside of the context when\nbreakpoint()\nis positioned\nat the end of the context.\n(Contributed by Tian Gao in\ngh-118579\n.)\nsys.path[0]\nis no longer replaced by the directory of the script\nbeing debugged when\nsys.flags.safe_path\nis set.\n(Contributed by Tian Gao and Christian Walther in\ngh-111762\n.)\nzipapp\nis now supported as a debugging target.\n(Contributed by Tian Gao in\ngh-118501\n.)\nAdd ability to move between chained exceptions during\npost-mortem debugging in\npm()\nusing\nthe new\nexceptions\n[exc_number]\ncommand for Pdb.\n(Contributed by Matthias Bussonnier in\ngh-106676\n.)\nExpressions and statements whose prefix is a pdb command are now correctly\nidentified and executed.\n(Contributed by Tian Gao in\ngh-108464\n.)\nqueue\n¶\nAdd\nQueue.shutdown\nand\nShutDown\nto manage queue termination.\n(Contributed by Laurie Opperman and Yves Duprat in\ngh-104750\n.)\nrandom\n¶\nAdd a\ncommand-line interface\n.\n(Contributed by Hugo van Kemenade in\ngh-118131\n.)\nre\n¶\nRename\nre.error\nto\nPatternError\nfor improved clarity.\nre.error\nis kept for backward compatibility.\nshutil\n¶\nSupport the\ndir_fd\nand\nfollow_symlinks\nkeyword arguments\nin\nchown()\n.\n(Contributed by Berker Peksag and Tahia K in\ngh-62308\n)\nsite\n¶\n.pth\nfiles are now decoded using UTF-8 first,\nand then with the\nlocale encoding\nif UTF-8 decoding fails.\n(Contributed by Inada Naoki in\ngh-117802\n.)\nsqlite3\n¶\nA\nResourceWarning\nis now emitted if a\nConnection\nobject is not\nclosed\nexplicitly.\n(Contributed by Erlend E. Aasland in\ngh-105539\n.)\nAdd the\nfilter\nkeyword-only parameter to\nConnection.iterdump()\nfor filtering database objects to dump.\n(Contributed by Mariusz Felisiak in\ngh-91602\n.)\nssl\n¶\nThe\ncreate_default_context()\nAPI now includes\nVERIFY_X509_PARTIAL_CHAIN\nand\nVERIFY_X509_STRICT\nin its default flags.\nNote\nVERIFY_X509_STRICT\nmay reject pre-\nRFC 5280\nor malformed certificates that the underlying OpenSSL implementation\nmight otherwise accept.\nWhilst disabling this is not recommended, you can do so using:\nimport\nssl\nctx\n=\nssl\n.\ncreate_default_context\n()\nctx\n.\nverify_flags\n&=\n~\nssl\n.\nVERIFY_X509_STRICT\n(Contributed by William Woodruff in\ngh-112389\n.)\nstatistics\n¶\nAdd\nkde()\nfor kernel density estimation.\nThis makes it possible to estimate a continuous probability density function\nfrom a fixed number of discrete samples.\n(Contributed by Raymond Hettinger in\ngh-115863\n.)\nAdd\nkde_random()\nfor sampling from an\nestimated probability density function created by\nkde()\n.\n(Contributed by Raymond Hettinger in\ngh-115863\n.)\nsubprocess\n¶\nThe\nsubprocess\nmodule now uses the\nposix_spawn()\nfunction in\nmore situations.\nNotably, when\nclose_fds\nis\nTrue\n(the default),\nposix_spawn()\nwill be used when the C library provides\nposix_spawn_file_actions_addclosefrom_np()\n,\nwhich includes recent versions of Linux, FreeBSD, and Solaris.\nOn Linux, this should perform similarly to the existing\nLinux\nvfork()\nbased code.\nA private control knob\nsubprocess._USE_POSIX_SPAWN\ncan\nbe set to\nFalse\nif you need to force\nsubprocess\nto never use\nposix_spawn()\n.\nPlease report your reason and platform details in\nthe\nissue tracker\nif you set this\nso that we can improve our API selection logic for everyone.\n(Contributed by Jakub Kulik in\ngh-113117\n.)\nsys\n¶\nAdd the\n_is_interned()\nfunction to test if a string was interned.\nThis function is not guaranteed to exist in all implementations of Python.\n(Contributed by Serhiy Storchaka in\ngh-78573\n.)\ntempfile\n¶\nOn Windows, the default mode\n0o700\nused by\ntempfile.mkdtemp()\nnow\nlimits access to the new directory due to changes to\nos.mkdir()\n.\nThis is a mitigation for\nCVE 2024-4030\n.\n(Contributed by Steve Dower in\ngh-118486\n.)\ntime\n¶\nOn Windows,\nmonotonic()\nnow uses the\nQueryPerformanceCounter()\nclock for a resolution of 1 microsecond,\ninstead of the\nGetTickCount64()\nclock which has\na resolution of 15.6 milliseconds.\n(Contributed by Victor Stinner in\ngh-88494\n.)\nOn Windows,\ntime()\nnow uses the\nGetSystemTimePreciseAsFileTime()\nclock for a resolution of 1 microsecond,\ninstead of the\nGetSystemTimeAsFileTime()\nclock which has\na resolution of 15.6 milliseconds.\n(Contributed by Victor Stinner in\ngh-63207\n.)\ntkinter\n¶\nAdd\ntkinter\nwidget methods:\ntk_busy_hold()\n,\ntk_busy_configure()\n,\ntk_busy_cget()\n,\ntk_busy_forget()\n,\ntk_busy_current()\n, and\ntk_busy_status()\n.\n(Contributed by Miguel, klappnase and Serhiy Storchaka in\ngh-72684\n.)\nThe\ntkinter\nwidget method\nwm_attributes()\nnow accepts\nthe attribute name without the minus prefix to get window attributes,\nfor example\nw.wm_attributes('alpha')\nand allows specifying attributes and values to set as keyword arguments,\nfor example\nw.wm_attributes(alpha=0.5)\n.\n(Contributed by Serhiy Storchaka in\ngh-43457\n.)\nwm_attributes()\ncan now return attributes as a\ndict\n,\nby using the new optional keyword-only parameter\nreturn_python_dict\n.\n(Contributed by Serhiy Storchaka in\ngh-43457\n.)\nText.count()\ncan now return a simple\nint\nwhen the new optional keyword-only parameter\nreturn_ints\nis used.\nOtherwise, the single count is returned as a 1-tuple or\nNone\n.\n(Contributed by Serhiy Storchaka in\ngh-97928\n.)\nSupport the “vsapi” element type in\nthe\nelement_create()\nmethod of\ntkinter.ttk.Style\n.\n(Contributed by Serhiy Storchaka in\ngh-68166\n.)\nAdd the\nafter_info()\nmethod for Tkinter widgets.\n(Contributed by Cheryl Sabella in\ngh-77020\n.)\nAdd a new\ncopy_replace()\nmethod to\nPhotoImage\nto copy a region from one image to another,\npossibly with pixel zooming, subsampling, or both.\n(Contributed by Serhiy Storchaka in\ngh-118225\n.)\nAdd\nfrom_coords\nparameter to the\nPhotoImage\nmethods\ncopy()\n,\nzoom()\nand\nsubsample()\n.\nAdd\nzoom\nand\nsubsample\nparameters to the\nPhotoImage\nmethod\ncopy()\n.\n(Contributed by Serhiy Storchaka in\ngh-118225\n.)\nAdd the\nPhotoImage\nmethods\nread()\nto read an image from a file\nand\ndata()\nto get the image data.\nAdd\nbackground\nand\ngrayscale\nparameters to the\nwrite()\nmethod.\n(Contributed by Serhiy Storchaka in\ngh-118271\n.)\ntraceback\n¶\nAdd the\nexc_type_str\nattribute\nto\nTracebackException\n,\nwhich holds a string display of the\nexc_type\n.\nDeprecate the\nexc_type\nattribute,\nwhich holds the type object itself.\nAdd parameter\nsave_exc_type\n(default\nTrue\n)\nto indicate whether\nexc_type\nshould be saved.\n(Contributed by Irit Katriel in\ngh-112332\n.)\nAdd a new\nshow_group\nkeyword-only parameter to\nTracebackException.format_exception_only()\nto (recursively) format\nthe nested exceptions of a\nBaseExceptionGroup\ninstance.\n(Contributed by Irit Katriel in\ngh-105292\n.)\ntypes\n¶\nSimpleNamespace\ncan now take a single positional argument\nto initialise the namespace’s arguments.\nThis argument must either be a mapping or an iterable of key-value pairs.\n(Contributed by Serhiy Storchaka in\ngh-108191\n.)\ntyping\n¶\nPEP 705\n: Add\nReadOnly\n, a special typing construct\nto mark a\nTypedDict\nitem as read-only for type checkers.\nPEP 742\n: Add\nTypeIs\n, a typing construct\nthat can be used to instruct a type checker how to narrow a type.\nAdd\nNoDefault\n, a sentinel object used to represent\nthe defaults of some parameters in the\ntyping\nmodule.\n(Contributed by Jelle Zijlstra in\ngh-116126\n.)\nAdd\nget_protocol_members()\nto return the set of members\ndefining a\ntyping.Protocol\n.\n(Contributed by Jelle Zijlstra in\ngh-104873\n.)\nAdd\nis_protocol()\nto check whether a class\nis a\nProtocol\n.\n(Contributed by Jelle Zijlstra in\ngh-104873\n.)\nClassVar\ncan now be nested in\nFinal\n,\nand vice versa.\n(Contributed by Mehdi Drissi in\ngh-89547\n.)\nunicodedata\n¶\nUpdate the Unicode database to\nversion 15.1.0\n.\n(Contributed by James Gerity in\ngh-109559\n.)\nvenv\n¶\nAdd support for creating source control management (SCM) ignore files\nin a virtual environment’s directory.\nBy default, Git is supported.\nThis is implemented as opt-in via the API,\nwhich can be extended to support other SCMs\n(\nEnvBuilder\nand\ncreate()\n),\nand opt-out via the CLI, using\n--without-scm-ignore-files\n.\n(Contributed by Brett Cannon in\ngh-108125\n.)\nwarnings\n¶\nPEP 702\n: The new\nwarnings.deprecated()\ndecorator provides a way to\ncommunicate deprecations to a\nstatic type checker\nand to warn on usage of deprecated classes and functions.\nA\nDeprecationWarning\nmay also be emitted when\na decorated function or class is used at runtime.\n(Contributed by Jelle Zijlstra in\ngh-104003\n.)\nxml\n¶\nAllow controlling Expat >=2.6.0 reparse deferral (\nCVE 2023-52425\n)\nby adding five new methods:\nxml.etree.ElementTree.XMLParser.flush()\nxml.etree.ElementTree.XMLPullParser.flush()\nxml.parsers.expat.xmlparser.GetReparseDeferralEnabled()\nxml.parsers.expat.xmlparser.SetReparseDeferralEnabled()\nxml.sax.expatreader.ExpatParser.flush()\n(Contributed by Sebastian Pipping in\ngh-115623\n.)\nAdd the\nclose()\nmethod for the iterator returned by\niterparse()\nfor explicit cleanup.\n(Contributed by Serhiy Storchaka in\ngh-69893\n.)\nzipimport\n¶\nAdd support for\nZIP64\nformat files.\nEverybody loves huge data, right?\n(Contributed by Tim Hatch in\ngh-94146\n.)\nOptimizations\n¶\nSeveral standard library modules have had\ntheir import times significantly improved.\nFor example, the import time of the\ntyping\nmodule\nhas been reduced by around a third by removing dependencies\non\nre\nand\ncontextlib\n.\nOther modules to enjoy import-time speedups include\nemail.utils\n,\nenum\n,\nfunctools\n,\nimportlib.metadata\n, and\nthreading\n.\n(Contributed by Alex Waygood, Shantanu Jain, Adam Turner, Daniel Hollas,\nand others in\ngh-109653\n.)\ntextwrap.indent()\nis now around 30% faster than before for large input.\n(Contributed by Inada Naoki in\ngh-107369\n.)\nThe\nsubprocess\nmodule now uses the\nposix_spawn()\nfunction in\nmore situations, including when\nclose_fds\nis\nTrue\n(the default)\non many modern platforms.\nThis should provide a notable performance increase\nwhen launching processes on FreeBSD and Solaris.\nSee the\nsubprocess\nsection above for details.\n(Contributed by Jakub Kulik in\ngh-113117\n.)\nRemoved Modules And APIs\n¶\nPEP 594: Remove “dead batteries” from the standard library\n¶\nPEP 594\nproposed removing 19 modules from the standard library,\ncolloquially referred to as ‘dead batteries’ due to their\nhistoric, obsolete, or insecure status.\nAll of the following modules were deprecated in Python 3.11,\nand are now removed:\naifc\nstandard-aifc\n:\nUse the redistribution of\naifc\nlibrary from PyPI.\naudioop\naudioop-lts\n:\nUse\naudioop-lts\nlibrary from PyPI.\nchunk\nstandard-chunk\n:\nUse the redistribution of\nchunk\nlibrary from PyPI.\ncgi\nand\ncgitb\ncgi.FieldStorage\ncan typically be replaced with\nurllib.parse.parse_qsl()\nfor\nGET\nand\nHEAD\nrequests,\nand the\nemail.message\nmodule or the\nmultipart\nlibrary\nfor\nPOST\nand\nPUT\nrequests.\ncgi.parse()\ncan be replaced by calling\nurllib.parse.parse_qs()\ndirectly on the desired query string,\nunless the input is\nmultipart/form-data\n,\nwhich should be replaced as described below for\ncgi.parse_multipart()\n.\ncgi.parse_header()\ncan be replaced with the functionality\nin the\nemail\npackage, which implements the same MIME RFCs.\nFor example, with\nemail.message.EmailMessage\n:\nfrom\nemail.message\nimport\nEmailMessage\nmsg\n=\nEmailMessage\n()\nmsg\n[\n'content-type'\n]\n=\n'application/json; charset=\"utf8\"'\nmain\n,\nparams\n=\nmsg\n.\nget_content_type\n(),\nmsg\n[\n'content-type'\n]\n.\nparams\ncgi.parse_multipart()\ncan be replaced with the functionality\nin the\nemail\npackage, which implements the same MIME RFCs,\nor with the\nmultipart\nlibrary.\nFor example, the\nemail.message.EmailMessage\nand\nemail.message.Message\nclasses.\nstandard-cgi\n: and\nstandard-cgitb\n:\nUse the redistribution of\ncgi\nand\ncgitb\nlibrary from PyPI.\ncrypt\nand the private\n_crypt\nextension.\nThe\nhashlib\nmodule may be an appropriate replacement\nwhen simply hashing a value is required.\nOtherwise, various third-party libraries on PyPI are available:\nbcrypt\n:\nModern password hashing for your software and your servers.\npasslib\n:\nComprehensive password hashing framework supporting over 30 schemes.\nargon2-cffi\n:\nThe secure Argon2 password hashing algorithm.\nlegacycrypt\n:\nctypes\nwrapper to the POSIX crypt library call\nand associated functionality.\ncrypt_r\n:\nFork of the\ncrypt\nmodule,\nwrapper to the\ncrypt_r(3)\nlibrary call\nand associated functionality.\nstandard-crypt\nand\ndeprecated-crypt-alternative\n:\nUse the redistribution of\ncrypt\nand reimplementation of\n_crypt\nlibraries from PyPI.\nimghdr\n:\nThe\nfiletype\n,\npuremagic\n, or\npython-magic\nlibraries\nshould be used as replacements.\nFor example, the\npuremagic.what()\nfunction can be used\nto replace the\nimghdr.what()\nfunction for all file formats\nthat were supported by\nimghdr\n.\nstandard-imghdr\n:\nUse the redistribution of\nimghdr\nlibrary from PyPI.\nmailcap\n:\nUse the\nmimetypes\nmodule instead.\nstandard-mailcap\n:\nUse the redistribution of\nmailcap\nlibrary from PyPI.\nmsilib\nnis\nnntplib\n:\nUse the\npynntp\nlibrary from PyPI instead.\nstandard-nntplib\n:\nUse the redistribution of\nnntplib\nlibrary from PyPI.\nossaudiodev\n:\nFor audio playback, use the\npygame\nlibrary from PyPI instead.\npipes\n:\nUse the\nsubprocess\nmodule instead.\nUse\nshlex.quote()\nto replace the undocumented\npipes.quote\nfunction.\nstandard-pipes\n:\nUse the redistribution of\npipes\nlibrary from PyPI.\nsndhdr\n:\nThe\nfiletype\n,\npuremagic\n, or\npython-magic\nlibraries\nshould be used as replacements.\nstandard-sndhdr\n:\nUse the redistribution of\nsndhdr\nlibrary from PyPI.\nspwd\n:\nUse the\npython-pam\nlibrary from PyPI instead.\nsunau\nstandard-sunau\n:\nUse the redistribution of\nsunau\nlibrary from PyPI.\ntelnetlib\n,\nUse the\ntelnetlib3\nor\nExscript\nlibraries from PyPI instead.\nstandard-telnetlib\n:\nUse the redistribution of\ntelnetlib\nlibrary from PyPI.\nuu\n:\nUse the\nbase64\nmodule instead, as a modern alternative.\nstandard-uu\n:\nUse the redistribution of\nuu\nlibrary from PyPI.\nxdrlib\nstandard-xdrlib\n:\nUse the redistribution of\nxdrlib\nlibrary from PyPI.\n(Contributed by Victor Stinner and Zachary Ware in\ngh-104773\nand\ngh-104780\n.)\n2to3\n¶\nRemove the\n2to3\nprogram and the\nlib2to3\nmodule,\npreviously deprecated in Python 3.11.\n(Contributed by Victor Stinner in\ngh-104780\n.)\nbuiltins\n¶\nRemove support for chained\nclassmethod\ndescriptors\n(introduced in\ngh-63272\n).\nThese can no longer be used to wrap other descriptors,\nsuch as\nproperty\n.\nThe core design of this feature was flawed and led to several problems.\nTo “pass-through” a\nclassmethod\n, consider using\nthe\n__wrapped__\nattribute that was added in Python 3.10.\n(Contributed by Raymond Hettinger in\ngh-89519\n.)\nRaise a\nRuntimeError\nwhen calling\nframe.clear()\non a suspended frame (as has always been the case for an executing frame).\n(Contributed by Irit Katriel in\ngh-79932\n.)\nconfigparser\n¶\nRemove the undocumented\nLegacyInterpolation\nclass,\ndeprecated in the docstring since Python 3.2,\nand at runtime since Python 3.11.\n(Contributed by Hugo van Kemenade in\ngh-104886\n.)\nimportlib.metadata\n¶\nRemove deprecated subscript (\n__getitem__()\n) access for\nEntryPoint\nobjects.\n(Contributed by Jason R. Coombs in\ngh-113175\n.)\nlocale\n¶\nRemove the\nlocale.resetlocale()\nfunction, deprecated in Python 3.11.\nUse\nlocale.setlocale(locale.LC_ALL,\n\"\")\ninstead.\n(Contributed by Victor Stinner in\ngh-104783\n.)\nopcode\n¶\nMove\nopcode.ENABLE_SPECIALIZATION\nto\n_opcode.ENABLE_SPECIALIZATION\n.\nThis field was added in 3.12, it was never documented,\nand is not intended for external use.\n(Contributed by Irit Katriel in\ngh-105481\n.)\nRemove\nopcode.is_pseudo()\n,\nopcode.MIN_PSEUDO_OPCODE\n,\nand\nopcode.MAX_PSEUDO_OPCODE\n, which were added in Python 3.12,\nbut were neither documented nor exposed through\ndis\n,\nand were not intended to be used externally.\n(Contributed by Irit Katriel in\ngh-105481\n.)\noptparse\n¶\nThis module is no longer considered\nsoft deprecated\n.\nWhile\nargparse\nremains preferred for new projects that\naren’t using a third party command line argument processing\nlibrary, there are aspects of the way\nargparse\nworks that\nmean the lower level\noptparse\nmodule may provide a better\nfoundation for\nwriting\nargument processing libraries, and\nfor implementing command line applications which adhere more\nstrictly than\nargparse\ndoes to various Unix command line\nprocessing conventions that originate in the behaviour of the\nC\ngetopt()\nfunction .\n(Contributed by Alyssa Coghlan and Serhiy Storchaka in\ngh-126180\n.)\npathlib\n¶\nRemove the ability to use\nPath\nobjects as context managers.\nThis functionality was deprecated and has had no effect since Python 3.9.\n(Contributed by Barney Gale in\ngh-83863\n.)\nre\n¶\nRemove the undocumented, deprecated, and broken\nre.template()\nfunction and\nre.TEMPLATE\n/\nre.T\nflag.\n(Contributed by Serhiy Storchaka and Nikita Sobolev in\ngh-105687\n.)\ntkinter.tix\n¶\nRemove the\ntkinter.tix\nmodule, deprecated in Python 3.6.\nThe third-party Tix library which the module wrapped is unmaintained.\n(Contributed by Zachary Ware in\ngh-75552\n.)\nturtle\n¶\nRemove the\nRawTurtle.settiltangle()\nmethod,\ndeprecated in the documentation since Python 3.1\nand at runtime since Python 3.11.\n(Contributed by Hugo van Kemenade in\ngh-104876\n.)\ntyping\n¶\nRemove the\ntyping.io\nand\ntyping.re\nnamespaces,\ndeprecated since Python 3.8.\nThe items in those namespaces can be imported directly\nfrom the\ntyping\nmodule.\n(Contributed by Sebastian Rittau in\ngh-92871\n.)\nRemove the keyword-argument method of creating\nTypedDict\ntypes, deprecated in Python 3.11.\n(Contributed by Tomas Roun in\ngh-104786\n.)\nunittest\n¶\nRemove the following\nunittest\nfunctions, deprecated in Python 3.11:\nunittest.findTestCases()\nunittest.makeSuite()\nunittest.getTestCaseNames()\nUse\nTestLoader\nmethods instead:\nloadTestsFromModule()\nloadTestsFromTestCase()\ngetTestCaseNames()\n(Contributed by Hugo van Kemenade in\ngh-104835\n.)\nRemove the untested and undocumented\nTestProgram.usageExit()\nmethod, deprecated in Python 3.11.\n(Contributed by Hugo van Kemenade in\ngh-104992\n.)\nurllib\n¶\nRemove the\ncafile\n,\ncapath\n, and\ncadefault\nparameters of the\nurllib.request.urlopen()\nfunction, deprecated in Python 3.6.\nUse the\ncontext\nparameter instead with an\nSSLContext\ninstance.\nThe\nssl.SSLContext.load_cert_chain()\nfunction\ncan be used to load specific certificates,\nor let\nssl.create_default_context()\nselect\nthe operating system’s trusted certificate authority (CA) certificates.\n(Contributed by Victor Stinner in\ngh-105382\n.)\nwebbrowser\n¶\nRemove the untested and undocumented\nMacOSX\nclass,\ndeprecated in Python 3.11.\nUse the\nMacOSXOSAScript\nclass (introduced in Python 3.2) instead.\n(Contributed by Hugo van Kemenade in\ngh-104804\n.)\nRemove the deprecated\nMacOSXOSAScript._name\nattribute.\nUse the\nMacOSXOSAScript.name\nattribute instead.\n(Contributed by Nikita Sobolev in\ngh-105546\n.)\nNew Deprecations\n¶\nUser-defined functions\n:\nDeprecate assignment to a function’s\n__code__\nattribute,\nwhere the new code object’s type does not match the function’s type.\nThe different types are:\nplain function, generator, async generator, and coroutine.\n(Contributed by Irit Katriel in\ngh-81137\n.)\narray\n:\nDeprecate the\n'u'\nformat code (\nwchar_t\n) at runtime.\nThis format code has been deprecated in documentation since Python 3.3,\nand will be removed in Python 3.16.\nUse the\n'w'\nformat code (\nPy_UCS4\n)\nfor Unicode characters instead.\n(Contributed by Hugo van Kemenade in\ngh-80480\n.)\nctypes\n:\nDeprecate the undocumented\nSetPointerType()\nfunction,\nto be removed in Python 3.15.\n(Contributed by Victor Stinner in\ngh-105733\n.)\nSoft-deprecate\nthe\nARRAY()\nfunction in favour of\ntype\n*\nlength\nmultiplication.\n(Contributed by Victor Stinner in\ngh-105733\n.)\ndecimal\n:\nDeprecate the non-standard and undocumented\nDecimal\nformat specifier\n'N'\n,\nwhich is only supported in the\ndecimal\nmodule’s C implementation.\n(Contributed by Serhiy Storchaka in\ngh-89902\n.)\ndis\n:\nDeprecate the\nHAVE_ARGUMENT\nseparator.\nCheck membership in\nhasarg\ninstead.\n(Contributed by Irit Katriel in\ngh-109319\n.)\ngettext\n:\nDeprecate non-integer numbers as arguments to functions and methods\nthat consider plural forms in the\ngettext\nmodule,\neven if no translation was found.\n(Contributed by Serhiy Storchaka in\ngh-88434\n.)\nglob\n:\nDeprecate the undocumented\nglob0()\nand\nglob1()\nfunctions.\nUse\nglob()\nand pass a\npath-like object\nspecifying\nthe root directory to the\nroot_dir\nparameter instead.\n(Contributed by Barney Gale in\ngh-117337\n.)\nhttp.server\n:\nDeprecate\nCGIHTTPRequestHandler\n,\nto be removed in Python 3.15.\nProcess-based CGI HTTP servers have been out of favor for a very long time.\nThis code was outdated, unmaintained, and rarely used.\nIt has a high potential for both security and functionality bugs.\n(Contributed by Gregory P. Smith in\ngh-109096\n.)\nDeprecate the\n--cgi\nflag to\nthe\npython -m http.server\ncommand-line interface,\nto be removed in Python 3.15.\n(Contributed by Gregory P. Smith in\ngh-109096\n.)\nmimetypes\n:\nSoft-deprecate\nfile path arguments\nto\nguess_type()\n,\nuse\nguess_file_type()\ninstead.\n(Contributed by Serhiy Storchaka in\ngh-66543\n.)\nre\n:\nDeprecate passing the optional\nmaxsplit\n,\ncount\n, or\nflags\narguments\nas positional arguments to the module-level\nsplit()\n,\nsub()\n, and\nsubn()\nfunctions.\nThese parameters will become\nkeyword-only\nin a future version of Python.\n(Contributed by Serhiy Storchaka in\ngh-56166\n.)\npathlib\n:\nDeprecate\nPurePath.is_reserved()\n,\nto be removed in Python 3.15.\nUse\nos.path.isreserved()\nto detect reserved paths on Windows.\n(Contributed by Barney Gale in\ngh-88569\n.)\nplatform\n:\nDeprecate\njava_ver()\n,\nto be removed in Python 3.15.\nThis function is only useful for Jython support, has a confusing API,\nand is largely untested.\n(Contributed by Nikita Sobolev in\ngh-116349\n.)\npydoc\n:\nDeprecate the undocumented\nispackage()\nfunction.\n(Contributed by Zackery Spytz in\ngh-64020\n.)\nsqlite3\n:\nDeprecate passing more than one positional argument to\nthe\nconnect()\nfunction\nand the\nConnection\nconstructor.\nThe remaining parameters will become keyword-only in Python 3.15.\n(Contributed by Erlend E. Aasland in\ngh-107948\n.)\nDeprecate passing name, number of arguments, and the callable as keyword\narguments for\nConnection.create_function()\nand\nConnection.create_aggregate()\nThese parameters will become positional-only in Python 3.15.\n(Contributed by Erlend E. Aasland in\ngh-108278\n.)\nDeprecate passing the callback callable by keyword for the\nset_authorizer()\n,\nset_progress_handler()\n, and\nset_trace_callback()\nConnection\nmethods.\nThe callback callables will become positional-only in Python 3.15.\n(Contributed by Erlend E. Aasland in\ngh-108278\n.)\nsys\n:\nDeprecate the\n_enablelegacywindowsfsencoding()\nfunction,\nto be removed in Python 3.16.\nUse the\nPYTHONLEGACYWINDOWSFSENCODING\nenvironment variable instead.\n(Contributed by Inada Naoki in\ngh-73427\n.)\ntarfile\n:\nDeprecate the undocumented and unused\nTarFile.tarfile\nattribute,\nto be removed in Python 3.16.\n(Contributed in\ngh-115256\n.)\ntraceback\n:\nDeprecate the\nTracebackException.exc_type\nattribute.\nUse\nTracebackException.exc_type_str\ninstead.\n(Contributed by Irit Katriel in\ngh-112332\n.)\ntyping\n:\nDeprecate the undocumented keyword argument syntax for creating\nNamedTuple\nclasses\n(e.g.\nPoint\n=\nNamedTuple(\"Point\",\nx=int,\ny=int)\n),\nto be removed in Python 3.15.\nUse the class-based syntax or the functional syntax instead.\n(Contributed by Alex Waygood in\ngh-105566\n.)\nDeprecate omitting the\nfields\nparameter when creating\na\nNamedTuple\nor\ntyping.TypedDict\nclass,\nand deprecate passing\nNone\nto the\nfields\nparameter of both types.\nPython 3.15 will require a valid sequence for the\nfields\nparameter.\nTo create a NamedTuple class with zero fields,\nuse\nclass\nNT(NamedTuple):\npass\nor\nNT\n=\nNamedTuple(\"NT\",\n())\n.\nTo create a TypedDict class with zero fields,\nuse\nclass\nTD(TypedDict):\npass\nor\nTD\n=\nTypedDict(\"TD\",\n{})\n.\n(Contributed by Alex Waygood in\ngh-105566\nand\ngh-105570\n.)\nDeprecate the\ntyping.no_type_check_decorator()\ndecorator function,\nto be removed in in Python 3.15.\nAfter eight years in the\ntyping\nmodule,\nit has yet to be supported by any major type checker.\n(Contributed by Alex Waygood in\ngh-106309\n.)\nDeprecate\ntyping.AnyStr\n.\nIn Python 3.16, it will be removed from\ntyping.__all__\n,\nand a\nDeprecationWarning\nwill be emitted at runtime\nwhen it is imported or accessed.\nIt will be removed entirely in Python 3.18.\nUse the new\ntype parameter syntax\ninstead.\n(Contributed by Michael The in\ngh-107116\n.)\nwave\n:\nDeprecate the\ngetmark()\n,\nsetmark()\n,\nand\ngetmarkers()\nmethods of\nthe\nWave_read\nand\nWave_write\nclasses,\nto be removed in Python 3.15.\n(Contributed by Victor Stinner in\ngh-105096\n.)\nPending Removal in Python 3.14\n¶\nargparse\n: The\ntype\n,\nchoices\n, and\nmetavar\nparameters\nof\nargparse.BooleanOptionalAction\nare deprecated\nand will be removed in 3.14.\n(Contributed by Nikita Sobolev in\ngh-92248\n.)\nast\n: The following features have been deprecated in documentation\nsince Python 3.8, now cause a\nDeprecationWarning\nto be emitted at\nruntime when they are accessed or used, and will be removed in Python 3.14:\nast.Num\nast.Str\nast.Bytes\nast.NameConstant\nast.Ellipsis\nUse\nast.Constant\ninstead.\n(Contributed by Serhiy Storchaka in\ngh-90953\n.)\nasyncio\n:\nThe child watcher classes\nMultiLoopChildWatcher\n,\nFastChildWatcher\n,\nAbstractChildWatcher\nand\nSafeChildWatcher\nare deprecated and\nwill be removed in Python 3.14.\n(Contributed by Kumar Aditya in\ngh-94597\n.)\nasyncio.set_child_watcher()\n,\nasyncio.get_child_watcher()\n,\nasyncio.AbstractEventLoopPolicy.set_child_watcher()\nand\nasyncio.AbstractEventLoopPolicy.get_child_watcher()\nare deprecated\nand will be removed in Python 3.14.\n(Contributed by Kumar Aditya in\ngh-94597\n.)\nThe\nget_event_loop()\nmethod of the\ndefault event loop policy now emits a\nDeprecationWarning\nif there\nis no current event loop set and it decides to create one.\n(Contributed by Serhiy Storchaka and Guido van Rossum in\ngh-100160\n.)\ncollections.abc\n: Deprecated\nByteString\n.\nPrefer\nSequence\nor\nBuffer\n.\nFor use in typing, prefer a union, like\nbytes\n|\nbytearray\n,\nor\ncollections.abc.Buffer\n.\n(Contributed by Shantanu Jain in\ngh-91896\n.)\nemail\n: Deprecated the\nisdst\nparameter in\nemail.utils.localtime()\n.\n(Contributed by Alan Williams in\ngh-72346\n.)\nimportlib.abc\ndeprecated classes:\nimportlib.abc.ResourceReader\nimportlib.abc.Traversable\nimportlib.abc.TraversableResources\nUse\nimportlib.resources.abc\nclasses instead:\nimportlib.resources.abc.Traversable\nimportlib.resources.abc.TraversableResources\n(Contributed by Jason R. Coombs and Hugo van Kemenade in\ngh-93963\n.)\nitertools\nhad undocumented, inefficient, historically buggy,\nand inconsistent support for copy, deepcopy, and pickle operations.\nThis will be removed in 3.14 for a significant reduction in code\nvolume and maintenance burden.\n(Contributed by Raymond Hettinger in\ngh-101588\n.)\nmultiprocessing\n: The default start method will change to a safer one on\nLinux, BSDs, and other non-macOS POSIX platforms where\n'fork'\nis currently\nthe default (\ngh-84559\n). Adding a runtime warning about this was deemed too\ndisruptive as the majority of code is not expected to care. Use the\nget_context()\nor\nset_start_method()\nAPIs to explicitly specify when\nyour code\nrequires\n'fork'\n.  See\nContexts and start methods\n.\npathlib\n:\nis_relative_to()\nand\nrelative_to()\n: passing additional arguments is\ndeprecated.\npkgutil\n:\nfind_loader()\nand\nget_loader()\nnow raise\nDeprecationWarning\n;\nuse\nimportlib.util.find_spec()\ninstead.\n(Contributed by Nikita Sobolev in\ngh-97850\n.)\npty\n:\nmaster_open()\n: use\npty.openpty()\n.\nslave_open()\n: use\npty.openpty()\n.\nsqlite3\n:\nversion\nand\nversion_info\n.\nexecute()\nand\nexecutemany()\nif\nnamed placeholders\nare used and\nparameters\nis a sequence instead of a\ndict\n.\ntyping\n:\nByteString\n, deprecated since Python 3.9,\nnow causes a\nDeprecationWarning\nto be emitted when it is used.\nurllib\n:\nurllib.parse.Quoter\nis deprecated: it was not intended to be a\npublic API.\n(Contributed by Gregory P. Smith in\ngh-88168\n.)\nPending Removal in Python 3.15\n¶\nThe import system:\nSetting\n__cached__\non a module while\nfailing to set\n__spec__.cached\nis deprecated. In Python 3.15,\n__cached__\nwill cease to be set or\ntake into consideration by the import system or standard library. (\ngh-97879\n)\nSetting\n__package__\non a module while\nfailing to set\n__spec__.parent\nis deprecated. In Python 3.15,\n__package__\nwill cease to be set or\ntake into consideration by the import system or standard library. (\ngh-97879\n)\nctypes\n:\nThe undocumented\nctypes.SetPointerType()\nfunction\nhas been deprecated since Python 3.13.\nhttp.server\n:\nThe obsolete and rarely used\nCGIHTTPRequestHandler\nhas been deprecated since Python 3.13.\nNo direct replacement exists.\nAnything\nis better than CGI to interface\na web server with a request handler.\nThe\n--cgi\nflag to the\npython -m http.server\ncommand-line interface has been deprecated since Python 3.13.\nimportlib\n:\nload_module()\nmethod: use\nexec_module()\ninstead.\nlocale\n:\nThe\ngetdefaultlocale()\nfunction\nhas been deprecated since Python 3.11.\nIts removal was originally planned for Python 3.13 (\ngh-90817\n),\nbut has been postponed to Python 3.15.\nUse\ngetlocale()\n,\nsetlocale()\n,\nand\ngetencoding()\ninstead.\n(Contributed by Hugo van Kemenade in\ngh-111187\n.)\npathlib\n:\nPurePath.is_reserved()\nhas been deprecated since Python 3.13.\nUse\nos.path.isreserved()\nto detect reserved paths on Windows.\nplatform\n:\njava_ver()\nhas been deprecated since Python 3.13.\nThis function is only useful for Jython support, has a confusing API,\nand is largely untested.\nsysconfig\n:\nThe\ncheck_home\nargument of\nsysconfig.is_python_build()\nhas been\ndeprecated since Python 3.12.\nthreading\n:\nRLock()\nwill take no arguments in Python 3.15.\nPassing any arguments has been deprecated since Python 3.14,\nas the  Python version does not permit any arguments,\nbut the C version allows any number of positional or keyword arguments,\nignoring every argument.\ntypes\n:\ntypes.CodeType\n: Accessing\nco_lnotab\nwas\ndeprecated in\nPEP 626\nsince 3.10 and was planned to be removed in 3.12,\nbut it only got a proper\nDeprecationWarning\nin 3.12.\nMay be removed in 3.15.\n(Contributed by Nikita Sobolev in\ngh-101866\n.)\ntyping\n:\nThe undocumented keyword argument syntax for creating\nNamedTuple\nclasses\n(e.g.\nPoint\n=\nNamedTuple(\"Point\",\nx=int,\ny=int)\n)\nhas been deprecated since Python 3.13.\nUse the class-based syntax or the functional syntax instead.\nWhen using the functional syntax of\nTypedDict\ns, failing\nto pass a value to the\nfields\nparameter (\nTD\n=\nTypedDict(\"TD\")\n) or\npassing\nNone\n(\nTD\n=\nTypedDict(\"TD\",\nNone)\n) has been deprecated\nsince Python 3.13.\nUse\nclass\nTD(TypedDict):\npass\nor\nTD\n=\nTypedDict(\"TD\",\n{})\nto create a TypedDict with zero field.\nThe\ntyping.no_type_check_decorator()\ndecorator function\nhas been deprecated since Python 3.13.\nAfter eight years in the\ntyping\nmodule,\nit has yet to be supported by any major type checker.\nwave\n:\nThe\ngetmark()\n,\nsetmark()\n,\nand\ngetmarkers()\nmethods of\nthe\nWave_read\nand\nWave_write\nclasses\nhave been deprecated since Python 3.13.\nPending removal in Python 3.16\n¶\nThe import system:\nSetting\n__loader__\non a module while\nfailing to set\n__spec__.loader\nis deprecated. In Python 3.16,\n__loader__\nwill cease to be set or\ntaken into consideration by the import system or the standard library.\narray\n:\nThe\n'u'\nformat code (\nwchar_t\n)\nhas been deprecated in documentation since Python 3.3\nand at runtime since Python 3.13.\nUse the\n'w'\nformat code (\nPy_UCS4\n)\nfor Unicode characters instead.\nasyncio\n:\nasyncio.iscoroutinefunction()\nis deprecated\nand will be removed in Python 3.16,\nuse\ninspect.iscoroutinefunction()\ninstead.\n(Contributed by Jiahao Li and Kumar Aditya in\ngh-122875\n.)\nbuiltins\n:\nBitwise inversion on boolean types,\n~True\nor\n~False\nhas been deprecated since Python 3.12,\nas it produces surprising and unintuitive results (\n-2\nand\n-1\n).\nUse\nnot\nx\ninstead for the logical negation of a Boolean.\nIn the rare case that you need the bitwise inversion of\nthe underlying integer, convert to\nint\nexplicitly (\n~int(x)\n).\nshutil\n:\nThe\nExecError\nexception\nhas been deprecated since Python 3.14.\nIt has not been used by any function in\nshutil\nsince Python 3.4,\nand is now an alias of\nRuntimeError\n.\nsymtable\n:\nThe\nClass.get_methods\nmethod\nhas been deprecated since Python 3.14.\nsys\n:\nThe\n_enablelegacywindowsfsencoding()\nfunction\nhas been deprecated since Python 3.13.\nUse the\nPYTHONLEGACYWINDOWSFSENCODING\nenvironment variable instead.\ntarfile\n:\nThe undocumented and unused\nTarFile.tarfile\nattribute\nhas been deprecated since Python 3.13.\nPending Removal in Future Versions\n¶\nThe following APIs will be removed in the future,\nalthough there is currently no date scheduled for their removal.\nargparse\n: Nesting argument groups and nesting mutually exclusive\ngroups are deprecated.\nbuiltins\n:\nbool(NotImplemented)\n.\nGenerators:\nthrow(type,\nexc,\ntb)\nand\nathrow(type,\nexc,\ntb)\nsignature is deprecated: use\nthrow(exc)\nand\nathrow(exc)\ninstead,\nthe single argument signature.\nCurrently Python accepts numeric literals immediately followed by keywords,\nfor example\n0in\nx\n,\n1or\nx\n,\n0if\n1else\n2\n.  It allows confusing and\nambiguous expressions like\n[0x1for\nx\nin\ny]\n(which can be interpreted as\n[0x1\nfor\nx\nin\ny]\nor\n[0x1f\nor\nx\nin\ny]\n).  A syntax warning is raised\nif the numeric literal is immediately followed by one of keywords\nand\n,\nelse\n,\nfor\n,\nif\n,\nin\n,\nis\nand\nor\n.  In a future release it\nwill be changed to a syntax error. (\ngh-87999\n)\nSupport for\n__index__()\nand\n__int__()\nmethod returning non-int type:\nthese methods will be required to return an instance of a strict subclass of\nint\n.\nSupport for\n__float__()\nmethod returning a strict subclass of\nfloat\n: these methods will be required to return an instance of\nfloat\n.\nSupport for\n__complex__()\nmethod returning a strict subclass of\ncomplex\n: these methods will be required to return an instance of\ncomplex\n.\nDelegation of\nint()\nto\n__trunc__()\nmethod.\nPassing a complex number as the\nreal\nor\nimag\nargument in the\ncomplex()\nconstructor is now deprecated; it should only be passed\nas a single positional argument.\n(Contributed by Serhiy Storchaka in\ngh-109218\n.)\ncalendar\n:\ncalendar.January\nand\ncalendar.February\nconstants are\ndeprecated and replaced by\ncalendar.JANUARY\nand\ncalendar.FEBRUARY\n.\n(Contributed by Prince Roshan in\ngh-103636\n.)\ncodeobject.co_lnotab\n: use the\ncodeobject.co_lines()\nmethod\ninstead.\ndatetime\n:\nutcnow()\n:\nuse\ndatetime.datetime.now(tz=datetime.UTC)\n.\nutcfromtimestamp()\n:\nuse\ndatetime.datetime.fromtimestamp(timestamp,\ntz=datetime.UTC)\n.\ngettext\n: Plural value must be an integer.\nimportlib\n:\ncache_from_source()\ndebug_override\nparameter is\ndeprecated: use the\noptimization\nparameter instead.\nimportlib.metadata\n:\nEntryPoints\ntuple interface.\nImplicit\nNone\non return values.\nlogging\n: the\nwarn()\nmethod has been deprecated\nsince Python 3.3, use\nwarning()\ninstead.\nmailbox\n: Use of StringIO input and text mode is deprecated, use\nBytesIO and binary mode instead.\nos\n: Calling\nos.register_at_fork()\nin multi-threaded process.\npydoc.ErrorDuringImport\n: A tuple value for\nexc_info\nparameter is\ndeprecated, use an exception instance.\nre\n: More strict rules are now applied for numerical group references\nand group names in regular expressions.  Only sequence of ASCII digits is now\naccepted as a numerical reference.  The group name in bytes patterns and\nreplacement strings can now only contain ASCII letters and digits and\nunderscore.\n(Contributed by Serhiy Storchaka in\ngh-91760\n.)\nsre_compile\n,\nsre_constants\nand\nsre_parse\nmodules.\nshutil\n:\nrmtree()\n’s\nonerror\nparameter is deprecated in\nPython 3.12; use the\nonexc\nparameter instead.\nssl\noptions and protocols:\nssl.SSLContext\nwithout protocol argument is deprecated.\nssl.SSLContext\n:\nset_npn_protocols()\nand\nselected_npn_protocol()\nare deprecated: use ALPN\ninstead.\nssl.OP_NO_SSL*\noptions\nssl.OP_NO_TLS*\noptions\nssl.PROTOCOL_SSLv3\nssl.PROTOCOL_TLS\nssl.PROTOCOL_TLSv1\nssl.PROTOCOL_TLSv1_1\nssl.PROTOCOL_TLSv1_2\nssl.TLSVersion.SSLv3\nssl.TLSVersion.TLSv1\nssl.TLSVersion.TLSv1_1\nthreading\nmethods:\nthreading.Condition.notifyAll()\n: use\nnotify_all()\n.\nthreading.Event.isSet()\n: use\nis_set()\n.\nthreading.Thread.isDaemon()\n,\nthreading.Thread.setDaemon()\n:\nuse\nthreading.Thread.daemon\nattribute.\nthreading.Thread.getName()\n,\nthreading.Thread.setName()\n:\nuse\nthreading.Thread.name\nattribute.\nthreading.currentThread()\n: use\nthreading.current_thread()\n.\nthreading.activeCount()\n: use\nthreading.active_count()\n.\ntyping.Text\n(\ngh-92332\n).\nunittest.IsolatedAsyncioTestCase\n: it is deprecated to return a value\nthat is not\nNone\nfrom a test case.\nurllib.parse\ndeprecated functions:\nurlparse()\ninstead\nsplitattr()\nsplithost()\nsplitnport()\nsplitpasswd()\nsplitport()\nsplitquery()\nsplittag()\nsplittype()\nsplituser()\nsplitvalue()\nto_bytes()\nurllib.request\n:\nURLopener\nand\nFancyURLopener\nstyle of invoking requests is\ndeprecated. Use newer\nurlopen()\nfunctions and methods.\nwsgiref\n:\nSimpleHandler.stdout.write()\nshould not do partial\nwrites.\nxml.etree.ElementTree\n: Testing the truth value of an\nElement\nis deprecated. In a future release it\nwill always return\nTrue\n. Prefer explicit\nlen(elem)\nor\nelem\nis\nnot\nNone\ntests instead.\nzipimport.zipimporter.load_module()\nis deprecated:\nuse\nexec_module()\ninstead.\nCPython Bytecode Changes\n¶\nThe oparg of\nYIELD_VALUE\nis now\n1\nif the yield is part of a yield-from or await, and\n0\notherwise.\nThe oparg of\nRESUME\nwas changed to add a bit indicating\nif the except-depth is 1, which is needed to optimize closing of generators.\n(Contributed by Irit Katriel in\ngh-111354\n.)\nC API Changes\n¶\nNew Features\n¶\nAdd the\nPyMonitoring C API\nfor generating\nPEP 669\nmonitoring events:\nPyMonitoringState\nPyMonitoring_FirePyStartEvent()\nPyMonitoring_FirePyResumeEvent()\nPyMonitoring_FirePyReturnEvent()\nPyMonitoring_FirePyYieldEvent()\nPyMonitoring_FireCallEvent()\nPyMonitoring_FireLineEvent()\nPyMonitoring_FireJumpEvent()\nPyMonitoring_FireBranchEvent()\nPyMonitoring_FireCReturnEvent()\nPyMonitoring_FirePyThrowEvent()\nPyMonitoring_FireRaiseEvent()\nPyMonitoring_FireCRaiseEvent()\nPyMonitoring_FireReraiseEvent()\nPyMonitoring_FireExceptionHandledEvent()\nPyMonitoring_FirePyUnwindEvent()\nPyMonitoring_FireStopIterationEvent()\nPyMonitoring_EnterScope()\nPyMonitoring_ExitScope()\n(Contributed by Irit Katriel in\ngh-111997\n).\nAdd\nPyMutex\n, a lightweight mutex that occupies a single byte,\nand the new\nPyMutex_Lock()\nand\nPyMutex_Unlock()\nfunctions.\nPyMutex_Lock()\nwill release the\nGIL\n(if currently held)\nif the operation needs to block.\n(Contributed by Sam Gross in\ngh-108724\n.)\nAdd the\nPyTime C API\nto provide access to system clocks:\nPyTime_t\n.\nPyTime_MIN\nand\nPyTime_MAX\n.\nPyTime_AsSecondsDouble()\n.\nPyTime_Monotonic()\n.\nPyTime_MonotonicRaw()\n.\nPyTime_PerfCounter()\n.\nPyTime_PerfCounterRaw()\n.\nPyTime_Time()\n.\nPyTime_TimeRaw()\n.\n(Contributed by Victor Stinner and Petr Viktorin in\ngh-110850\n.)\nAdd the\nPyDict_ContainsString()\nfunction\nwith the same behavior as\nPyDict_Contains()\n,\nbut\nkey\nis specified as a\nconst\nchar\n*\nUTF-8 encoded bytes string,\nrather than a\nPyObject\n*\n.\n(Contributed by Victor Stinner in\ngh-108314\n.)\nAdd the\nPyDict_GetItemRef()\nand\nPyDict_GetItemStringRef()\nfunctions,\nwhich behave similarly to\nPyDict_GetItemWithError()\n,\nbut return a\nstrong reference\ninstead of a\nborrowed reference\n.\nMoreover, these functions return\n-1\non error,\nremoving the need to check\nPyErr_Occurred()\n.\n(Contributed by Victor Stinner in\ngh-106004\n.)\nAdd the\nPyDict_SetDefaultRef()\nfunction,\nwhich behaves similarly to\nPyDict_SetDefault()\n,\nbut returns a\nstrong reference\ninstead of a\nborrowed reference\n.\nThis function returns\n-1\non error,\n0\non insertion,\nand\n1\nif the key was already present in the dictionary.\n(Contributed by Sam Gross in\ngh-112066\n.)\nAdd the\nPyDict_Pop()\nand\nPyDict_PopString()\nfunctions\nto remove a key from a dictionary and optionally return the removed value.\nThis is similar to\ndict.pop()\n,\nthough there is no default value,\nand\nKeyError\nis not raised for missing keys.\n(Contributed by Stefan Behnel and Victor Stinner in\ngh-111262\n.)\nAdd the\nPyMapping_GetOptionalItem()\nand\nPyMapping_GetOptionalItemString()\nfunctions\nas alternatives to\nPyObject_GetItem()\nand\nPyMapping_GetItemString()\nrespectively.\nThe new functions do not raise\nKeyError\nif the requested key is missing from the mapping.\nThese variants are more convenient and faster\nif a missing key should not be treated as a failure.\n(Contributed by Serhiy Storchaka in\ngh-106307\n.)\nAdd the\nPyObject_GetOptionalAttr()\nand\nPyObject_GetOptionalAttrString()\nfunctions\nas alternatives to\nPyObject_GetAttr()\nand\nPyObject_GetAttrString()\nrespectively.\nThe new functions do not raise\nAttributeError\nif the requested attribute is not found on the object.\nThese variants are more convenient and faster\nif the missing attribute should not be treated as a failure.\n(Contributed by Serhiy Storchaka in\ngh-106521\n.)\nAdd the\nPyErr_FormatUnraisable()\nfunction\nas an extension to\nPyErr_WriteUnraisable()\nthat allows customizing the warning message.\n(Contributed by Serhiy Storchaka in\ngh-108082\n.)\nAdd new functions that return a\nstrong reference\ninstead of\na\nborrowed reference\nfor frame locals, globals, and builtins,\nas part of\nPEP 667\n:\nPyEval_GetFrameBuiltins()\nreplaces\nPyEval_GetBuiltins()\nPyEval_GetFrameGlobals()\nreplaces\nPyEval_GetGlobals()\nPyEval_GetFrameLocals()\nreplaces\nPyEval_GetLocals()\n(Contributed by Mark Shannon and Tian Gao in\ngh-74929\n.)\nAdd the\nPy_GetConstant()\nand\nPy_GetConstantBorrowed()\nfunctions to get\nstrong\nor\nborrowed\nreferences to constants.\nFor example,\nPy_GetConstant(Py_CONSTANT_ZERO)\nreturns a strong reference\nto the constant zero.\n(Contributed by Victor  Stinner in\ngh-115754\n.)\nAdd the\nPyImport_AddModuleRef()\nfunction\nas a replacement for\nPyImport_AddModule()\nthat returns a\nstrong reference\ninstead of a\nborrowed reference\n.\n(Contributed by Victor Stinner in\ngh-105922\n.)\nAdd the\nPy_IsFinalizing()\nfunction to check\nwhether the main Python interpreter is\nshutting down\n.\n(Contributed by Victor Stinner in\ngh-108014\n.)\nAdd the\nPyList_GetItemRef()\nfunction\nas a replacement for\nPyList_GetItem()\nthat returns a\nstrong reference\ninstead of a\nborrowed reference\n.\n(Contributed by Sam Gross in\ngh-114329\n.)\nAdd the\nPyList_Extend()\nand\nPyList_Clear()\nfunctions,\nmirroring the Python\nlist.extend()\nand\nlist.clear()\nmethods.\n(Contributed by Victor Stinner in\ngh-111138\n.)\nAdd the\nPyLong_AsInt()\nfunction.\nIt behaves similarly to\nPyLong_AsLong()\n,\nbut stores the result in a C\nint\ninstead of a C\nlong\n.\n(Contributed by Victor Stinner in\ngh-108014\n.)\nAdd the\nPyLong_AsNativeBytes()\n,\nPyLong_FromNativeBytes()\n,\nand\nPyLong_FromUnsignedNativeBytes()\nfunctions\nto simplify converting between native integer types\nand Python\nint\nobjects.\n(Contributed by Steve Dower in\ngh-111140\n.)\nAdd\nPyModule_Add()\nfunction, which is similar to\nPyModule_AddObjectRef()\nand\nPyModule_AddObject()\n,\nbut always steals a reference to the value.\n(Contributed by Serhiy Storchaka in\ngh-86493\n.)\nAdd the\nPyObject_GenericHash()\nfunction\nthat implements the default hashing function of a Python object.\n(Contributed by Serhiy Storchaka in\ngh-113024\n.)\nAdd the\nPy_HashPointer()\nfunction to hash a raw pointer.\n(Contributed by Victor Stinner in\ngh-111545\n.)\nAdd the\nPyObject_VisitManagedDict()\nand\nPyObject_ClearManagedDict()\nfunctions.\nwhich must be called by the traverse and clear functions of a type using\nthe\nPy_TPFLAGS_MANAGED_DICT\nflag.\nThe\npythoncapi-compat project\ncan be used to\nuse these functions with Python 3.11 and 3.12.\n(Contributed by Victor Stinner in\ngh-107073\n.)\nAdd the\nPyRefTracer_SetTracer()\nand\nPyRefTracer_GetTracer()\nfunctions,\nwhich enable tracking object creation and destruction\nin the same way that the\ntracemalloc\nmodule does.\n(Contributed by Pablo Galindo in\ngh-93502\n.)\nAdd the\nPySys_AuditTuple()\nfunction\nas an alternative to\nPySys_Audit()\nthat takes event arguments as a Python\ntuple\nobject.\n(Contributed by Victor Stinner in\ngh-85283\n.)\nAdd the\nPyThreadState_GetUnchecked()\nfunction\nas an alternative to\nPyThreadState_Get()\nthat doesn’t kill the process with a fatal error if it is\nNULL\n.\nThe caller is responsible for checking if the result is\nNULL\n.\n(Contributed by Victor Stinner in\ngh-108867\n.)\nAdd the\nPyType_GetFullyQualifiedName()\nfunction\nto get the type’s fully qualified name.\nThe module name is prepended if\ntype.__module__\nis\na string and is not equal to either\n'builtins'\nor\n'__main__'\n.\n(Contributed by Victor Stinner in\ngh-111696\n.)\nAdd the\nPyType_GetModuleName()\nfunction\nto get the type’s module name. This is equivalent to getting the\ntype.__module__\nattribute.\n(Contributed by Eric Snow and Victor Stinner in\ngh-111696\n.)\nAdd the\nPyUnicode_EqualToUTF8AndSize()\nand\nPyUnicode_EqualToUTF8()\nfunctions\nto compare a Unicode object with a\nconst\nchar\n*\nUTF-8 encoded string\nand\n1\nif they are equal or\n0\notherwise.\nThese functions do not raise exceptions.\n(Contributed by Serhiy Storchaka in\ngh-110289\n.)\nAdd the\nPyWeakref_GetRef()\nfunction\nas an alternative to\nPyWeakref_GetObject()\nthat returns a\nstrong reference\nor\nNULL\nif the referent is no longer live.\n(Contributed by Victor Stinner in\ngh-105927\n.)\nAdd fixed variants of functions which silently ignore errors:\nPyObject_HasAttrWithError()\nreplaces\nPyObject_HasAttr()\n.\nPyObject_HasAttrStringWithError()\nreplaces\nPyObject_HasAttrString()\n.\nPyMapping_HasKeyWithError()\nreplaces\nPyMapping_HasKey()\n.\nPyMapping_HasKeyStringWithError()\nreplaces\nPyMapping_HasKeyString()\n.\nThe new functions return\n-1\nfor errors\nand the standard\n1\nfor true and\n0\nfor false.\n(Contributed by Serhiy Storchaka in\ngh-108511\n.)\nChanged C APIs\n¶\nThe\nkeywords\nparameter of\nPyArg_ParseTupleAndKeywords()\nand\nPyArg_VaParseTupleAndKeywords()\nnow has type\nchar\n*\nconst\n*\nin C\nand\nconst\nchar\n*\nconst\n*\nin C++,\ninstead of\nchar\n*\n*\n.\nIn C++, this makes these functions compatible with arguments\nof type\nconst\nchar\n*\nconst\n*\n,\nconst\nchar\n*\n*\n,\nor\nchar\n*\nconst\n*\nwithout an explicit type cast.\nIn C, the functions only support arguments of type\nchar\n*\nconst\n*\n.\nThis can be overridden with the\nPY_CXX_CONST\nmacro.\n(Contributed by Serhiy Storchaka in\ngh-65210\n.)\nPyArg_ParseTupleAndKeywords()\nnow supports\nnon-ASCII keyword parameter names.\n(Contributed by Serhiy Storchaka in\ngh-110815\n.)\nThe\nPyCode_GetFirstFree()\nfunction is now unstable API\nand is now named\nPyUnstable_Code_GetFirstFree()\n.\n(Contributed by Bogdan Romanyuk in\ngh-115781\n.)\nThe\nPyDict_GetItem()\n,\nPyDict_GetItemString()\n,\nPyMapping_HasKey()\n,\nPyMapping_HasKeyString()\n,\nPyObject_HasAttr()\n,\nPyObject_HasAttrString()\n,\nand\nPySys_GetObject()\nfunctions,\neach of which clears all errors which occurred when calling them\nnow reports these errors using\nsys.unraisablehook()\n.\nYou may replace them with other functions as recommended in the documentation.\n(Contributed by Serhiy Storchaka in\ngh-106672\n.)\nAdd support for the\n%T\n,\n%#T\n,\n%N\nand\n%#N\nformats\nto\nPyUnicode_FromFormat()\n:\n%T\n: Get the fully qualified name of an object type\n%#T\n: As above, but use a colon as the separator\n%N\n: Get the fully qualified name of a type\n%#N\n: As above, but use a colon as the separator\nSee\nPEP 737\nfor more information.\n(Contributed by Victor Stinner in\ngh-111696\n.)\nYou no longer have to define the\nPY_SSIZE_T_CLEAN\nmacro before\nincluding\nPython.h\nwhen using\n#\nformats in\nformat codes\n.\nAPIs accepting the format codes always use\nPy_ssize_t\nfor\n#\nformats.\n(Contributed by Inada Naoki in\ngh-104922\n.)\nIf Python is built in\ndebug mode\nor\nwith\nassertions\n,\nPyTuple_SET_ITEM()\nand\nPyList_SET_ITEM()\nnow check the index argument with an assertion.\n(Contributed by Victor Stinner in\ngh-106168\n.)\nLimited C API Changes\n¶\nThe following functions are now included in the Limited C API:\nPyMem_RawMalloc()\nPyMem_RawCalloc()\nPyMem_RawRealloc()\nPyMem_RawFree()\nPySys_Audit()\nPySys_AuditTuple()\nPyType_GetModuleByDef()\n(Contributed by Victor Stinner in\ngh-85283\n,\ngh-85283\n, and\ngh-116936\n.)\nPython built with\n--with-trace-refs\n(tracing references)\nnow supports the\nLimited API\n.\n(Contributed by Victor Stinner in\ngh-108634\n.)\nRemoved C APIs\n¶\nRemove several functions, macros, variables, etc\nwith names prefixed by\n_Py\nor\n_PY\n(which are considered private).\nIf your project is affected  by one of these removals\nand you believe that the removed API should remain available,\nplease\nopen a new issue\nto request a public C API\nand add\ncc:\n@vstinner\nto the issue to notify Victor Stinner.\n(Contributed by Victor Stinner in\ngh-106320\n.)\nRemove old buffer protocols deprecated in Python 3.0.\nUse\nBuffer Protocol\ninstead.\nPyObject_CheckReadBuffer()\n:\nUse\nPyObject_CheckBuffer()\nto test\nwhether the object supports the buffer protocol.\nNote that\nPyObject_CheckBuffer()\ndoesn’t guarantee\nthat\nPyObject_GetBuffer()\nwill succeed.\nTo test if the object is actually readable,\nsee the next example of\nPyObject_GetBuffer()\n.\nPyObject_AsCharBuffer()\n,\nPyObject_AsReadBuffer()\n:\nUse\nPyObject_GetBuffer()\nand\nPyBuffer_Release()\ninstead:\nPy_buffer\nview\n;\nif\n(\nPyObject_GetBuffer\n(\nobj\n,\n&\nview\n,\nPyBUF_SIMPLE\n)\n<\n0\n)\n{\nreturn\nNULL\n;\n}\n// Use `view.buf` and `view.len` to read from the buffer.\n// You may need to cast buf as `(const char*)view.buf`.\nPyBuffer_Release\n(\n&\nview\n);\nPyObject_AsWriteBuffer()\n:\nUse\nPyObject_GetBuffer()\nand\nPyBuffer_Release()\ninstead:\nPy_buffer\nview\n;\nif\n(\nPyObject_GetBuffer\n(\nobj\n,\n&\nview\n,\nPyBUF_WRITABLE\n)\n<\n0\n)\n{\nreturn\nNULL\n;\n}\n// Use `view.buf` and `view.len` to write to the buffer.\nPyBuffer_Release\n(\n&\nview\n);\n(Contributed by Inada Naoki in\ngh-85275\n.)\nRemove various functions deprecated in Python 3.9:\nPyEval_CallObject()\n,\nPyEval_CallObjectWithKeywords()\n:\nUse\nPyObject_CallNoArgs()\nor\nPyObject_Call()\ninstead.\nWarning\nIn\nPyObject_Call()\n, positional arguments must be a\ntuple\nand must not be\nNULL\n,\nand keyword arguments must be a\ndict\nor\nNULL\n,\nwhereas the removed functions checked argument types\nand accepted\nNULL\npositional and keyword arguments.\nTo replace\nPyEval_CallObjectWithKeywords(func,\nNULL,\nkwargs)\nwith\nPyObject_Call()\n,\npass an empty tuple as positional arguments using\nPyTuple_New(0)\n.\nPyEval_CallFunction()\n:\nUse\nPyObject_CallFunction()\ninstead.\nPyEval_CallMethod()\n:\nUse\nPyObject_CallMethod()\ninstead.\nPyCFunction_Call()\n:\nUse\nPyObject_Call()\ninstead.\n(Contributed by Victor Stinner in\ngh-105107\n.)\nRemove the following old functions to configure the Python initialization,\ndeprecated in Python 3.11:\nPySys_AddWarnOptionUnicode()\n:\nUse\nPyConfig.warnoptions\ninstead.\nPySys_AddWarnOption()\n:\nUse\nPyConfig.warnoptions\ninstead.\nPySys_AddXOption()\n:\nUse\nPyConfig.xoptions\ninstead.\nPySys_HasWarnOptions()\n:\nUse\nPyConfig.xoptions\ninstead.\nPySys_SetPath()\n:\nSet\nPyConfig.module_search_paths\ninstead.\nPy_SetPath()\n:\nSet\nPyConfig.module_search_paths\ninstead.\nPy_SetStandardStreamEncoding()\n:\nSet\nPyConfig.stdio_encoding\ninstead,\nand set also maybe\nPyConfig.legacy_windows_stdio\n(on Windows).\n_Py_SetProgramFullPath()\n:\nSet\nPyConfig.executable\ninstead.\nUse the new\nPyConfig\nAPI of the\nPython Initialization\nConfiguration\ninstead (\nPEP 587\n), added to Python 3.8.\n(Contributed by Victor Stinner in\ngh-105145\n.)\nRemove\nPyEval_AcquireLock()\nand\nPyEval_ReleaseLock()\nfunctions,\ndeprecated in Python 3.2.\nThey didn’t update the current thread state.\nThey can be replaced with:\nPyEval_SaveThread()\nand\nPyEval_RestoreThread()\n;\nlow-level\nPyEval_AcquireThread()\nand\nPyEval_RestoreThread()\n;\nor\nPyGILState_Ensure()\nand\nPyGILState_Release()\n.\n(Contributed by Victor Stinner in\ngh-105182\n.)\nRemove the\nPyEval_ThreadsInitialized()\nfunction,\ndeprecated in Python 3.9.\nSince Python 3.7,\nPy_Initialize()\nalways creates the GIL:\ncalling\nPyEval_InitThreads()\ndoes nothing and\nPyEval_ThreadsInitialized()\nalways returns non-zero.\n(Contributed by Victor Stinner in\ngh-105182\n.)\nRemove the\n_PyInterpreterState_Get()\nalias to\nPyInterpreterState_Get()\nwhich was kept for backward compatibility with Python 3.8.\nThe\npythoncapi-compat project\ncan be used to get\nPyInterpreterState_Get()\non Python 3.8 and older.\n(Contributed by Victor Stinner in\ngh-106320\n.)\nRemove the private\n_PyObject_FastCall()\nfunction:\nuse\nPyObject_Vectorcall()\nwhich is available since Python 3.8\n(\nPEP 590\n).\n(Contributed by Victor Stinner in\ngh-106023\n.)\nRemove the\ncpython/pytime.h\nheader file,\nwhich only contained private functions.\n(Contributed by Victor Stinner in\ngh-106316\n.)\nRemove the undocumented\nPY_TIMEOUT_MAX\nconstant from the limited C API.\n(Contributed by Victor Stinner in\ngh-110014\n.)\nRemove the old trashcan macros\nPy_TRASHCAN_SAFE_BEGIN\nand\nPy_TRASHCAN_SAFE_END\n.\nReplace both with the new macros\nPy_TRASHCAN_BEGIN\nand\nPy_TRASHCAN_END\n.\n(Contributed by Irit Katriel in\ngh-105111\n.)\nDeprecated C APIs\n¶\nDeprecate old Python initialization functions:\nPySys_ResetWarnOptions()\n:\nClear\nsys.warnoptions\nand\nwarnings.filters\ninstead.\nPy_GetExecPrefix()\n:\nGet\nsys.exec_prefix\ninstead.\nPy_GetPath()\n:\nGet\nsys.path\ninstead.\nPy_GetPrefix()\n:\nGet\nsys.prefix\ninstead.\nPy_GetProgramFullPath()\n:\nGet\nsys.executable\ninstead.\nPy_GetProgramName()\n:\nGet\nsys.executable\ninstead.\nPy_GetPythonHome()\n:\nGet\nPyConfig.home\nor the\nPYTHONHOME\nenvironment variable instead.\n(Contributed by Victor Stinner in\ngh-105145\n.)\nSoft deprecate\nthe\nPyEval_GetBuiltins()\n,\nPyEval_GetGlobals()\n,\nand\nPyEval_GetLocals()\nfunctions,\nwhich return a\nborrowed reference\n.\n(Soft deprecated as part of\nPEP 667\n.)\nDeprecate the\nPyImport_ImportModuleNoBlock()\nfunction,\nwhich is just an alias to\nPyImport_ImportModule()\nsince Python 3.3.\n(Contributed by Victor Stinner in\ngh-105396\n.)\nSoft deprecate\nthe\nPyModule_AddObject()\nfunction.\nIt should be replaced with\nPyModule_Add()\nor\nPyModule_AddObjectRef()\n.\n(Contributed by Serhiy Storchaka in\ngh-86493\n.)\nDeprecate the old\nPy_UNICODE\nand\nPY_UNICODE_TYPE\ntypes\nand the\nPy_UNICODE_WIDE\ndefine.\nUse the\nwchar_t\ntype directly instead.\nSince Python 3.3,\nPy_UNICODE\nand\nPY_UNICODE_TYPE\nare just aliases to\nwchar_t\n.\n(Contributed by Victor Stinner in\ngh-105156\n.)\nDeprecate the\nPyWeakref_GetObject()\nand\nPyWeakref_GET_OBJECT()\nfunctions,\nwhich return a\nborrowed reference\n.\nReplace them with the new\nPyWeakref_GetRef()\nfunction,\nwhich returns a\nstrong reference\n.\nThe\npythoncapi-compat project\ncan be used to get\nPyWeakref_GetRef()\non Python 3.12 and older.\n(Contributed by Victor Stinner in\ngh-105927\n.)\nPending Removal in Python 3.14\n¶\nThe\nma_version_tag\nfield in\nPyDictObject\nfor extension modules\n(\nPEP 699\n;\ngh-101193\n).\nCreating\nimmutable\ntypes\nwith mutable\nbases (\ngh-95388\n).\nFunctions to configure Python’s initialization, deprecated in Python 3.11:\nPySys_SetArgvEx()\n:\nSet\nPyConfig.argv\ninstead.\nPySys_SetArgv()\n:\nSet\nPyConfig.argv\ninstead.\nPy_SetProgramName()\n:\nSet\nPyConfig.program_name\ninstead.\nPy_SetPythonHome()\n:\nSet\nPyConfig.home\ninstead.\nThe\nPy_InitializeFromConfig()\nAPI should be used with\nPyConfig\ninstead.\nGlobal configuration variables:\nPy_DebugFlag\n:\nUse\nPyConfig.parser_debug\ninstead.\nPy_VerboseFlag\n:\nUse\nPyConfig.verbose\ninstead.\nPy_QuietFlag\n:\nUse\nPyConfig.quiet\ninstead.\nPy_InteractiveFlag\n:\nUse\nPyConfig.interactive\ninstead.\nPy_InspectFlag\n:\nUse\nPyConfig.inspect\ninstead.\nPy_OptimizeFlag\n:\nUse\nPyConfig.optimization_level\ninstead.\nPy_NoSiteFlag\n:\nUse\nPyConfig.site_import\ninstead.\nPy_BytesWarningFlag\n:\nUse\nPyConfig.bytes_warning\ninstead.\nPy_FrozenFlag\n:\nUse\nPyConfig.pathconfig_warnings\ninstead.\nPy_IgnoreEnvironmentFlag\n:\nUse\nPyConfig.use_environment\ninstead.\nPy_DontWriteBytecodeFlag\n:\nUse\nPyConfig.write_bytecode\ninstead.\nPy_NoUserSiteDirectory\n:\nUse\nPyConfig.user_site_directory\ninstead.\nPy_UnbufferedStdioFlag\n:\nUse\nPyConfig.buffered_stdio\ninstead.\nPy_HashRandomizationFlag\n:\nUse\nPyConfig.use_hash_seed\nand\nPyConfig.hash_seed\ninstead.\nPy_IsolatedFlag\n:\nUse\nPyConfig.isolated\ninstead.\nPy_LegacyWindowsFSEncodingFlag\n:\nUse\nPyPreConfig.legacy_windows_fs_encoding\ninstead.\nPy_LegacyWindowsStdioFlag\n:\nUse\nPyConfig.legacy_windows_stdio\ninstead.\nPy_FileSystemDefaultEncoding\n:\nUse\nPyConfig.filesystem_encoding\ninstead.\nPy_HasFileSystemDefaultEncoding\n:\nUse\nPyConfig.filesystem_encoding\ninstead.\nPy_FileSystemDefaultEncodeErrors\n:\nUse\nPyConfig.filesystem_errors\ninstead.\nPy_UTF8Mode\n:\nUse\nPyPreConfig.utf8_mode\ninstead.\n(see\nPy_PreInitialize()\n)\nThe\nPy_InitializeFromConfig()\nAPI should be used with\nPyConfig\ninstead.\nPending Removal in Python 3.15\n¶\nThe bundled copy of\nlibmpdecimal\n.\nThe\nPyImport_ImportModuleNoBlock()\n:\nUse\nPyImport_ImportModule()\ninstead.\nPyWeakref_GetObject()\nand\nPyWeakref_GET_OBJECT()\n:\nUse\nPyWeakref_GetRef()\ninstead.\nPy_UNICODE\ntype and the\nPy_UNICODE_WIDE\nmacro:\nUse\nwchar_t\ninstead.\nPython initialization functions:\nPySys_ResetWarnOptions()\n:\nClear\nsys.warnoptions\nand\nwarnings.filters\ninstead.\nPy_GetExecPrefix()\n:\nGet\nsys.base_exec_prefix\nand\nsys.exec_prefix\ninstead.\nPy_GetPath()\n:\nGet\nsys.path\ninstead.\nPy_GetPrefix()\n:\nGet\nsys.base_prefix\nand\nsys.prefix\ninstead.\nPy_GetProgramFullPath()\n:\nGet\nsys.executable\ninstead.\nPy_GetProgramName()\n:\nGet\nsys.executable\ninstead.\nPy_GetPythonHome()\n:\nGet\nPyConfig.home\nor the\nPYTHONHOME\nenvironment variable instead.\nPending Removal in Future Versions\n¶\nThe following APIs are deprecated and will be removed,\nalthough there is currently no date scheduled for their removal.\nPy_TPFLAGS_HAVE_FINALIZE\n:\nUnneeded since Python 3.8.\nPyErr_Fetch()\n:\nUse\nPyErr_GetRaisedException()\ninstead.\nPyErr_NormalizeException()\n:\nUse\nPyErr_GetRaisedException()\ninstead.\nPyErr_Restore()\n:\nUse\nPyErr_SetRaisedException()\ninstead.\nPyModule_GetFilename()\n:\nUse\nPyModule_GetFilenameObject()\ninstead.\nPyOS_AfterFork()\n:\nUse\nPyOS_AfterFork_Child()\ninstead.\nPySlice_GetIndicesEx()\n:\nUse\nPySlice_Unpack()\nand\nPySlice_AdjustIndices()\ninstead.\nPyUnicode_AsDecodedObject()\n:\nUse\nPyCodec_Decode()\ninstead.\nPyUnicode_AsDecodedUnicode()\n:\nUse\nPyCodec_Decode()\ninstead.\nPyUnicode_AsEncodedObject()\n:\nUse\nPyCodec_Encode()\ninstead.\nPyUnicode_AsEncodedUnicode()\n:\nUse\nPyCodec_Encode()\ninstead.\nPyUnicode_READY()\n:\nUnneeded since Python 3.12\nPyErr_Display()\n:\nUse\nPyErr_DisplayException()\ninstead.\n_PyErr_ChainExceptions()\n:\nUse\n_PyErr_ChainExceptions1()\ninstead.\nPyBytesObject.ob_shash\nmember:\ncall\nPyObject_Hash()\ninstead.\nPyDictObject.ma_version_tag\nmember.\nThread Local Storage (TLS) API:\nPyThread_create_key()\n:\nUse\nPyThread_tss_alloc()\ninstead.\nPyThread_delete_key()\n:\nUse\nPyThread_tss_free()\ninstead.\nPyThread_set_key_value()\n:\nUse\nPyThread_tss_set()\ninstead.\nPyThread_get_key_value()\n:\nUse\nPyThread_tss_get()\ninstead.\nPyThread_delete_key_value()\n:\nUse\nPyThread_tss_delete()\ninstead.\nPyThread_ReInitTLS()\n:\nUnneeded since Python 3.7.\nBuild Changes\n¶\narm64-apple-ios\nand\narm64-apple-ios-simulator\nare both\nnow\nPEP 11\ntier 3 platforms.\n(\nPEP 730\nwritten\nand implementation contributed by Russell Keith-Magee in\ngh-114099\n.)\naarch64-linux-android\nand\nx86_64-linux-android\nare both\nnow\nPEP 11\ntier 3 platforms.\n(\nPEP 738\nwritten\nand implementation contributed by Malcolm Smith in\ngh-116622\n.)\nwasm32-wasi\nis now a\nPEP 11\ntier 2 platform.\n(Contributed by Brett Cannon in\ngh-115192\n.)\nwasm32-emscripten\nis no longer a\nPEP 11\nsupported platform.\n(Contributed by Brett Cannon in\ngh-115192\n.)\nBuilding CPython now requires a compiler with support for the C11 atomic\nlibrary, GCC built-in atomic functions, or MSVC interlocked intrinsics.\nAutoconf 2.71 and aclocal 1.16.5 are now required to regenerate\nthe\nconfigure\nscript.\n(Contributed by Christian Heimes in\ngh-89886\nand by Victor Stinner in\ngh-112090\n.)\nSQLite 3.15.2 or newer is required to build\nthe\nsqlite3\nextension module.\n(Contributed by Erlend Aasland in\ngh-105875\n.)\nCPython now bundles the\nmimalloc library\nby default.\nIt is licensed under the MIT license;\nsee\nmimalloc license\n.\nThe bundled mimalloc has custom changes, see\ngh-113141\nfor details.\n(Contributed by Dino Viehland in\ngh-109914\n.)\nThe\nconfigure\noption\n--with-system-libmpdec\nnow defaults to\nyes\n.\nThe bundled copy of\nlibmpdecimal\nwill be removed in Python 3.15.\nPython built with\nconfigure\n--with-trace-refs\n(tracing references) is now ABI compatible with the Python release build\nand\ndebug build\n.\n(Contributed by Victor Stinner in\ngh-108634\n.)\nOn POSIX systems, the pkg-config (\n.pc\n) filenames now include the ABI\nflags.  For example, the free-threaded build generates\npython-3.13t.pc\nand the debug build generates\npython-3.13d.pc\n.\nThe\nerrno\n,\nfcntl\n,\ngrp\n,\nmd5\n,\npwd\n,\nresource\n,\ntermios\n,\nwinsound\n,\n_ctypes_test\n,\n_multiprocessing.posixshmem\n,\n_scproxy\n,\n_stat\n,\n_statistics\n,\n_testconsole\n,\n_testimportmultiple\nand\n_uuid\nC extensions are now built with the\nlimited C API\n.\n(Contributed by Victor Stinner in\ngh-85283\n.)\nPorting to Python 3.13\n¶\nThis section lists previously described changes and other bugfixes\nthat may require changes to your code.\nChanges in the Python API\n¶\nPEP 667\nintroduces several changes\nto the semantics of\nlocals()\nand\nf_locals\n:\nCalling\nlocals()\nin an\noptimized scope\nnow produces an\nindependent snapshot on each call, and hence no longer implicitly updates\npreviously returned references. Obtaining the legacy CPython behavior now\nrequires explicit calls to update the initially returned dictionary with the\nresults of subsequent calls to\nlocals()\n. Code execution functions that\nimplicitly target\nlocals()\n(such as\nexec\nand\neval\n) must be\npassed an explicit namespace to access their results in an optimized scope.\n(Changed as part of\nPEP 667\n.)\nCalling\nlocals()\nfrom a comprehension at module or class scope\n(including via\nexec\nor\neval\n) once more behaves as if the comprehension\nwere running as an independent nested function (i.e. the local variables from\nthe containing scope are not included). In Python 3.12, this had changed\nto include the local variables from the containing scope when implementing\nPEP 709\n. (Changed as part of\nPEP 667\n.)\nAccessing\nFrameType.f_locals\nin an\noptimized scope\nnow returns a write-through proxy rather than a\nsnapshot that gets updated at ill-specified times. If a snapshot is desired,\nit must be created explicitly with\ndict\nor the proxy’s\n.copy()\nmethod.\n(Changed as part of\nPEP 667\n.)\nfunctools.partial\nnow emits a\nFutureWarning\nwhen used as a method.\nThe behavior will change in future Python versions.\nWrap it in\nstaticmethod()\nif you want to preserve the old behavior.\n(Contributed by Serhiy Storchaka in\ngh-121027\n.)\nAn\nOSError\nis now raised by\ngetpass.getuser()\nfor any failure to retrieve a username,\ninstead of\nImportError\non non-Unix platforms\nor\nKeyError\non Unix platforms where the password database is empty.\nThe value of the\nmode\nattribute of\ngzip.GzipFile\nis now a string (\n'rb'\nor\n'wb'\n) instead of an integer (\n1\nor\n2\n).\nThe value of the\nmode\nattribute of the readable file-like object\nreturned by\nzipfile.ZipFile.open()\nis now\n'rb'\ninstead of\n'r'\n.\n(Contributed by Serhiy Storchaka in\ngh-115961\n.)\nmailbox.Maildir\nnow ignores files with a leading dot (\n.\n).\n(Contributed by Zackery Spytz in\ngh-65559\n.)\npathlib.Path.glob()\nand\nrglob()\nnow return both\nfiles and directories if a pattern that ends with “\n**\n” is given,\nrather than directories only.\nAdd a trailing slash to keep the previous behavior and only match directories.\nThe\nthreading\nmodule now expects the\n_thread\nmodule\nto have an\n_is_main_interpreter()\nfunction.\nThis function takes no arguments and returns\nTrue\nif the current interpreter is the main interpreter.\nAny library or application that provides a custom\n_thread\nmodule\nmust provide\n_is_main_interpreter()\n,\njust like the module’s other “private” attributes.\n(\ngh-112826\n.)\nChanges in the C API\n¶\nPython.h\nno longer includes the\n<ieeefp.h>\nstandard header. It was\nincluded for the\nfinite()\nfunction which is now provided by the\n<math.h>\nheader. It should now be included explicitly if needed. Remove\nalso the\nHAVE_IEEEFP_H\nmacro.\n(Contributed by Victor Stinner in\ngh-108765\n.)\nPython.h\nno longer includes these standard header files:\n<time.h>\n,\n<sys/select.h>\nand\n<sys/time.h>\n. If needed, they should now be\nincluded explicitly. For example,\n<time.h>\nprovides the\nclock()\nand\ngmtime()\nfunctions,\n<sys/select.h>\nprovides the\nselect()\nfunction, and\n<sys/time.h>\nprovides the\nfutimes()\n,\ngettimeofday()\nand\nsetitimer()\nfunctions.\n(Contributed by Victor Stinner in\ngh-108765\n.)\nOn Windows,\nPython.h\nno longer includes the\n<stddef.h>\nstandard\nheader file. If needed, it should now be included explicitly. For example, it\nprovides\noffsetof()\nfunction, and\nsize_t\nand\nptrdiff_t\ntypes.\nIncluding\n<stddef.h>\nexplicitly was already needed by all other\nplatforms, the\nHAVE_STDDEF_H\nmacro is only defined on Windows.\n(Contributed by Victor Stinner in\ngh-108765\n.)\nIf the\nPy_LIMITED_API\nmacro is defined,\nPy_BUILD_CORE\n,\nPy_BUILD_CORE_BUILTIN\nand\nPy_BUILD_CORE_MODULE\nmacros\nare now undefined by\n<Python.h>\n.\n(Contributed by Victor Stinner in\ngh-85283\n.)\nThe old trashcan macros\nPy_TRASHCAN_SAFE_BEGIN\nand\nPy_TRASHCAN_SAFE_END\nwere removed. They should be replaced by the new macros\nPy_TRASHCAN_BEGIN\nand\nPy_TRASHCAN_END\n.\nA\ntp_dealloc\nfunction that has the old macros, such as:\nstatic\nvoid\nmytype_dealloc\n(\nmytype\n*\np\n)\n{\nPyObject_GC_UnTrack\n(\np\n);\nPy_TRASHCAN_SAFE_BEGIN\n(\np\n);\n...\nPy_TRASHCAN_SAFE_END\n}\nshould migrate to the new macros as follows:\nstatic\nvoid\nmytype_dealloc\n(\nmytype\n*\np\n)\n{\nPyObject_GC_UnTrack\n(\np\n);\nPy_TRASHCAN_BEGIN\n(\np\n,\nmytype_dealloc\n)\n...\nPy_TRASHCAN_END\n}\nNote that\nPy_TRASHCAN_BEGIN\nhas a second argument which\nshould be the deallocation function it is in. The new macros were\nadded in Python 3.8 and the old macros were deprecated in Python 3.11.\n(Contributed by Irit Katriel in\ngh-105111\n.)\nPEP 667\nintroduces several changes\nto frame-related functions:\nThe effects of mutating the dictionary returned from\nPyEval_GetLocals()\nin an\noptimized scope\nhave changed.\nNew dict entries added this way will now\nonly\nbe visible to\nsubsequent\nPyEval_GetLocals()\ncalls in that frame,\nas\nPyFrame_GetLocals()\n,\nlocals()\n,\nand\nFrameType.f_locals\nno longer access\nthe same underlying cached dictionary.\nChanges made to entries for actual variable names and names added via\nthe write-through proxy interfaces will be overwritten on subsequent calls\nto\nPyEval_GetLocals()\nin that frame.\nThe recommended code update depends on how the function was being used,\nso refer to the deprecation notice on the function for details.\nCalling\nPyFrame_GetLocals()\nin an\noptimized scope\nnow returns a write-through proxy rather than a snapshot\nthat gets updated at ill-specified times.\nIf a snapshot is desired, it must be created explicitly\n(e.g. with\nPyDict_Copy()\n),\nor by calling the new\nPyEval_GetFrameLocals()\nAPI.\nPyFrame_FastToLocals()\nand\nPyFrame_FastToLocalsWithError()\nno longer have any effect.\nCalling these functions has been redundant since Python 3.11,\nwhen\nPyFrame_GetLocals()\nwas first introduced.\nPyFrame_LocalsToFast()\nno longer has any effect.\nCalling this function is redundant now that\nPyFrame_GetLocals()\nreturns a write-through proxy for\noptimized scopes\n.\nPython 3.13 removed many private functions. Some of them can be replaced using these\nalternatives:\n_PyDict_Pop()\n:\nPyDict_Pop()\nor\nPyDict_PopString()\n;\n_PyDict_GetItemWithError()\n:\nPyDict_GetItemRef()\n;\n_PyErr_WriteUnraisableMsg()\n:\nPyErr_FormatUnraisable()\n;\n_PyEval_SetTrace()\n:\nPyEval_SetTrace()\nor\nPyEval_SetTraceAllThreads()\n;\n_PyList_Extend()\n:\nPyList_Extend()\n;\n_PyLong_AsInt()\n:\nPyLong_AsInt()\n;\n_PyMem_RawStrdup()\n:\nstrdup()\n;\n_PyMem_Strdup()\n:\nstrdup()\n;\n_PyObject_ClearManagedDict()\n:\nPyObject_ClearManagedDict()\n;\n_PyObject_VisitManagedDict()\n:\nPyObject_VisitManagedDict()\n;\n_PyThreadState_UncheckedGet()\n:\nPyThreadState_GetUnchecked()\n;\n_PyTime_AsSecondsDouble()\n:\nPyTime_AsSecondsDouble()\n;\n_PyTime_GetMonotonicClock()\n:\nPyTime_Monotonic()\nor\nPyTime_MonotonicRaw()\n;\n_PyTime_GetPerfCounter()\n:\nPyTime_PerfCounter()\nor\nPyTime_PerfCounterRaw()\n;\n_PyTime_GetSystemClock()\n:\nPyTime_Time()\nor\nPyTime_TimeRaw()\n;\n_PyTime_MAX\n:\nPyTime_MAX\n;\n_PyTime_MIN\n:\nPyTime_MIN\n;\n_PyTime_t\n:\nPyTime_t\n;\n_Py_HashPointer()\n:\nPy_HashPointer()\n;\n_Py_IsFinalizing()\n:\nPy_IsFinalizing()\n.\nThe\npythoncapi-compat project\ncan be used to get most of these new\nfunctions on Python 3.12 and older.\nRegression Test Changes\n¶\nPython built with\nconfigure\n--with-pydebug\nnow\nsupports a\n-X\npresite=package.module\ncommand-line\noption. If used, it specifies a module that should be imported early\nin the lifecycle of the interpreter, before\nsite.py\nis executed.\n(Contributed by Łukasz Langa in\ngh-110769\n.)\nNotable changes in 3.13.1\n¶\nsys\n¶\nThe previously undocumented special function\nsys.getobjects()\n,\nwhich only exists in specialized builds of Python, may now return objects\nfrom other interpreters than the one it’s called in.\nNotable changes in 3.13.4\n¶\nos.path\n¶\nThe\nstrict\nparameter to\nos.path.realpath()\naccepts a new value,\nos.path.ALLOW_MISSING\n.\nIf used, errors other than\nFileNotFoundError\nwill be re-raised;\nthe resulting path can be missing but it will be free of symlinks.\n(Contributed by Petr Viktorin for\nCVE 2025-4517\n.)\ntarfile\n¶\ndata_filter()\nnow normalizes symbolic link targets in order to\navoid path traversal attacks.Add commentMore actions\n(Contributed by Petr Viktorin in\ngh-127987\nand\nCVE 2025-4138\n.)\nextractall()\nnow skips fixing up directory attributes\nwhen a directory was removed or replaced by another kind of file.\n(Contributed by Petr Viktorin in\ngh-127987\nand\nCVE 2024-12718\n.)\nextract()\nand\nextractall()\nnow (re-)apply the extraction filter when substituting a link (hard or\nsymbolic) with a copy of another archive member, and when fixing up\ndirectory attributes.\nThe former raises a new exception,\nLinkFallbackError\n.\n(Contributed by Petr Viktorin for\nCVE 2025-4330\nand\nCVE 2024-12718\n.)\nextract()\nand\nextractall()\nno longer extract rejected members when\nerrorlevel()\nis zero.\n(Contributed by Matt Prodani and Petr Viktorin in\ngh-112887\nand\nCVE 2025-4435\n.)\nTable of Contents\nWhat’s New In Python 3.13\nSummary – Release Highlights\nNew Features\nA better interactive interpreter\nImproved error messages\nFree-threaded CPython\nAn experimental just-in-time (JIT) compiler\nDefined mutation semantics for\nlocals()\nSupport for mobile platforms\nOther Language Changes\nNew Modules\nImproved Modules\nargparse\narray\nast\nasyncio\nbase64\ncompileall\nconcurrent.futures\nconfigparser\ncopy\nctypes\ndbm\ndis\ndoctest\nemail\nenum\nfractions\nglob\nimportlib\nio\nipaddress\nitertools\nmarshal\nmath\nmimetypes\nmmap\nmultiprocessing\nos\nos.path\npathlib\npdb\nqueue\nrandom\nre\nshutil\nsite\nsqlite3\nssl\nstatistics\nsubprocess\nsys\ntempfile\ntime\ntkinter\ntraceback\ntypes\ntyping\nunicodedata\nvenv\nwarnings\nxml\nzipimport\nOptimizations\nRemoved Modules And APIs\nPEP 594: Remove “dead batteries” from the standard library\n2to3\nbuiltins\nconfigparser\nimportlib.metadata\nlocale\nopcode\noptparse\npathlib\nre\ntkinter.tix\nturtle\ntyping\nunittest\nurllib\nwebbrowser\nNew Deprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nCPython Bytecode Changes\nC API Changes\nNew Features\nChanged C APIs\nLimited C API Changes\nRemoved C APIs\nDeprecated C APIs\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending Removal in Future Versions\nBuild Changes\nPorting to Python 3.13\nChanges in the Python API\nChanges in the C API\nRegression Test Changes\nNotable changes in 3.13.1\nsys\nNotable changes in 3.13.4\nos.path\ntarfile\nPrevious topic\nWhat’s New in Python\nNext topic\nWhat’s New In Python 3.12\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nWhat’s New in Python\n»\nWhat’s New In Python 3.13\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [
        {
          "language": "xref",
          "code": "PYTHON_COLORS",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_COLORS</span></code>"
        },
        {
          "language": "xref",
          "code": "__static_attributes__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__static_attributes__</span></code>"
        },
        {
          "language": "xref",
          "code": "__firstlineno__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__firstlineno__</span></code>"
        },
        {
          "language": "xref",
          "code": "PythonFinalizationError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">PythonFinalizationError</span></code>"
        },
        {
          "language": "xref",
          "code": "base64.z85encode()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">base64.z85encode()</span></code>"
        },
        {
          "language": "xref",
          "code": "base64.z85decode()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">base64.z85decode()</span></code>"
        },
        {
          "language": "xref",
          "code": "copy.replace()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">copy.replace()</span></code>"
        },
        {
          "language": "xref",
          "code": "__replace__()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">__replace__()</span></code>"
        },
        {
          "language": "xref",
          "code": "dbm.sqlite3",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm.sqlite3</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.create_default_context()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ssl.create_default_context()</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.VERIFY_X509_PARTIAL_CHAIN",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">ssl.VERIFY_X509_PARTIAL_CHAIN</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.VERIFY_X509_STRICT",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">ssl.VERIFY_X509_STRICT</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.TypeVar",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.TypeVar</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.ParamSpec",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.ParamSpec</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.TypeVarTuple",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.TypeVarTuple</span></code>"
        },
        {
          "language": "xref",
          "code": "warnings.deprecated()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">warnings.deprecated()</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.ReadOnly",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.ReadOnly</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.TypedDict",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">typing.TypedDict</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.TypeIs",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.TypeIs</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.TypeGuard",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.TypeGuard</span></code>"
        },
        {
          "language": "docutils",
          "code": "wasm32-wasi",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-wasi</span></code>"
        },
        {
          "language": "docutils",
          "code": "wasm32-emscripten",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-emscripten</span></code>"
        },
        {
          "language": "xref",
          "code": "ossaudiodev",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.tix",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code>"
        },
        {
          "language": "xref",
          "code": "locale.resetlocale()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">locale.resetlocale()</span></code>"
        },
        {
          "language": "xref",
          "code": "classmethod",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">classmethod</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_BASIC_REPL",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_BASIC_REPL</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_COLORS",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_COLORS</span></code>"
        },
        {
          "language": "docutils",
          "code": "FORCE_COLOR",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">FORCE_COLOR</span></code>"
        },
        {
          "language": "",
          "code": "$ python random.pyTraceback (most recent call last):File\"/home/me/random.py\", line1, in<module>importrandomFile\"/home/me/random.py\", line3, in<module>print(random.randint(5))^^^^^^^^^^^^^^AttributeError:module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)",
          "element": "<pre><span></span><span class=\"x\">$ python random.py</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"/home/me/random.py\"</span>, line <span class=\"m\">1</span..."
        },
        {
          "language": "",
          "code": "$ python numpy.pyTraceback (most recent call last):File\"/home/me/numpy.py\", line1, in<module>importnumpyasnpFile\"/home/me/numpy.py\", line3, in<module>np.array([1,2,3])^^^^^^^^AttributeError:module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)",
          "element": "<pre><span></span><span class=\"x\">$ python numpy.py</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"/home/me/numpy.py\"</span>, line <span class=\"m\">1</span>,..."
        },
        {
          "language": "",
          "code": ">>>\"Better error messages!\".split(max_split=1)Traceback (most recent call last):File\"<python-input-0>\", line1, in<module>\"Better error messages!\".split(max_split=1)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^TypeError:split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?",
          "element": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s2\">\"Better error messages!\"</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">max_s..."
        },
        {
          "language": "docutils",
          "code": "python3.13t",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">python3.13t</span></code>"
        },
        {
          "language": "docutils",
          "code": "python3.13t.exe",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">python3.13t.exe</span></code>"
        },
        {
          "language": "xref",
          "code": "--disable-gil",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--disable-gil</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.version",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.version</span></code>"
        },
        {
          "language": "xref",
          "code": "sys._is_gil_enabled()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys._is_gil_enabled()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnstable_Module_SetGIL()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnstable_Module_SetGIL()</span></code>"
        },
        {
          "language": "xref",
          "code": "--enable-experimental-jit",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--enable-experimental-jit</span></code>"
        },
        {
          "language": "docutils",
          "code": "PCbuild/build.bat--experimental-jit",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">PCbuild/build.bat</span> <span class=\"pre\">--experimental-jit</span></code>"
        },
        {
          "language": "docutils",
          "code": "--experimental-jit-interpreter",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">--experimental-jit-interpreter</span></code>"
        },
        {
          "language": "file",
          "code": "Tools/jit/README.md",
          "element": "<code class=\"file docutils literal notranslate\"><span class=\"pre\">Tools/jit/README.md</span></code>"
        },
        {
          "language": "xref",
          "code": "--enable-experimental-jit",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--enable-experimental-jit</span></code>"
        },
        {
          "language": "xref",
          "code": "--enable-experimental-jit",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--enable-experimental-jit</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_JIT=0",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_JIT=0</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_JIT=1",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_JIT=1</span></code>"
        },
        {
          "language": "docutils",
          "code": "interpreter",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">interpreter</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_JIT=0",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_JIT=0</span></code>"
        },
        {
          "language": "docutils",
          "code": "--enable-experimental-jit=interpreter",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">--enable-experimental-jit=interpreter</span></code>"
        },
        {
          "language": "xref",
          "code": "runpy.run_path()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">runpy.run_path()</span></code>"
        },
        {
          "language": "xref",
          "code": "FrameType.f_locals",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">FrameType.f_locals</span></code>"
        },
        {
          "language": "docutils",
          "code": "arm64-apple-ios",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">arm64-apple-ios</span></code>"
        },
        {
          "language": "docutils",
          "code": "arm64-apple-ios-simulator",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">arm64-apple-ios-simulator</span></code>"
        },
        {
          "language": "docutils",
          "code": "x86_64-apple-ios-simulator",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">x86_64-apple-ios-simulator</span></code>"
        },
        {
          "language": "docutils",
          "code": "aarch64-linux-android",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">aarch64-linux-android</span></code>"
        },
        {
          "language": "docutils",
          "code": "x86_64-linux-android",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">x86_64-linux-android</span></code>"
        },
        {
          "language": "docutils",
          "code": "arm-linux-androideabi",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">arm-linux-androideabi</span></code>"
        },
        {
          "language": "docutils",
          "code": "i686-linux-android",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">i686-linux-android</span></code>"
        },
        {
          "language": "xref",
          "code": "sqlalchemy.orm.session",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlalchemy.orm.session</span></code>"
        },
        {
          "language": "",
          "code": ">>>defspam():...\"\"\"...This is a docstring with...leading whitespace.......It even has multiple paragraphs!...\"\"\"...>>>spam.__doc__'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has multiple paragraphs!\\n'",
          "element": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">spam</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span><span class=..."
        },
        {
          "language": "",
          "code": "classC[T]:typeAlias=lambda:T",
          "element": "<pre><span></span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">C</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]:</span>\n    <span class=\"nb\">type</span..."
        },
        {
          "language": "docutils",
          "code": "from.__future__import...",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">from</span> <span class=\"pre\">.__future__</span> <span class=\"pre\">import</span> <span class=\"pre\">...</span></code>"
        },
        {
          "language": "xref",
          "code": "SyntaxError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SyntaxError</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_FROZEN_MODULES",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_FROZEN_MODULES</span></code>"
        },
        {
          "language": "xref",
          "code": "-Xfrozen_modules",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">-X</span> <span class=\"pre\">frozen_modules</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_PERF_JIT_SUPPORT",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_PERF_JIT_SUPPORT</span></code>"
        },
        {
          "language": "file",
          "code": ".python_history",
          "element": "<code class=\"file docutils literal notranslate\"><span class=\"pre\">.python_history</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_HISTORY",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_HISTORY</span></code>"
        },
        {
          "language": "xref",
          "code": "__static_attributes__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__static_attributes__</span></code>"
        },
        {
          "language": "docutils",
          "code": "self.<name>",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">self.&lt;name&gt;</span></code>"
        },
        {
          "language": "xref",
          "code": "__firstlineno__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__firstlineno__</span></code>"
        },
        {
          "language": "docutils",
          "code": "ast.PyCF_OPTIMIZED_AST",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ast.PyCF_OPTIMIZED_AST</span></code>"
        },
        {
          "language": "docutils",
          "code": "ast.PyCF_ONLY_AST",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ast.PyCF_ONLY_AST</span></code>"
        },
        {
          "language": "xref",
          "code": "PythonFinalizationError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">PythonFinalizationError</span></code>"
        },
        {
          "language": "xref",
          "code": "RuntimeError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RuntimeError</span></code>"
        },
        {
          "language": "xref",
          "code": "PythonFinalizationError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">PythonFinalizationError</span></code>"
        },
        {
          "language": "xref",
          "code": "RuntimeError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RuntimeError</span></code>"
        },
        {
          "language": "xref",
          "code": "_thread.start_new_thread()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">_thread.start_new_thread()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.forkpty()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.forkpty()</span></code>"
        },
        {
          "language": "xref",
          "code": "subprocess.Popen",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">subprocess.Popen</span></code>"
        },
        {
          "language": "xref",
          "code": "str.replace()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">str.replace()</span></code>"
        },
        {
          "language": "xref",
          "code": "dbm.sqlite3",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm.sqlite3</span></code>"
        },
        {
          "language": "xref",
          "code": "add_argument()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_argument()</span></code>"
        },
        {
          "language": "xref",
          "code": "add_parser()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_parser()</span></code>"
        },
        {
          "language": "xref",
          "code": "array.array",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">array.array</span></code>"
        },
        {
          "language": "xref",
          "code": "MutableSequence",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutableSequence</span></code>"
        },
        {
          "language": "xref",
          "code": "expr_context",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">expr_context</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "AST._field_types",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AST._field_types</span></code>"
        },
        {
          "language": "xref",
          "code": "ast.parse()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ast.parse()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.as_completed()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">asyncio.as_completed()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.loop.create_unix_server()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asyncio.loop.create_unix_server()</span></code>"
        },
        {
          "language": "xref",
          "code": "DatagramTransport.sendto()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">DatagramTransport.sendto()</span></code>"
        },
        {
          "language": "xref",
          "code": "Queue.shutdown",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Queue.shutdown</span></code>"
        },
        {
          "language": "xref",
          "code": "QueueShutDown",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">QueueShutDown</span></code>"
        },
        {
          "language": "xref",
          "code": "Server.close_clients()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Server.close_clients()</span></code>"
        },
        {
          "language": "xref",
          "code": "Server.abort_clients()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Server.abort_clients()</span></code>"
        },
        {
          "language": "xref",
          "code": "StreamReader.readuntil()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">StreamReader.readuntil()</span></code>"
        },
        {
          "language": "xref",
          "code": "ExceptionGroup",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ExceptionGroup</span></code>"
        },
        {
          "language": "xref",
          "code": "CancelledError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CancelledError</span></code>"
        },
        {
          "language": "xref",
          "code": "cancelling()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">cancelling()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_must_cancel",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_must_cancel</span></code>"
        },
        {
          "language": "xref",
          "code": "TaskGroup.create_task()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">TaskGroup.create_task()</span></code>"
        },
        {
          "language": "xref",
          "code": "RuntimeWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RuntimeWarning</span></code>"
        },
        {
          "language": "docutils",
          "code": "create_task",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">create_task</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.create_task()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asyncio.create_task()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.loop.create_task()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asyncio.loop.create_task()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.TaskGroup.create_task()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asyncio.TaskGroup.create_task()</span></code>"
        },
        {
          "language": "xref",
          "code": "z85encode()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">z85encode()</span></code>"
        },
        {
          "language": "xref",
          "code": "z85decode()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">z85decode()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.process_cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.process_cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.process_cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.process_cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "ConfigParser",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConfigParser</span></code>"
        },
        {
          "language": "xref",
          "code": "replaceprotocol",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">replace</span> <span class=\"pre\">protocol</span></code>"
        },
        {
          "language": "xref",
          "code": "collections.namedtuple()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">collections.namedtuple()</span></code>"
        },
        {
          "language": "xref",
          "code": "dataclasses.dataclass",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dataclasses.dataclass</span></code>"
        },
        {
          "language": "xref",
          "code": "datetime.datetime",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.datetime</span></code>"
        },
        {
          "language": "xref",
          "code": "datetime.date",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.date</span></code>"
        },
        {
          "language": "xref",
          "code": "datetime.time",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.time</span></code>"
        },
        {
          "language": "xref",
          "code": "inspect.Signature",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">inspect.Signature</span></code>"
        },
        {
          "language": "xref",
          "code": "inspect.Parameter",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">inspect.Parameter</span></code>"
        },
        {
          "language": "xref",
          "code": "types.SimpleNamespace",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">types.SimpleNamespace</span></code>"
        },
        {
          "language": "xref",
          "code": "copy.replace()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">copy.replace()</span></code>"
        },
        {
          "language": "xref",
          "code": "__replace__()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__replace__()</span></code>"
        },
        {
          "language": "docutils",
          "code": "super().__new__",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">super().__new__</span></code>"
        },
        {
          "language": "xref",
          "code": "ctypes.Structure",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ctypes.Structure</span></code>"
        },
        {
          "language": "xref",
          "code": "dbm.sqlite3",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm.sqlite3</span></code>"
        },
        {
          "language": "xref",
          "code": "gdbm.clear()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">gdbm.clear()</span></code>"
        },
        {
          "language": "xref",
          "code": "ndbm.clear()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ndbm.clear()</span></code>"
        },
        {
          "language": "xref",
          "code": "get_instructions()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_instructions()</span></code>"
        },
        {
          "language": "xref",
          "code": "Instruction",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Instruction</span></code>"
        },
        {
          "language": "xref",
          "code": "get_instructions()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_instructions()</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_COLORS",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_COLORS</span></code>"
        },
        {
          "language": "docutils",
          "code": "FORCE_COLOR",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">FORCE_COLOR</span></code>"
        },
        {
          "language": "xref",
          "code": "DocTestRunner.run()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">DocTestRunner.run()</span></code>"
        },
        {
          "language": "xref",
          "code": "DocTestRunner.skips",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">DocTestRunner.skips</span></code>"
        },
        {
          "language": "xref",
          "code": "TestResults.skipped",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TestResults.skipped</span></code>"
        },
        {
          "language": "xref",
          "code": "verify_generated_headers",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verify_generated_headers</span></code>"
        },
        {
          "language": "xref",
          "code": "getaddresses()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">getaddresses()</span></code>"
        },
        {
          "language": "xref",
          "code": "parseaddr()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">parseaddr()</span></code>"
        },
        {
          "language": "docutils",
          "code": "strict=False",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">strict=False</span></code>"
        },
        {
          "language": "docutils",
          "code": "getattr(email.utils,'supports_strict_parsing',False)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">getattr(email.utils,</span> <span class=\"pre\">'supports_strict_parsing',</span> <span class=\"pre\">False)</span></code>"
        },
        {
          "language": "xref",
          "code": "translate()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">translate()</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.resources",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code>"
        },
        {
          "language": "xref",
          "code": "is_resource()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">is_resource()</span></code>"
        },
        {
          "language": "xref",
          "code": "open_binary()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">open_binary()</span></code>"
        },
        {
          "language": "xref",
          "code": "open_text()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">open_text()</span></code>"
        },
        {
          "language": "xref",
          "code": "read_binary()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">read_binary()</span></code>"
        },
        {
          "language": "xref",
          "code": "read_text()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">read_text()</span></code>"
        },
        {
          "language": "xref",
          "code": "Traversable",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Traversable</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.unraisablehook",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.unraisablehook</span></code>"
        },
        {
          "language": "xref",
          "code": "IPv4Address.ipv6_mapped",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">IPv4Address.ipv6_mapped</span></code>"
        },
        {
          "language": "xref",
          "code": "IPv4Address",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IPv4Address</span></code>"
        },
        {
          "language": "xref",
          "code": "IPv6Address",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IPv6Address</span></code>"
        },
        {
          "language": "xref",
          "code": "IPv4Network",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IPv4Network</span></code>"
        },
        {
          "language": "xref",
          "code": "IPv6Network",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IPv6Network</span></code>"
        },
        {
          "language": "docutils",
          "code": "allow_code=False",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">allow_code=False</span></code>"
        },
        {
          "language": "xref",
          "code": "guess_file_type()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">guess_file_type()</span></code>"
        },
        {
          "language": "xref",
          "code": "guess_type()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">guess_type()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.process_cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.process_cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "process_cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">process_cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "process_cpu_count()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">process_cpu_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHON_CPU_COUNT",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHON_CPU_COUNT</span></code>"
        },
        {
          "language": "xref",
          "code": "-Xcpu_count",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">-X</span> <span class=\"pre\">cpu_count</span></code>"
        },
        {
          "language": "xref",
          "code": "timerfd_create()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">timerfd_create()</span></code>"
        },
        {
          "language": "xref",
          "code": "timerfd_settime()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">timerfd_settime()</span></code>"
        },
        {
          "language": "xref",
          "code": "timerfd_settime_ns()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">timerfd_settime_ns()</span></code>"
        },
        {
          "language": "xref",
          "code": "timerfd_gettime()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">timerfd_gettime()</span></code>"
        },
        {
          "language": "xref",
          "code": "timerfd_gettime_ns()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">timerfd_gettime_ns()</span></code>"
        },
        {
          "language": "xref",
          "code": "TFD_NONBLOCK",
          "element": "<code class=\"xref py py-const docutils literal notranslate\"><span class=\"pre\">TFD_NONBLOCK</span></code>"
        },
        {
          "language": "xref",
          "code": "TFD_CLOEXEC",
          "element": "<code class=\"xref py py-const docutils literal notranslate\"><span class=\"pre\">TFD_CLOEXEC</span></code>"
        },
        {
          "language": "xref",
          "code": "TFD_TIMER_ABSTIME",
          "element": "<code class=\"xref py py-const docutils literal notranslate\"><span class=\"pre\">TFD_TIMER_ABSTIME</span></code>"
        },
        {
          "language": "xref",
          "code": "TFD_TIMER_CANCEL_ON_SET",
          "element": "<code class=\"xref py py-const docutils literal notranslate\"><span class=\"pre\">TFD_TIMER_CANCEL_ON_SET</span></code>"
        },
        {
          "language": "xref",
          "code": "tempfile.mkdtemp()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">tempfile.mkdtemp()</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">posix_spawn()</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">posix_spawn()</span></code>"
        },
        {
          "language": "xref",
          "code": "POSIX_SPAWN_CLOSEFROM",
          "element": "<code class=\"xref py py-const docutils literal notranslate\"><span class=\"pre\">POSIX_SPAWN_CLOSEFROM</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn_file_actions_addclosefrom_np()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">posix_spawn_file_actions_addclosefrom_np()</span></code>"
        },
        {
          "language": "xref",
          "code": "isreserved()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isreserved()</span></code>"
        },
        {
          "language": "xref",
          "code": "UnsupportedOperation",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">UnsupportedOperation</span></code>"
        },
        {
          "language": "xref",
          "code": "NotImplementedError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NotImplementedError</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.from_uri()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.from_uri()</span></code>"
        },
        {
          "language": "xref",
          "code": "PurePath.full_match()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">PurePath.full_match()</span></code>"
        },
        {
          "language": "xref",
          "code": "PurePath.parser",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">PurePath.parser</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.glob()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.glob()</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.glob()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.glob()</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.is_file",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.is_file</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.is_dir",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.is_dir</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.owner()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.owner()</span></code>"
        },
        {
          "language": "xref",
          "code": "Path.group()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Path.group()</span></code>"
        },
        {
          "language": "xref",
          "code": "breakpoint()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">breakpoint()</span></code>"
        },
        {
          "language": "xref",
          "code": "set_trace()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">set_trace()</span></code>"
        },
        {
          "language": "xref",
          "code": "breakpoint()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">breakpoint()</span></code>"
        },
        {
          "language": "docutils",
          "code": "sys.path[0]",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">sys.path[0]</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.flags.safe_path",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">sys.flags.safe_path</span></code>"
        },
        {
          "language": "xref",
          "code": "exceptions[exc_number]",
          "element": "<code class=\"xref std std-pdbcmd docutils literal notranslate\"><span class=\"pre\">exceptions</span> <span class=\"pre\">[exc_number]</span></code>"
        },
        {
          "language": "xref",
          "code": "Queue.shutdown",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Queue.shutdown</span></code>"
        },
        {
          "language": "xref",
          "code": "PatternError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">PatternError</span></code>"
        },
        {
          "language": "xref",
          "code": "ResourceWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ResourceWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "Connection.iterdump()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Connection.iterdump()</span></code>"
        },
        {
          "language": "xref",
          "code": "create_default_context()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">create_default_context()</span></code>"
        },
        {
          "language": "xref",
          "code": "VERIFY_X509_PARTIAL_CHAIN",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">VERIFY_X509_PARTIAL_CHAIN</span></code>"
        },
        {
          "language": "xref",
          "code": "VERIFY_X509_STRICT",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">VERIFY_X509_STRICT</span></code>"
        },
        {
          "language": "xref",
          "code": "VERIFY_X509_STRICT",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">VERIFY_X509_STRICT</span></code>"
        },
        {
          "language": "",
          "code": "importsslctx=ssl.create_default_context()ctx.verify_flags&=~ssl.VERIFY_X509_STRICT",
          "element": "<pre><span></span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">ssl</span>\n\n<span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">ssl</span><span class=\"o\">.</sp..."
        },
        {
          "language": "xref",
          "code": "kde_random()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">kde_random()</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">posix_spawn()</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">posix_spawn()</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn_file_actions_addclosefrom_np()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">posix_spawn_file_actions_addclosefrom_np()</span></code>"
        },
        {
          "language": "xref",
          "code": "subprocess._USE_POSIX_SPAWN",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">subprocess._USE_POSIX_SPAWN</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">posix_spawn()</span></code>"
        },
        {
          "language": "xref",
          "code": "_is_interned()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">_is_interned()</span></code>"
        },
        {
          "language": "xref",
          "code": "tempfile.mkdtemp()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">tempfile.mkdtemp()</span></code>"
        },
        {
          "language": "xref",
          "code": "monotonic()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">monotonic()</span></code>"
        },
        {
          "language": "docutils",
          "code": "QueryPerformanceCounter()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">QueryPerformanceCounter()</span></code>"
        },
        {
          "language": "docutils",
          "code": "GetTickCount64()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">GetTickCount64()</span></code>"
        },
        {
          "language": "docutils",
          "code": "GetSystemTimePreciseAsFileTime()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">GetSystemTimePreciseAsFileTime()</span></code>"
        },
        {
          "language": "docutils",
          "code": "GetSystemTimeAsFileTime()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">GetSystemTimeAsFileTime()</span></code>"
        },
        {
          "language": "xref",
          "code": "tk_busy_hold()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">tk_busy_hold()</span></code>"
        },
        {
          "language": "xref",
          "code": "tk_busy_configure()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">tk_busy_configure()</span></code>"
        },
        {
          "language": "xref",
          "code": "tk_busy_cget()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">tk_busy_cget()</span></code>"
        },
        {
          "language": "xref",
          "code": "tk_busy_forget()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">tk_busy_forget()</span></code>"
        },
        {
          "language": "xref",
          "code": "tk_busy_current()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">tk_busy_current()</span></code>"
        },
        {
          "language": "xref",
          "code": "tk_busy_status()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">tk_busy_status()</span></code>"
        },
        {
          "language": "xref",
          "code": "wm_attributes()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">wm_attributes()</span></code>"
        },
        {
          "language": "docutils",
          "code": "w.wm_attributes('alpha')",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">w.wm_attributes('alpha')</span></code>"
        },
        {
          "language": "docutils",
          "code": "w.wm_attributes(alpha=0.5)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">w.wm_attributes(alpha=0.5)</span></code>"
        },
        {
          "language": "xref",
          "code": "wm_attributes()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">wm_attributes()</span></code>"
        },
        {
          "language": "xref",
          "code": "Text.count()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Text.count()</span></code>"
        },
        {
          "language": "xref",
          "code": "element_create()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">element_create()</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.ttk.Style",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tkinter.ttk.Style</span></code>"
        },
        {
          "language": "xref",
          "code": "after_info()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">after_info()</span></code>"
        },
        {
          "language": "xref",
          "code": "copy_replace()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">copy_replace()</span></code>"
        },
        {
          "language": "xref",
          "code": "subsample()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">subsample()</span></code>"
        },
        {
          "language": "xref",
          "code": "exc_type_str",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">exc_type_str</span></code>"
        },
        {
          "language": "xref",
          "code": "TracebackException",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TracebackException</span></code>"
        },
        {
          "language": "xref",
          "code": "TracebackException.format_exception_only()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">TracebackException.format_exception_only()</span></code>"
        },
        {
          "language": "xref",
          "code": "BaseExceptionGroup",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">BaseExceptionGroup</span></code>"
        },
        {
          "language": "xref",
          "code": "SimpleNamespace",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleNamespace</span></code>"
        },
        {
          "language": "xref",
          "code": "get_protocol_members()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_protocol_members()</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.Protocol",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">typing.Protocol</span></code>"
        },
        {
          "language": "xref",
          "code": "is_protocol()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">is_protocol()</span></code>"
        },
        {
          "language": "xref",
          "code": "--without-scm-ignore-files",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--without-scm-ignore-files</span></code>"
        },
        {
          "language": "xref",
          "code": "warnings.deprecated()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">warnings.deprecated()</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.etree.ElementTree.XMLParser.flush()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree.XMLParser.flush()</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.etree.ElementTree.XMLPullParser.flush()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree.XMLPullParser.flush()</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.sax.expatreader.ExpatParser.flush()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">xml.sax.expatreader.ExpatParser.flush()</span></code>"
        },
        {
          "language": "xref",
          "code": "iterparse()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iterparse()</span></code>"
        },
        {
          "language": "xref",
          "code": "email.utils",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.metadata",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code>"
        },
        {
          "language": "xref",
          "code": "textwrap.indent()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">textwrap.indent()</span></code>"
        },
        {
          "language": "xref",
          "code": "posix_spawn()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">posix_spawn()</span></code>"
        },
        {
          "language": "docutils",
          "code": "audioop-lts",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">audioop-lts</span></code>"
        },
        {
          "language": "xref",
          "code": "cgi.FieldStorage",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cgi.FieldStorage</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.parse.parse_qsl()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">urllib.parse.parse_qsl()</span></code>"
        },
        {
          "language": "xref",
          "code": "email.message",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>"
        },
        {
          "language": "xref",
          "code": "cgi.parse()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cgi.parse()</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.parse.parse_qs()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">urllib.parse.parse_qs()</span></code>"
        },
        {
          "language": "docutils",
          "code": "multipart/form-data",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">multipart/form-data</span></code>"
        },
        {
          "language": "xref",
          "code": "cgi.parse_multipart()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cgi.parse_multipart()</span></code>"
        },
        {
          "language": "xref",
          "code": "cgi.parse_header()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cgi.parse_header()</span></code>"
        },
        {
          "language": "xref",
          "code": "email.message.EmailMessage",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">email.message.EmailMessage</span></code>"
        },
        {
          "language": "",
          "code": "fromemail.messageimportEmailMessagemsg=EmailMessage()msg['content-type']='application/json; charset=\"utf8\"'main,params=msg.get_content_type(),msg['content-type'].params",
          "element": "<pre><span></span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">email.message</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">EmailMessage</span>\n\n<..."
        },
        {
          "language": "xref",
          "code": "cgi.parse_multipart()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cgi.parse_multipart()</span></code>"
        },
        {
          "language": "xref",
          "code": "email.message.EmailMessage",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">email.message.EmailMessage</span></code>"
        },
        {
          "language": "xref",
          "code": "email.message.Message",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>"
        },
        {
          "language": "xref",
          "code": "puremagic.what()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">puremagic.what()</span></code>"
        },
        {
          "language": "xref",
          "code": "imghdr.what()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">imghdr.what()</span></code>"
        },
        {
          "language": "xref",
          "code": "ossaudiodev",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code>"
        },
        {
          "language": "xref",
          "code": "shlex.quote()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">shlex.quote()</span></code>"
        },
        {
          "language": "docutils",
          "code": "pipes.quote",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">pipes.quote</span></code>"
        },
        {
          "language": "xref",
          "code": "classmethod",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">classmethod</span></code>"
        },
        {
          "language": "xref",
          "code": "classmethod",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">classmethod</span></code>"
        },
        {
          "language": "xref",
          "code": "__wrapped__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__wrapped__</span></code>"
        },
        {
          "language": "xref",
          "code": "RuntimeError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RuntimeError</span></code>"
        },
        {
          "language": "xref",
          "code": "frame.clear()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">frame.clear()</span></code>"
        },
        {
          "language": "xref",
          "code": "LegacyInterpolation",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LegacyInterpolation</span></code>"
        },
        {
          "language": "xref",
          "code": "__getitem__()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code>"
        },
        {
          "language": "xref",
          "code": "locale.resetlocale()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">locale.resetlocale()</span></code>"
        },
        {
          "language": "docutils",
          "code": "locale.setlocale(locale.LC_ALL,\"\")",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">locale.setlocale(locale.LC_ALL,</span> <span class=\"pre\">\"\")</span></code>"
        },
        {
          "language": "xref",
          "code": "opcode.ENABLE_SPECIALIZATION",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">opcode.ENABLE_SPECIALIZATION</span></code>"
        },
        {
          "language": "xref",
          "code": "_opcode.ENABLE_SPECIALIZATION",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">_opcode.ENABLE_SPECIALIZATION</span></code>"
        },
        {
          "language": "xref",
          "code": "opcode.is_pseudo()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">opcode.is_pseudo()</span></code>"
        },
        {
          "language": "xref",
          "code": "opcode.MIN_PSEUDO_OPCODE",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">opcode.MIN_PSEUDO_OPCODE</span></code>"
        },
        {
          "language": "xref",
          "code": "opcode.MAX_PSEUDO_OPCODE",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">opcode.MAX_PSEUDO_OPCODE</span></code>"
        },
        {
          "language": "xref",
          "code": "re.template()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">re.template()</span></code>"
        },
        {
          "language": "xref",
          "code": "re.TEMPLATE",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">re.TEMPLATE</span></code>"
        },
        {
          "language": "xref",
          "code": "tkinter.tix",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code>"
        },
        {
          "language": "xref",
          "code": "RawTurtle.settiltangle()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">RawTurtle.settiltangle()</span></code>"
        },
        {
          "language": "xref",
          "code": "unittest.findTestCases()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">unittest.findTestCases()</span></code>"
        },
        {
          "language": "xref",
          "code": "unittest.makeSuite()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">unittest.makeSuite()</span></code>"
        },
        {
          "language": "xref",
          "code": "unittest.getTestCaseNames()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">unittest.getTestCaseNames()</span></code>"
        },
        {
          "language": "xref",
          "code": "loadTestsFromModule()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">loadTestsFromModule()</span></code>"
        },
        {
          "language": "xref",
          "code": "loadTestsFromTestCase()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">loadTestsFromTestCase()</span></code>"
        },
        {
          "language": "xref",
          "code": "getTestCaseNames()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">getTestCaseNames()</span></code>"
        },
        {
          "language": "xref",
          "code": "TestProgram.usageExit()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">TestProgram.usageExit()</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.request.urlopen()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">urllib.request.urlopen()</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.SSLContext.load_cert_chain()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ssl.SSLContext.load_cert_chain()</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.create_default_context()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ssl.create_default_context()</span></code>"
        },
        {
          "language": "xref",
          "code": "MacOSXOSAScript",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MacOSXOSAScript</span></code>"
        },
        {
          "language": "xref",
          "code": "MacOSXOSAScript._name",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">MacOSXOSAScript._name</span></code>"
        },
        {
          "language": "xref",
          "code": "MacOSXOSAScript.name",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">MacOSXOSAScript.name</span></code>"
        },
        {
          "language": "xref",
          "code": "SetPointerType()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">SetPointerType()</span></code>"
        },
        {
          "language": "docutils",
          "code": "type*length",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">type</span> <span class=\"pre\">*</span> <span class=\"pre\">length</span></code>"
        },
        {
          "language": "xref",
          "code": "HAVE_ARGUMENT",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HAVE_ARGUMENT</span></code>"
        },
        {
          "language": "xref",
          "code": "http.server",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code>"
        },
        {
          "language": "xref",
          "code": "CGIHTTPRequestHandler",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CGIHTTPRequestHandler</span></code>"
        },
        {
          "language": "xref",
          "code": "guess_type()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">guess_type()</span></code>"
        },
        {
          "language": "xref",
          "code": "guess_file_type()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">guess_file_type()</span></code>"
        },
        {
          "language": "xref",
          "code": "PurePath.is_reserved()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">PurePath.is_reserved()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.path.isreserved()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.path.isreserved()</span></code>"
        },
        {
          "language": "xref",
          "code": "ispackage()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ispackage()</span></code>"
        },
        {
          "language": "xref",
          "code": "Connection.create_function()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Connection.create_function()</span></code>"
        },
        {
          "language": "xref",
          "code": "Connection.create_aggregate()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Connection.create_aggregate()</span></code>"
        },
        {
          "language": "xref",
          "code": "set_authorizer()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_authorizer()</span></code>"
        },
        {
          "language": "xref",
          "code": "set_progress_handler()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_progress_handler()</span></code>"
        },
        {
          "language": "xref",
          "code": "set_trace_callback()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_trace_callback()</span></code>"
        },
        {
          "language": "xref",
          "code": "_enablelegacywindowsfsencoding()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">_enablelegacywindowsfsencoding()</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHONLEGACYWINDOWSFSENCODING",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHONLEGACYWINDOWSFSENCODING</span></code>"
        },
        {
          "language": "xref",
          "code": "TarFile.tarfile",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TarFile.tarfile</span></code>"
        },
        {
          "language": "xref",
          "code": "TracebackException.exc_type",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TracebackException.exc_type</span></code>"
        },
        {
          "language": "xref",
          "code": "TracebackException.exc_type_str",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TracebackException.exc_type_str</span></code>"
        },
        {
          "language": "docutils",
          "code": "Point=NamedTuple(\"Point\",x=int,y=int)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Point</span> <span class=\"pre\">=</span> <span class=\"pre\">NamedTuple(\"Point\",</span> <span class=\"pre\">x=int,</span> <span class=\"pre\">y=in..."
        },
        {
          "language": "xref",
          "code": "typing.TypedDict",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">typing.TypedDict</span></code>"
        },
        {
          "language": "docutils",
          "code": "classNT(NamedTuple):pass",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">NT(NamedTuple):</span> <span class=\"pre\">pass</span></code>"
        },
        {
          "language": "docutils",
          "code": "NT=NamedTuple(\"NT\",())",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">NT</span> <span class=\"pre\">=</span> <span class=\"pre\">NamedTuple(\"NT\",</span> <span class=\"pre\">())</span></code>"
        },
        {
          "language": "docutils",
          "code": "classTD(TypedDict):pass",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">TD(TypedDict):</span> <span class=\"pre\">pass</span></code>"
        },
        {
          "language": "docutils",
          "code": "TD=TypedDict(\"TD\",{})",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">TD</span> <span class=\"pre\">=</span> <span class=\"pre\">TypedDict(\"TD\",</span> <span class=\"pre\">{})</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.no_type_check_decorator()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">typing.no_type_check_decorator()</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.AnyStr",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">typing.AnyStr</span></code>"
        },
        {
          "language": "docutils",
          "code": "typing.__all__",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">typing.__all__</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "getmarkers()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">getmarkers()</span></code>"
        },
        {
          "language": "xref",
          "code": "argparse.BooleanOptionalAction",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.BooleanOptionalAction</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "ast.NameConstant",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ast.NameConstant</span></code>"
        },
        {
          "language": "xref",
          "code": "ast.Ellipsis",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ast.Ellipsis</span></code>"
        },
        {
          "language": "xref",
          "code": "ast.Constant",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ast.Constant</span></code>"
        },
        {
          "language": "xref",
          "code": "MultiLoopChildWatcher",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiLoopChildWatcher</span></code>"
        },
        {
          "language": "xref",
          "code": "FastChildWatcher",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FastChildWatcher</span></code>"
        },
        {
          "language": "xref",
          "code": "AbstractChildWatcher",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractChildWatcher</span></code>"
        },
        {
          "language": "xref",
          "code": "SafeChildWatcher",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SafeChildWatcher</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.set_child_watcher()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">asyncio.set_child_watcher()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.get_child_watcher()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">asyncio.get_child_watcher()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.AbstractEventLoopPolicy.set_child_watcher()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asyncio.AbstractEventLoopPolicy.set_child_watcher()</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.AbstractEventLoopPolicy.get_child_watcher()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asyncio.AbstractEventLoopPolicy.get_child_watcher()</span></code>"
        },
        {
          "language": "xref",
          "code": "get_event_loop()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_event_loop()</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "collections.abc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code>"
        },
        {
          "language": "docutils",
          "code": "bytes|bytearray",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span> <span class=\"pre\">|</span> <span class=\"pre\">bytearray</span></code>"
        },
        {
          "language": "xref",
          "code": "collections.abc.Buffer",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">collections.abc.Buffer</span></code>"
        },
        {
          "language": "xref",
          "code": "email.utils.localtime()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">email.utils.localtime()</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.abc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.abc</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.abc.ResourceReader",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.abc.ResourceReader</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.abc.Traversable",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.abc.Traversable</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.abc.TraversableResources",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.abc.TraversableResources</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.resources.abc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.resources.abc.Traversable",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc.Traversable</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.resources.abc.TraversableResources",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc.TraversableResources</span></code>"
        },
        {
          "language": "xref",
          "code": "multiprocessing",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code>"
        },
        {
          "language": "xref",
          "code": "get_context()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_context()</span></code>"
        },
        {
          "language": "xref",
          "code": "set_start_method()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">set_start_method()</span></code>"
        },
        {
          "language": "xref",
          "code": "is_relative_to()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">is_relative_to()</span></code>"
        },
        {
          "language": "xref",
          "code": "relative_to()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">relative_to()</span></code>"
        },
        {
          "language": "xref",
          "code": "find_loader()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">find_loader()</span></code>"
        },
        {
          "language": "xref",
          "code": "get_loader()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_loader()</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.util.find_spec()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">importlib.util.find_spec()</span></code>"
        },
        {
          "language": "docutils",
          "code": "master_open()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">master_open()</span></code>"
        },
        {
          "language": "xref",
          "code": "pty.openpty()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">pty.openpty()</span></code>"
        },
        {
          "language": "docutils",
          "code": "slave_open()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">slave_open()</span></code>"
        },
        {
          "language": "xref",
          "code": "pty.openpty()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">pty.openpty()</span></code>"
        },
        {
          "language": "xref",
          "code": "version_info",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">version_info</span></code>"
        },
        {
          "language": "xref",
          "code": "executemany()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">executemany()</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.parse.Quoter",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">urllib.parse.Quoter</span></code>"
        },
        {
          "language": "xref",
          "code": "__spec__.cached",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__spec__.cached</span></code>"
        },
        {
          "language": "xref",
          "code": "__package__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__package__</span></code>"
        },
        {
          "language": "xref",
          "code": "__spec__.parent",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__spec__.parent</span></code>"
        },
        {
          "language": "xref",
          "code": "__package__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__package__</span></code>"
        },
        {
          "language": "xref",
          "code": "ctypes.SetPointerType()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ctypes.SetPointerType()</span></code>"
        },
        {
          "language": "xref",
          "code": "http.server",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code>"
        },
        {
          "language": "xref",
          "code": "CGIHTTPRequestHandler",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CGIHTTPRequestHandler</span></code>"
        },
        {
          "language": "docutils",
          "code": "load_module()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">load_module()</span></code>"
        },
        {
          "language": "docutils",
          "code": "exec_module()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">exec_module()</span></code>"
        },
        {
          "language": "xref",
          "code": "getdefaultlocale()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">getdefaultlocale()</span></code>"
        },
        {
          "language": "xref",
          "code": "getlocale()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">getlocale()</span></code>"
        },
        {
          "language": "xref",
          "code": "setlocale()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">setlocale()</span></code>"
        },
        {
          "language": "xref",
          "code": "getencoding()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">getencoding()</span></code>"
        },
        {
          "language": "xref",
          "code": "PurePath.is_reserved()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">PurePath.is_reserved()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.path.isreserved()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.path.isreserved()</span></code>"
        },
        {
          "language": "xref",
          "code": "sysconfig.is_python_build()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sysconfig.is_python_build()</span></code>"
        },
        {
          "language": "xref",
          "code": "types.CodeType",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">types.CodeType</span></code>"
        },
        {
          "language": "xref",
          "code": "DeprecationWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>"
        },
        {
          "language": "docutils",
          "code": "Point=NamedTuple(\"Point\",x=int,y=int)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Point</span> <span class=\"pre\">=</span> <span class=\"pre\">NamedTuple(\"Point\",</span> <span class=\"pre\">x=int,</span> <span class=\"pre\">y=in..."
        },
        {
          "language": "docutils",
          "code": "TD=TypedDict(\"TD\")",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">TD</span> <span class=\"pre\">=</span> <span class=\"pre\">TypedDict(\"TD\")</span></code>"
        },
        {
          "language": "docutils",
          "code": "TD=TypedDict(\"TD\",None)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">TD</span> <span class=\"pre\">=</span> <span class=\"pre\">TypedDict(\"TD\",</span> <span class=\"pre\">None)</span></code>"
        },
        {
          "language": "docutils",
          "code": "classTD(TypedDict):pass",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">TD(TypedDict):</span> <span class=\"pre\">pass</span></code>"
        },
        {
          "language": "docutils",
          "code": "TD=TypedDict(\"TD\",{})",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">TD</span> <span class=\"pre\">=</span> <span class=\"pre\">TypedDict(\"TD\",</span> <span class=\"pre\">{})</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.no_type_check_decorator()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">typing.no_type_check_decorator()</span></code>"
        },
        {
          "language": "xref",
          "code": "getmarkers()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">getmarkers()</span></code>"
        },
        {
          "language": "xref",
          "code": "__spec__.loader",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__spec__.loader</span></code>"
        },
        {
          "language": "xref",
          "code": "asyncio.iscoroutinefunction()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">asyncio.iscoroutinefunction()</span></code>"
        },
        {
          "language": "xref",
          "code": "inspect.iscoroutinefunction()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">inspect.iscoroutinefunction()</span></code>"
        },
        {
          "language": "xref",
          "code": "RuntimeError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RuntimeError</span></code>"
        },
        {
          "language": "xref",
          "code": "Class.get_methods",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Class.get_methods</span></code>"
        },
        {
          "language": "xref",
          "code": "_enablelegacywindowsfsencoding()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">_enablelegacywindowsfsencoding()</span></code>"
        },
        {
          "language": "xref",
          "code": "PYTHONLEGACYWINDOWSFSENCODING",
          "element": "<code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHONLEGACYWINDOWSFSENCODING</span></code>"
        },
        {
          "language": "xref",
          "code": "TarFile.tarfile",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TarFile.tarfile</span></code>"
        },
        {
          "language": "docutils",
          "code": "bool(NotImplemented)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bool(NotImplemented)</span></code>"
        },
        {
          "language": "docutils",
          "code": "throw(type,exc,tb)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">throw(type,</span> <span class=\"pre\">exc,</span> <span class=\"pre\">tb)</span></code>"
        },
        {
          "language": "docutils",
          "code": "athrow(type,exc,tb)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">athrow(type,</span> <span class=\"pre\">exc,</span> <span class=\"pre\">tb)</span></code>"
        },
        {
          "language": "docutils",
          "code": "athrow(exc)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">athrow(exc)</span></code>"
        },
        {
          "language": "docutils",
          "code": "[0x1forxiny]",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">[0x1for</span> <span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y]</span></code>"
        },
        {
          "language": "docutils",
          "code": "[0x1forxiny]",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">[0x1</span> <span class=\"pre\">for</span> <span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y]</span></code>"
        },
        {
          "language": "docutils",
          "code": "[0x1forxiny]",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">[0x1f</span> <span class=\"pre\">or</span> <span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y]</span></code>"
        },
        {
          "language": "docutils",
          "code": "__index__()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__index__()</span></code>"
        },
        {
          "language": "docutils",
          "code": "__float__()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__float__()</span></code>"
        },
        {
          "language": "docutils",
          "code": "__complex__()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__complex__()</span></code>"
        },
        {
          "language": "docutils",
          "code": "__trunc__()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__trunc__()</span></code>"
        },
        {
          "language": "docutils",
          "code": "calendar.January",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">calendar.January</span></code>"
        },
        {
          "language": "docutils",
          "code": "calendar.February",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">calendar.February</span></code>"
        },
        {
          "language": "xref",
          "code": "calendar.JANUARY",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">calendar.JANUARY</span></code>"
        },
        {
          "language": "xref",
          "code": "calendar.FEBRUARY",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">calendar.FEBRUARY</span></code>"
        },
        {
          "language": "xref",
          "code": "codeobject.co_lnotab",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">codeobject.co_lnotab</span></code>"
        },
        {
          "language": "xref",
          "code": "codeobject.co_lines()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">codeobject.co_lines()</span></code>"
        },
        {
          "language": "docutils",
          "code": "datetime.datetime.now(tz=datetime.UTC)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime.now(tz=datetime.UTC)</span></code>"
        },
        {
          "language": "xref",
          "code": "utcfromtimestamp()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">utcfromtimestamp()</span></code>"
        },
        {
          "language": "docutils",
          "code": "datetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime.fromtimestamp(timestamp,</span> <span class=\"pre\">tz=datetime.UTC)</span></code>"
        },
        {
          "language": "xref",
          "code": "cache_from_source()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cache_from_source()</span></code>"
        },
        {
          "language": "xref",
          "code": "importlib.metadata",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code>"
        },
        {
          "language": "docutils",
          "code": "EntryPoints",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">EntryPoints</span></code>"
        },
        {
          "language": "xref",
          "code": "os.register_at_fork()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.register_at_fork()</span></code>"
        },
        {
          "language": "xref",
          "code": "pydoc.ErrorDuringImport",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pydoc.ErrorDuringImport</span></code>"
        },
        {
          "language": "xref",
          "code": "sre_compile",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sre_compile</span></code>"
        },
        {
          "language": "xref",
          "code": "sre_constants",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sre_constants</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.SSLContext",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ssl.SSLContext</span></code>"
        },
        {
          "language": "xref",
          "code": "ssl.SSLContext",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ssl.SSLContext</span></code>"
        },
        {
          "language": "xref",
          "code": "set_npn_protocols()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_npn_protocols()</span></code>"
        },
        {
          "language": "xref",
          "code": "selected_npn_protocol()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">selected_npn_protocol()</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.OP_NO_SSL*",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.OP_NO_SSL*</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.OP_NO_TLS*",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.OP_NO_TLS*</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.PROTOCOL_SSLv3",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.PROTOCOL_SSLv3</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.PROTOCOL_TLS",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.PROTOCOL_TLS</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.PROTOCOL_TLSv1",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.PROTOCOL_TLSv1</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.PROTOCOL_TLSv1_1",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.PROTOCOL_TLSv1_1</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.PROTOCOL_TLSv1_2",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.PROTOCOL_TLSv1_2</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.TLSVersion.SSLv3",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.TLSVersion.SSLv3</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.TLSVersion.TLSv1",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.TLSVersion.TLSv1</span></code>"
        },
        {
          "language": "docutils",
          "code": "ssl.TLSVersion.TLSv1_1",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ssl.TLSVersion.TLSv1_1</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Condition.notifyAll()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.Condition.notifyAll()</span></code>"
        },
        {
          "language": "xref",
          "code": "notify_all()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">notify_all()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Event.isSet()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.Event.isSet()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Thread.isDaemon()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.Thread.isDaemon()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Thread.setDaemon()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.Thread.setDaemon()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Thread.daemon",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">threading.Thread.daemon</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Thread.getName()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.Thread.getName()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Thread.setName()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.Thread.setName()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.Thread.name",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">threading.Thread.name</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.currentThread()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.currentThread()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.current_thread()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.current_thread()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.activeCount()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.activeCount()</span></code>"
        },
        {
          "language": "xref",
          "code": "threading.active_count()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">threading.active_count()</span></code>"
        },
        {
          "language": "xref",
          "code": "typing.Text",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">typing.Text</span></code>"
        },
        {
          "language": "xref",
          "code": "unittest.IsolatedAsyncioTestCase",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.IsolatedAsyncioTestCase</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.parse",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code>"
        },
        {
          "language": "docutils",
          "code": "splitattr()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splitattr()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splithost()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splithost()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splitnport()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splitnport()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splitpasswd()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splitpasswd()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splitport()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splitport()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splitquery()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splitquery()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splittype()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splittype()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splituser()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splituser()</span></code>"
        },
        {
          "language": "docutils",
          "code": "splitvalue()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">splitvalue()</span></code>"
        },
        {
          "language": "xref",
          "code": "urllib.request",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code>"
        },
        {
          "language": "xref",
          "code": "FancyURLopener",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FancyURLopener</span></code>"
        },
        {
          "language": "docutils",
          "code": "SimpleHandler.stdout.write()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleHandler.stdout.write()</span></code>"
        },
        {
          "language": "xref",
          "code": "xml.etree.ElementTree",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code>"
        },
        {
          "language": "docutils",
          "code": "elemisnotNone",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">elem</span> <span class=\"pre\">is</span> <span class=\"pre\">not</span> <span class=\"pre\">None</span></code>"
        },
        {
          "language": "xref",
          "code": "zipimport.zipimporter.load_module()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">zipimport.zipimporter.load_module()</span></code>"
        },
        {
          "language": "xref",
          "code": "exec_module()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exec_module()</span></code>"
        },
        {
          "language": "xref",
          "code": "YIELD_VALUE",
          "element": "<code class=\"xref std std-opcode docutils literal notranslate\"><span class=\"pre\">YIELD_VALUE</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoringState",
          "element": "<code class=\"xref c c-type docutils literal notranslate\"><span class=\"pre\">PyMonitoringState</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FirePyStartEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FirePyStartEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FirePyResumeEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FirePyResumeEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FirePyReturnEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FirePyReturnEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FirePyYieldEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FirePyYieldEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireCallEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireCallEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireLineEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireLineEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireJumpEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireJumpEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireBranchEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireBranchEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireCReturnEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireCReturnEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FirePyThrowEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FirePyThrowEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireRaiseEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireRaiseEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireCRaiseEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireCRaiseEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireReraiseEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireReraiseEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireExceptionHandledEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireExceptionHandledEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FirePyUnwindEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FirePyUnwindEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_FireStopIterationEvent()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_FireStopIterationEvent()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_EnterScope()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_EnterScope()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMonitoring_ExitScope()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMonitoring_ExitScope()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMutex_Lock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMutex_Lock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMutex_Unlock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMutex_Unlock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMutex_Lock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMutex_Lock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_AsSecondsDouble()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_AsSecondsDouble()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_Monotonic()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_Monotonic()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_MonotonicRaw()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_MonotonicRaw()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_PerfCounter()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_PerfCounter()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_PerfCounterRaw()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_PerfCounterRaw()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_Time()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_Time()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_TimeRaw()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_TimeRaw()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_ContainsString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_ContainsString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_Contains()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_Contains()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_GetItemRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_GetItemRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_GetItemStringRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_GetItemStringRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_GetItemWithError()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_GetItemWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_Occurred()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_Occurred()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_SetDefaultRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_SetDefaultRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_SetDefault()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_SetDefault()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_Pop()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_Pop()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_PopString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_PopString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_GetOptionalItem()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_GetOptionalItem()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_GetOptionalItemString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_GetOptionalItemString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetItem()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetItem()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_GetItemString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_GetItemString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetOptionalAttr()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetOptionalAttr()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetOptionalAttrString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetOptionalAttrString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetAttr()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetAttr()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetAttrString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetAttrString()</span></code>"
        },
        {
          "language": "xref",
          "code": "AttributeError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">AttributeError</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_FormatUnraisable()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_FormatUnraisable()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_WriteUnraisable()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_WriteUnraisable()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetFrameBuiltins()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetFrameBuiltins()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetBuiltins()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetBuiltins()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetFrameGlobals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetFrameGlobals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetGlobals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetGlobals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetFrameLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetFrameLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetConstant()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetConstant()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetConstantBorrowed()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetConstantBorrowed()</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_GetConstant(Py_CONSTANT_ZERO)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_GetConstant(Py_CONSTANT_ZERO)</span></code>"
        },
        {
          "language": "xref",
          "code": "PyImport_AddModuleRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyImport_AddModuleRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyImport_AddModule()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyImport_AddModule()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_IsFinalizing()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_IsFinalizing()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyList_GetItemRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyList_GetItemRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyList_GetItem()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyList_GetItem()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyList_Extend()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyList_Extend()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyList_Clear()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyList_Clear()</span></code>"
        },
        {
          "language": "xref",
          "code": "list.extend()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">list.extend()</span></code>"
        },
        {
          "language": "xref",
          "code": "list.clear()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">list.clear()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyLong_AsInt()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyLong_AsInt()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyLong_AsLong()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyLong_AsLong()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyLong_AsNativeBytes()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyLong_AsNativeBytes()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyLong_FromNativeBytes()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyLong_FromNativeBytes()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyLong_FromUnsignedNativeBytes()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyLong_FromUnsignedNativeBytes()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_Add()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_Add()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_AddObjectRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_AddObjectRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_AddObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_AddObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GenericHash()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GenericHash()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_HashPointer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_HashPointer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_VisitManagedDict()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_VisitManagedDict()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_ClearManagedDict()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_ClearManagedDict()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_TPFLAGS_MANAGED_DICT",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_TPFLAGS_MANAGED_DICT</span></code>"
        },
        {
          "language": "xref",
          "code": "PyRefTracer_SetTracer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyRefTracer_SetTracer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyRefTracer_GetTracer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyRefTracer_GetTracer()</span></code>"
        },
        {
          "language": "xref",
          "code": "tracemalloc",
          "element": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_AuditTuple()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_AuditTuple()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_Audit()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_Audit()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThreadState_GetUnchecked()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThreadState_GetUnchecked()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThreadState_Get()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThreadState_Get()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyType_GetFullyQualifiedName()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyType_GetFullyQualifiedName()</span></code>"
        },
        {
          "language": "xref",
          "code": "type.__module__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">type.__module__</span></code>"
        },
        {
          "language": "xref",
          "code": "PyType_GetModuleName()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyType_GetModuleName()</span></code>"
        },
        {
          "language": "xref",
          "code": "type.__module__",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">type.__module__</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_EqualToUTF8AndSize()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_EqualToUTF8AndSize()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_EqualToUTF8()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_EqualToUTF8()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_HasAttrWithError()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_HasAttrWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_HasAttr()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_HasAttr()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_HasAttrStringWithError()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_HasAttrStringWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_HasAttrString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_HasAttrString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_HasKeyWithError()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_HasKeyWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_HasKey()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_HasKey()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_HasKeyStringWithError()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_HasKeyStringWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_HasKeyString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_HasKeyString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyArg_ParseTupleAndKeywords()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyArg_ParseTupleAndKeywords()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyArg_VaParseTupleAndKeywords()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyArg_VaParseTupleAndKeywords()</span></code>"
        },
        {
          "language": "xref",
          "code": "PY_CXX_CONST",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">PY_CXX_CONST</span></code>"
        },
        {
          "language": "xref",
          "code": "PyArg_ParseTupleAndKeywords()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyArg_ParseTupleAndKeywords()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyCode_GetFirstFree()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyCode_GetFirstFree()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnstable_Code_GetFirstFree()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnstable_Code_GetFirstFree()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_GetItem()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_GetItem()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_GetItemString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_GetItemString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_HasKey()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_HasKey()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMapping_HasKeyString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMapping_HasKeyString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_HasAttr()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_HasAttr()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_HasAttrString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_HasAttrString()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_GetObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_GetObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.unraisablehook()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys.unraisablehook()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_FromFormat()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_FromFormat()</span></code>"
        },
        {
          "language": "docutils",
          "code": "PY_SSIZE_T_CLEAN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">PY_SSIZE_T_CLEAN</span></code>"
        },
        {
          "language": "xref",
          "code": "withassertions",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">with</span> <span class=\"pre\">assertions</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTuple_SET_ITEM()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTuple_SET_ITEM()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyList_SET_ITEM()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyList_SET_ITEM()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMem_RawMalloc()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMem_RawMalloc()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMem_RawCalloc()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMem_RawCalloc()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMem_RawRealloc()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMem_RawRealloc()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyMem_RawFree()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyMem_RawFree()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_Audit()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_Audit()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_AuditTuple()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_AuditTuple()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyType_GetModuleByDef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyType_GetModuleByDef()</span></code>"
        },
        {
          "language": "xref",
          "code": "--with-trace-refs",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--with-trace-refs</span></code>"
        },
        {
          "language": "docutils",
          "code": "cc:@vstinner",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">cc:</span> <span class=\"pre\">@vstinner</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_CheckReadBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_CheckReadBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_CheckBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_CheckBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_CheckBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_CheckBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_AsCharBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_AsCharBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_AsReadBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_AsReadBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyBuffer_Release()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyBuffer_Release()</span></code>"
        },
        {
          "language": "",
          "code": "Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_SIMPLE)<0){returnNULL;}// Use `view.buf` and `view.len` to read from the buffer.// You may need to cast buf as `(const char*)view.buf`.PyBuffer_Release(&view);",
          "element": "<pre><span></span><span class=\"n\">Py_buffer</span><span class=\"w\"> </span><span class=\"n\">view</span><span class=\"p\">;</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><..."
        },
        {
          "language": "xref",
          "code": "PyObject_AsWriteBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_AsWriteBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_GetBuffer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_GetBuffer()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyBuffer_Release()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyBuffer_Release()</span></code>"
        },
        {
          "language": "",
          "code": "Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_WRITABLE)<0){returnNULL;}// Use `view.buf` and `view.len` to write to the buffer.PyBuffer_Release(&view);",
          "element": "<pre><span></span><span class=\"n\">Py_buffer</span><span class=\"w\"> </span><span class=\"n\">view</span><span class=\"p\">;</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><..."
        },
        {
          "language": "xref",
          "code": "PyEval_CallObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_CallObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_CallObjectWithKeywords()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_CallObjectWithKeywords()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_CallNoArgs()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_CallNoArgs()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_Call()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_Call()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_Call()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_Call()</span></code>"
        },
        {
          "language": "docutils",
          "code": "PyEval_CallObjectWithKeywords(func,NULL,kwargs)",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">PyEval_CallObjectWithKeywords(func,</span> <span class=\"pre\">NULL,</span> <span class=\"pre\">kwargs)</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_Call()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_Call()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTuple_New(0)",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTuple_New(0)</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_CallFunction()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_CallFunction()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_CallFunction()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_CallFunction()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_CallMethod()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_CallMethod()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_CallMethod()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_CallMethod()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyCFunction_Call()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyCFunction_Call()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_Call()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_Call()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_AddWarnOptionUnicode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_AddWarnOptionUnicode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.warnoptions",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.warnoptions</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_AddWarnOption()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_AddWarnOption()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.warnoptions",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.warnoptions</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_AddXOption()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_AddXOption()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.xoptions",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.xoptions</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_HasWarnOptions()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_HasWarnOptions()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.xoptions",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.xoptions</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_SetPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_SetPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.module_search_paths",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.module_search_paths</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_SetPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_SetPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.module_search_paths",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.module_search_paths</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_SetStandardStreamEncoding()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_SetStandardStreamEncoding()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.stdio_encoding",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.stdio_encoding</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.legacy_windows_stdio",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.legacy_windows_stdio</span></code>"
        },
        {
          "language": "xref",
          "code": "_Py_SetProgramFullPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">_Py_SetProgramFullPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.executable",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.executable</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_AcquireLock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_AcquireLock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_ReleaseLock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_ReleaseLock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_SaveThread()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_SaveThread()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_RestoreThread()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_RestoreThread()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_AcquireThread()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_AcquireThread()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_RestoreThread()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_RestoreThread()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyGILState_Ensure()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyGILState_Ensure()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyGILState_Release()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyGILState_Release()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_ThreadsInitialized()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_ThreadsInitialized()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_Initialize()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_Initialize()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_InitThreads()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_InitThreads()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_ThreadsInitialized()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_ThreadsInitialized()</span></code>"
        },
        {
          "language": "xref",
          "code": "_PyInterpreterState_Get()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">_PyInterpreterState_Get()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyInterpreterState_Get()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyInterpreterState_Get()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyInterpreterState_Get()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyInterpreterState_Get()</span></code>"
        },
        {
          "language": "xref",
          "code": "_PyObject_FastCall()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">_PyObject_FastCall()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_Vectorcall()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_Vectorcall()</span></code>"
        },
        {
          "language": "docutils",
          "code": "cpython/pytime.h",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">cpython/pytime.h</span></code>"
        },
        {
          "language": "docutils",
          "code": "PY_TIMEOUT_MAX",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">PY_TIMEOUT_MAX</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_SAFE_BEGIN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_SAFE_BEGIN</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_SAFE_END",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_SAFE_END</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_BEGIN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_BEGIN</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_END",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_END</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_ResetWarnOptions()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_ResetWarnOptions()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.warnoptions",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.warnoptions</span></code>"
        },
        {
          "language": "xref",
          "code": "warnings.filters",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">warnings.filters</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetExecPrefix()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetExecPrefix()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.exec_prefix",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.exec_prefix</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetPrefix()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetPrefix()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetProgramFullPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetProgramFullPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.executable",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.executable</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetProgramName()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetProgramName()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.executable",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.executable</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetPythonHome()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetPythonHome()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.home",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.home</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetBuiltins()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetBuiltins()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetGlobals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetGlobals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyImport_ImportModuleNoBlock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyImport_ImportModuleNoBlock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyImport_ImportModule()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyImport_ImportModule()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_AddObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_AddObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_Add()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_Add()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_AddObjectRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_AddObjectRef()</span></code>"
        },
        {
          "language": "docutils",
          "code": "PY_UNICODE_TYPE",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">PY_UNICODE_TYPE</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_UNICODE_WIDE",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_UNICODE_WIDE</span></code>"
        },
        {
          "language": "docutils",
          "code": "PY_UNICODE_TYPE",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">PY_UNICODE_TYPE</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GET_OBJECT()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GET_OBJECT()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetRef()</span></code>"
        },
        {
          "language": "docutils",
          "code": "ma_version_tag",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ma_version_tag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDictObject",
          "element": "<code class=\"xref c c-type docutils literal notranslate\"><span class=\"pre\">PyDictObject</span></code>"
        },
        {
          "language": "xref",
          "code": "immutabletypes",
          "element": "<code class=\"xref c c-data docutils literal notranslate\"><span class=\"pre\">immutable</span> <span class=\"pre\">types</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_SetArgvEx()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_SetArgvEx()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.argv",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.argv</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_SetArgv()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_SetArgv()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.argv",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.argv</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_SetProgramName()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_SetProgramName()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.program_name",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.program_name</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_SetPythonHome()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_SetPythonHome()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.home",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.home</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_InitializeFromConfig()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_InitializeFromConfig()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_DebugFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_DebugFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.parser_debug",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.parser_debug</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_VerboseFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_VerboseFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.verbose",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.verbose</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_QuietFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_QuietFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.quiet",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.quiet</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_InteractiveFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_InteractiveFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.interactive",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.interactive</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_InspectFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_InspectFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.inspect",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.inspect</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_OptimizeFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_OptimizeFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.optimization_level",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.optimization_level</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_NoSiteFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_NoSiteFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.site_import",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.site_import</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_BytesWarningFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_BytesWarningFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.bytes_warning",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.bytes_warning</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_FrozenFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_FrozenFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.pathconfig_warnings",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.pathconfig_warnings</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_IgnoreEnvironmentFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_IgnoreEnvironmentFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.use_environment",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.use_environment</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_DontWriteBytecodeFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_DontWriteBytecodeFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.write_bytecode",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.write_bytecode</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_NoUserSiteDirectory",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_NoUserSiteDirectory</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.user_site_directory",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.user_site_directory</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_UnbufferedStdioFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_UnbufferedStdioFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.buffered_stdio",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.buffered_stdio</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_HashRandomizationFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_HashRandomizationFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.use_hash_seed",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.use_hash_seed</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.hash_seed",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.hash_seed</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_IsolatedFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_IsolatedFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.isolated",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.isolated</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_LegacyWindowsFSEncodingFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_LegacyWindowsFSEncodingFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyPreConfig.legacy_windows_fs_encoding",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyPreConfig.legacy_windows_fs_encoding</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_LegacyWindowsStdioFlag",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_LegacyWindowsStdioFlag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.legacy_windows_stdio",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.legacy_windows_stdio</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_FileSystemDefaultEncoding",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_FileSystemDefaultEncoding</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.filesystem_encoding",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.filesystem_encoding</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_HasFileSystemDefaultEncoding",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_HasFileSystemDefaultEncoding</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.filesystem_encoding",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.filesystem_encoding</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_FileSystemDefaultEncodeErrors",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_FileSystemDefaultEncodeErrors</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.filesystem_errors",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.filesystem_errors</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_UTF8Mode",
          "element": "<code class=\"xref c c-var docutils literal notranslate\"><span class=\"pre\">Py_UTF8Mode</span></code>"
        },
        {
          "language": "xref",
          "code": "PyPreConfig.utf8_mode",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyPreConfig.utf8_mode</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_PreInitialize()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_PreInitialize()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_InitializeFromConfig()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_InitializeFromConfig()</span></code>"
        },
        {
          "language": "docutils",
          "code": "libmpdecimal",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">libmpdecimal</span></code>"
        },
        {
          "language": "xref",
          "code": "PyImport_ImportModuleNoBlock()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyImport_ImportModuleNoBlock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyImport_ImportModule()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyImport_ImportModule()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GET_OBJECT()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GET_OBJECT()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyWeakref_GetRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyWeakref_GetRef()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_UNICODE_WIDE",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_UNICODE_WIDE</span></code>"
        },
        {
          "language": "xref",
          "code": "PySys_ResetWarnOptions()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySys_ResetWarnOptions()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.warnoptions",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.warnoptions</span></code>"
        },
        {
          "language": "xref",
          "code": "warnings.filters",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">warnings.filters</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetExecPrefix()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetExecPrefix()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.base_exec_prefix",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.base_exec_prefix</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.exec_prefix",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.exec_prefix</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetPrefix()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetPrefix()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.base_prefix",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.base_prefix</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetProgramFullPath()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetProgramFullPath()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.executable",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.executable</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetProgramName()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetProgramName()</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.executable",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.executable</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_GetPythonHome()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_GetPythonHome()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyConfig.home",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyConfig.home</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_TPFLAGS_HAVE_FINALIZE",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_TPFLAGS_HAVE_FINALIZE</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_Fetch()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_Fetch()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_GetRaisedException()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_GetRaisedException()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_NormalizeException()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_NormalizeException()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_GetRaisedException()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_GetRaisedException()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_Restore()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_Restore()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_SetRaisedException()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_SetRaisedException()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_GetFilename()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_GetFilename()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyModule_GetFilenameObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyModule_GetFilenameObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyOS_AfterFork()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyOS_AfterFork()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyOS_AfterFork_Child()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyOS_AfterFork_Child()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySlice_GetIndicesEx()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySlice_GetIndicesEx()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySlice_Unpack()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySlice_Unpack()</span></code>"
        },
        {
          "language": "xref",
          "code": "PySlice_AdjustIndices()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PySlice_AdjustIndices()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_AsDecodedObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_AsDecodedObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyCodec_Decode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyCodec_Decode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_AsDecodedUnicode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_AsDecodedUnicode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyCodec_Decode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyCodec_Decode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_AsEncodedObject()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_AsEncodedObject()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyCodec_Encode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyCodec_Encode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_AsEncodedUnicode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_AsEncodedUnicode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyCodec_Encode()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyCodec_Encode()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyUnicode_READY()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyUnicode_READY()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_Display()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_Display()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_DisplayException()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_DisplayException()</span></code>"
        },
        {
          "language": "xref",
          "code": "_PyErr_ChainExceptions()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">_PyErr_ChainExceptions()</span></code>"
        },
        {
          "language": "xref",
          "code": "_PyErr_ChainExceptions1()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">_PyErr_ChainExceptions1()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyBytesObject.ob_shash",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyBytesObject.ob_shash</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_Hash()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_Hash()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDictObject.ma_version_tag",
          "element": "<code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">PyDictObject.ma_version_tag</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_create_key()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_create_key()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_tss_alloc()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_tss_alloc()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_delete_key()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_delete_key()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_tss_free()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_tss_free()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_set_key_value()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_set_key_value()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_tss_set()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_tss_set()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_get_key_value()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_get_key_value()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_tss_get()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_tss_get()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_delete_key_value()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_delete_key_value()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_tss_delete()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_tss_delete()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThread_ReInitTLS()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThread_ReInitTLS()</span></code>"
        },
        {
          "language": "docutils",
          "code": "arm64-apple-ios",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">arm64-apple-ios</span></code>"
        },
        {
          "language": "docutils",
          "code": "arm64-apple-ios-simulator",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">arm64-apple-ios-simulator</span></code>"
        },
        {
          "language": "docutils",
          "code": "aarch64-linux-android",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">aarch64-linux-android</span></code>"
        },
        {
          "language": "docutils",
          "code": "x86_64-linux-android",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">x86_64-linux-android</span></code>"
        },
        {
          "language": "docutils",
          "code": "wasm32-wasi",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-wasi</span></code>"
        },
        {
          "language": "docutils",
          "code": "wasm32-emscripten",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-emscripten</span></code>"
        },
        {
          "language": "xref",
          "code": "--with-system-libmpdec",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--with-system-libmpdec</span></code>"
        },
        {
          "language": "docutils",
          "code": "libmpdecimal",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">libmpdecimal</span></code>"
        },
        {
          "language": "xref",
          "code": "--with-trace-refs",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--with-trace-refs</span></code>"
        },
        {
          "language": "docutils",
          "code": "python-3.13t.pc",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">python-3.13t.pc</span></code>"
        },
        {
          "language": "docutils",
          "code": "python-3.13d.pc",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">python-3.13d.pc</span></code>"
        },
        {
          "language": "docutils",
          "code": "_ctypes_test",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_ctypes_test</span></code>"
        },
        {
          "language": "docutils",
          "code": "_multiprocessing.posixshmem",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_multiprocessing.posixshmem</span></code>"
        },
        {
          "language": "docutils",
          "code": "_statistics",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_statistics</span></code>"
        },
        {
          "language": "docutils",
          "code": "_testconsole",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_testconsole</span></code>"
        },
        {
          "language": "docutils",
          "code": "_testimportmultiple",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_testimportmultiple</span></code>"
        },
        {
          "language": "xref",
          "code": "FrameType.f_locals",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">FrameType.f_locals</span></code>"
        },
        {
          "language": "xref",
          "code": "functools.partial",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">functools.partial</span></code>"
        },
        {
          "language": "xref",
          "code": "FutureWarning",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">FutureWarning</span></code>"
        },
        {
          "language": "xref",
          "code": "staticmethod()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">staticmethod()</span></code>"
        },
        {
          "language": "xref",
          "code": "getpass.getuser()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">getpass.getuser()</span></code>"
        },
        {
          "language": "xref",
          "code": "ImportError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImportError</span></code>"
        },
        {
          "language": "xref",
          "code": "gzip.GzipFile",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">gzip.GzipFile</span></code>"
        },
        {
          "language": "xref",
          "code": "zipfile.ZipFile.open()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">zipfile.ZipFile.open()</span></code>"
        },
        {
          "language": "xref",
          "code": "mailbox.Maildir",
          "element": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">mailbox.Maildir</span></code>"
        },
        {
          "language": "xref",
          "code": "pathlib.Path.glob()",
          "element": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">pathlib.Path.glob()</span></code>"
        },
        {
          "language": "xref",
          "code": "_is_main_interpreter()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">_is_main_interpreter()</span></code>"
        },
        {
          "language": "xref",
          "code": "_is_main_interpreter()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">_is_main_interpreter()</span></code>"
        },
        {
          "language": "docutils",
          "code": "HAVE_IEEEFP_H",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">HAVE_IEEEFP_H</span></code>"
        },
        {
          "language": "docutils",
          "code": "<sys/select.h>",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;sys/select.h&gt;</span></code>"
        },
        {
          "language": "docutils",
          "code": "<sys/time.h>",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;sys/time.h&gt;</span></code>"
        },
        {
          "language": "docutils",
          "code": "<sys/select.h>",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;sys/select.h&gt;</span></code>"
        },
        {
          "language": "docutils",
          "code": "<sys/time.h>",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;sys/time.h&gt;</span></code>"
        },
        {
          "language": "xref",
          "code": "gettimeofday()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">gettimeofday()</span></code>"
        },
        {
          "language": "xref",
          "code": "setitimer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">setitimer()</span></code>"
        },
        {
          "language": "docutils",
          "code": "HAVE_STDDEF_H",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">HAVE_STDDEF_H</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_LIMITED_API",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_LIMITED_API</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_BUILD_CORE",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_BUILD_CORE</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_BUILD_CORE_BUILTIN",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_BUILD_CORE_BUILTIN</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_BUILD_CORE_MODULE",
          "element": "<code class=\"xref c c-macro docutils literal notranslate\"><span class=\"pre\">Py_BUILD_CORE_MODULE</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_SAFE_BEGIN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_SAFE_BEGIN</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_SAFE_END",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_SAFE_END</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_BEGIN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_BEGIN</span></code>"
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_END",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_END</span></code>"
        },
        {
          "language": "",
          "code": "staticvoidmytype_dealloc(mytype*p){PyObject_GC_UnTrack(p);Py_TRASHCAN_SAFE_BEGIN(p);...Py_TRASHCAN_SAFE_END}",
          "element": "<pre><span></span><span class=\"n\">static</span> <span class=\"n\">void</span>\n<span class=\"n\">mytype_dealloc</span><span class=\"p\">(</span><span class=\"n\">mytype</span> <span class=\"o\">*</span><span cla..."
        },
        {
          "language": "",
          "code": "staticvoidmytype_dealloc(mytype*p){PyObject_GC_UnTrack(p);Py_TRASHCAN_BEGIN(p,mytype_dealloc)...Py_TRASHCAN_END}",
          "element": "<pre><span></span><span class=\"n\">static</span> <span class=\"n\">void</span>\n<span class=\"n\">mytype_dealloc</span><span class=\"p\">(</span><span class=\"n\">mytype</span> <span class=\"o\">*</span><span cla..."
        },
        {
          "language": "docutils",
          "code": "Py_TRASHCAN_BEGIN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">Py_TRASHCAN_BEGIN</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "FrameType.f_locals",
          "element": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">FrameType.f_locals</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_Copy()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_Copy()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_GetFrameLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_GetFrameLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_FastToLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_FastToLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_FastToLocalsWithError()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_FastToLocalsWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_GetLocals()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_LocalsToFast()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_LocalsToFast()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyFrame_GetLocals()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyFrame_GetLocals()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyDict_Pop()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyDict_Pop()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_Pop()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_Pop()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_PopString()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_PopString()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyDict_GetItemWithError()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyDict_GetItemWithError()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyDict_GetItemRef()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyDict_GetItemRef()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyErr_WriteUnraisableMsg()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyErr_WriteUnraisableMsg()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyErr_FormatUnraisable()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyErr_FormatUnraisable()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyEval_SetTrace()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyEval_SetTrace()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_SetTrace()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_SetTrace()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyEval_SetTraceAllThreads()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyEval_SetTraceAllThreads()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyList_Extend()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyList_Extend()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyList_Extend()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyList_Extend()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyLong_AsInt()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyLong_AsInt()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyLong_AsInt()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyLong_AsInt()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyMem_RawStrdup()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyMem_RawStrdup()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyMem_Strdup()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyMem_Strdup()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyObject_ClearManagedDict()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyObject_ClearManagedDict()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_ClearManagedDict()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_ClearManagedDict()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyObject_VisitManagedDict()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyObject_VisitManagedDict()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyObject_VisitManagedDict()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyObject_VisitManagedDict()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyThreadState_UncheckedGet()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyThreadState_UncheckedGet()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyThreadState_GetUnchecked()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyThreadState_GetUnchecked()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyTime_AsSecondsDouble()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyTime_AsSecondsDouble()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_AsSecondsDouble()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_AsSecondsDouble()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyTime_GetMonotonicClock()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyTime_GetMonotonicClock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_Monotonic()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_Monotonic()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_MonotonicRaw()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_MonotonicRaw()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyTime_GetPerfCounter()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyTime_GetPerfCounter()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_PerfCounter()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_PerfCounter()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_PerfCounterRaw()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_PerfCounterRaw()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyTime_GetSystemClock()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyTime_GetSystemClock()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_Time()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_Time()</span></code>"
        },
        {
          "language": "xref",
          "code": "PyTime_TimeRaw()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyTime_TimeRaw()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyTime_MAX",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyTime_MAX</span></code>"
        },
        {
          "language": "docutils",
          "code": "_PyTime_MIN",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_PyTime_MIN</span></code>"
        },
        {
          "language": "docutils",
          "code": "_Py_HashPointer()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_Py_HashPointer()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_HashPointer()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_HashPointer()</span></code>"
        },
        {
          "language": "docutils",
          "code": "_Py_IsFinalizing()",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">_Py_IsFinalizing()</span></code>"
        },
        {
          "language": "xref",
          "code": "Py_IsFinalizing()",
          "element": "<code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_IsFinalizing()</span></code>"
        },
        {
          "language": "xref",
          "code": "--with-pydebug",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--with-pydebug</span></code>"
        },
        {
          "language": "xref",
          "code": "-Xpresite=package.module",
          "element": "<code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">-X</span> <span class=\"pre\">presite=package.module</span></code>"
        },
        {
          "language": "xref",
          "code": "sys.getobjects()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys.getobjects()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.path.realpath()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.path.realpath()</span></code>"
        },
        {
          "language": "xref",
          "code": "os.path.ALLOW_MISSING",
          "element": "<code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">os.path.ALLOW_MISSING</span></code>"
        },
        {
          "language": "xref",
          "code": "FileNotFoundError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">FileNotFoundError</span></code>"
        },
        {
          "language": "xref",
          "code": "data_filter()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">data_filter()</span></code>"
        },
        {
          "language": "xref",
          "code": "extractall()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">extractall()</span></code>"
        },
        {
          "language": "xref",
          "code": "extractall()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">extractall()</span></code>"
        },
        {
          "language": "xref",
          "code": "LinkFallbackError",
          "element": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">LinkFallbackError</span></code>"
        },
        {
          "language": "xref",
          "code": "extractall()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">extractall()</span></code>"
        },
        {
          "language": "xref",
          "code": "errorlevel()",
          "element": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">errorlevel()</span></code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "What’s New In Python 3.13¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Summary – Release Highlights¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "New Features¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Other Language Changes¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "New Modules¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Improved Modules¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Optimizations¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Removed Modules And APIs¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "New Deprecations¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "CPython Bytecode Changes¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "C API Changes¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Build Changes¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Porting to Python 3.13¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Regression Test Changes¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Notable changes in 3.13.1¶",
          "id": ""
        },
        {
          "level": 2,
          "text": "Notable changes in 3.13.4¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "A better interactive interpreter¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Improved error messages¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Free-threaded CPython¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "An experimental just-in-time (JIT) compiler¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Defined mutation semantics forlocals()¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Support for mobile platforms¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "argparse¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "array¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "ast¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "asyncio¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "base64¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "compileall¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "concurrent.futures¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "configparser¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "copy¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "ctypes¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "dbm¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "dis¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "doctest¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "email¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "enum¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "fractions¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "glob¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "importlib¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "io¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "ipaddress¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "itertools¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "marshal¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "math¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "mimetypes¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "mmap¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "multiprocessing¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "os¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "os.path¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "pathlib¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "pdb¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "queue¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "random¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "re¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "shutil¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "site¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "sqlite3¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "ssl¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "statistics¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "subprocess¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "sys¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "tempfile¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "time¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "tkinter¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "traceback¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "types¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "typing¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "unicodedata¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "venv¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "warnings¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "xml¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "zipimport¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "PEP 594: Remove “dead batteries” from the standard library¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "2to3¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "builtins¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "configparser¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "importlib.metadata¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "locale¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "opcode¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "optparse¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "pathlib¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "re¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "tkinter.tix¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "turtle¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "typing¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "unittest¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "urllib¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "webbrowser¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Pending Removal in Python 3.14¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Pending Removal in Python 3.15¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Pending removal in Python 3.16¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Pending Removal in Future Versions¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "New Features¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Changed C APIs¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Limited C API Changes¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Removed C APIs¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Deprecated C APIs¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Changes in the Python API¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Changes in the C API¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "sys¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "os.path¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "tarfile¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Table of Contents",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Pending Removal in Python 3.14¶",
          "id": ""
        },
        {
          "level": 4,
          "text": "Pending Removal in Python 3.15¶",
          "id": ""
        },
        {
          "level": 4,
          "text": "Pending Removal in Future Versions¶",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731622.396078
    },
    {
      "url": "https://docs.python.org/3/whatsnew/index.html",
      "title": "What’s New in Python — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nWhat’s New in Python\n|\nTheme\nAuto\nLight\nDark\n|\nWhat’s New in Python\n¶\nThe “What’s New in Python” series of essays takes tours through the most\nimportant changes between major Python versions.  They are a “must read” for\nanyone wishing to stay up-to-date after a new release.\nWhat’s New In Python 3.13\nSummary – Release Highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nRemoved Modules And APIs\nNew Deprecations\nCPython Bytecode Changes\nC API Changes\nBuild Changes\nPorting to Python 3.13\nRegression Test Changes\nNotable changes in 3.13.1\nNotable changes in 3.13.4\nWhat’s New In Python 3.12\nSummary – Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nCPython bytecode changes\nDemos and Tools\nDeprecated\nRemoved\nPorting to Python 3.12\nBuild Changes\nC API Changes\nWhat’s New In Python 3.11\nSummary – Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nOptimizations\nFaster CPython\nCPython bytecode changes\nDeprecated\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNotable changes in 3.11.4\nNotable changes in 3.11.5\nWhat’s New In Python 3.10\nSummary – Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.10\nCPython bytecode changes\nBuild Changes\nC API Changes\nNotable security feature in 3.10.7\nNotable security feature in 3.10.8\nNotable changes in 3.10.12\nWhat’s New In Python 3.9\nSummary – Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nBuild Changes\nC API Changes\nNotable changes in Python 3.9.1\nNotable changes in Python 3.9.2\nNotable changes in Python 3.9.3\nNotable changes in Python 3.9.5\nNotable security feature in 3.9.14\nNotable changes in 3.9.17\nWhat’s New In Python 3.8\nSummary – Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.2\nNotable changes in Python 3.8.3\nNotable changes in Python 3.8.8\nNotable changes in Python 3.8.9\nNotable changes in Python 3.8.10\nNotable changes in Python 3.8.10\nNotable changes in Python 3.8.12\nNotable security feature in 3.8.14\nNotable changes in 3.8.17\nWhat’s New In Python 3.7\nSummary – Release Highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\nNotable changes in Python 3.7.11\nNotable security feature in 3.7.14\nWhat’s New In Python 3.6\nSummary – Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nRemoved\nPorting to Python 3.6\nNotable changes in Python 3.6.2\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\nNotable changes in Python 3.6.14\nWhat’s New In Python 3.5\nSummary – Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOther module-level changes\nOptimizations\nBuild and C API Changes\nDeprecated\nRemoved\nPorting to Python 3.5\nNotable changes in Python 3.5.4\nWhat’s New In Python 3.4\nSummary – Release Highlights\nNew Features\nNew Modules\nImproved Modules\nCPython Implementation Changes\nDeprecated\nRemoved\nPorting to Python 3.4\nChanged in 3.4.3\nWhat’s New In Python 3.3\nSummary – Release highlights\nPEP 405: Virtual Environments\nPEP 420: Implicit Namespace Packages\nPEP 3118: New memoryview implementation and buffer protocol documentation\nPEP 393: Flexible String Representation\nPEP 397: Python Launcher for Windows\nPEP 3151: Reworking the OS and IO exception hierarchy\nPEP 380: Syntax for Delegating to a Subgenerator\nPEP 409: Suppressing exception context\nPEP 414: Explicit Unicode literals\nPEP 3155: Qualified name for classes and functions\nPEP 412: Key-Sharing Dictionary\nPEP 362: Function Signature Object\nPEP 421: Adding sys.implementation\nUsing importlib as the Implementation of Import\nOther Language Changes\nA Finer-Grained Import Lock\nBuiltin functions and types\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nDeprecated\nPorting to Python 3.3\nWhat’s New In Python 3.2\nPEP 384: Defining a Stable ABI\nPEP 389: Argparse Command Line Parsing Module\nPEP 391:  Dictionary Based Configuration for Logging\nPEP 3148:  The\nconcurrent.futures\nmodule\nPEP 3147:  PYC Repository Directories\nPEP 3149: ABI Version Tagged .so Files\nPEP 3333: Python Web Server Gateway Interface v1.0.1\nOther Language Changes\nNew, Improved, and Deprecated Modules\nMulti-threading\nOptimizations\nUnicode\nCodecs\nDocumentation\nIDLE\nCode Repository\nBuild and C API Changes\nPorting to Python 3.2\nWhat’s New In Python 3.1\nPEP 372: Ordered Dictionaries\nPEP 378: Format Specifier for Thousands Separator\nOther Language Changes\nNew, Improved, and Deprecated Modules\nOptimizations\nIDLE\nBuild and C API Changes\nPorting to Python 3.1\nWhat’s New In Python 3.0\nCommon Stumbling Blocks\nOverview Of Syntax Changes\nChanges Already Present In Python 2.6\nLibrary Changes\nPEP 3101\n: A New Approach To String Formatting\nChanges To Exceptions\nMiscellaneous Other Changes\nBuild and C API Changes\nPerformance\nPorting To Python 3.0\nWhat’s New in Python 2.7\nThe Future for Python 2.x\nChanges to the Handling of Deprecation Warnings\nPython 3.1 Features\nPEP 372: Adding an Ordered Dictionary to collections\nPEP 378: Format Specifier for Thousands Separator\nPEP 389: The argparse Module for Parsing Command Lines\nPEP 391: Dictionary-Based Configuration For Logging\nPEP 3106: Dictionary Views\nPEP 3137: The memoryview Object\nOther Language Changes\nNew and Improved Modules\nBuild and C API Changes\nOther Changes and Fixes\nPorting to Python 2.7\nNew Features Added to Python 2.7 Maintenance Releases\nAcknowledgements\nWhat’s New in Python 2.6\nPython 3.0\nChanges to the Development Process\nPEP 343: The ‘with’ statement\nPEP 366: Explicit Relative Imports From a Main Module\nPEP 370: Per-user\nsite-packages\nDirectory\nPEP 371: The\nmultiprocessing\nPackage\nPEP 3101: Advanced String Formatting\nPEP 3105:\nprint\nAs a Function\nPEP 3110: Exception-Handling Changes\nPEP 3112: Byte Literals\nPEP 3116: New I/O Library\nPEP 3118: Revised Buffer Protocol\nPEP 3119: Abstract Base Classes\nPEP 3127: Integer Literal Support and Syntax\nPEP 3129: Class Decorators\nPEP 3141: A Type Hierarchy for Numbers\nOther Language Changes\nNew and Improved Modules\nDeprecations and Removals\nBuild and C API Changes\nPorting to Python 2.6\nAcknowledgements\nWhat’s New in Python 2.5\nPEP 308: Conditional Expressions\nPEP 309: Partial Function Application\nPEP 314: Metadata for Python Software Packages v1.1\nPEP 328: Absolute and Relative Imports\nPEP 338: Executing Modules as Scripts\nPEP 341: Unified try/except/finally\nPEP 342: New Generator Features\nPEP 343: The ‘with’ statement\nPEP 352: Exceptions as New-Style Classes\nPEP 353: Using ssize_t as the index type\nPEP 357: The ‘__index__’ method\nOther Language Changes\nNew, Improved, and Removed Modules\nBuild and C API Changes\nPorting to Python 2.5\nAcknowledgements\nWhat’s New in Python 2.4\nPEP 218: Built-In Set Objects\nPEP 237: Unifying Long Integers and Integers\nPEP 289: Generator Expressions\nPEP 292: Simpler String Substitutions\nPEP 318: Decorators for Functions and Methods\nPEP 322: Reverse Iteration\nPEP 324: New subprocess Module\nPEP 327: Decimal Data Type\nPEP 328: Multi-line Imports\nPEP 331: Locale-Independent Float/String Conversions\nOther Language Changes\nNew, Improved, and Deprecated Modules\nBuild and C API Changes\nPorting to Python 2.4\nAcknowledgements\nWhat’s New in Python 2.3\nPEP 218: A Standard Set Datatype\nPEP 255: Simple Generators\nPEP 263: Source Code Encodings\nPEP 273: Importing Modules from ZIP Archives\nPEP 277: Unicode file name support for Windows NT\nPEP 278: Universal Newline Support\nPEP 279: enumerate()\nPEP 282: The logging Package\nPEP 285: A Boolean Type\nPEP 293: Codec Error Handling Callbacks\nPEP 301: Package Index and Metadata for Distutils\nPEP 302: New Import Hooks\nPEP 305: Comma-separated Files\nPEP 307: Pickle Enhancements\nExtended Slices\nOther Language Changes\nNew, Improved, and Deprecated Modules\nPymalloc: A Specialized Object Allocator\nBuild and C API Changes\nOther Changes and Fixes\nPorting to Python 2.3\nAcknowledgements\nWhat’s New in Python 2.2\nIntroduction\nPEPs 252 and 253: Type and Class Changes\nPEP 234: Iterators\nPEP 255: Simple Generators\nPEP 237: Unifying Long Integers and Integers\nPEP 238: Changing the Division Operator\nUnicode Changes\nPEP 227: Nested Scopes\nNew and Improved Modules\nInterpreter Changes and Fixes\nOther Changes and Fixes\nAcknowledgements\nWhat’s New in Python 2.1\nIntroduction\nPEP 227: Nested Scopes\nPEP 236: __future__ Directives\nPEP 207: Rich Comparisons\nPEP 230: Warning Framework\nPEP 229: New Build System\nPEP 205: Weak References\nPEP 232: Function Attributes\nPEP 235: Importing Modules on Case-Insensitive Platforms\nPEP 217: Interactive Display Hook\nPEP 208: New Coercion Model\nPEP 241: Metadata in Python Packages\nNew and Improved Modules\nOther Changes and Fixes\nAcknowledgements\nWhat’s New in Python 2.0\nIntroduction\nWhat About Python 1.6?\nNew Development Process\nUnicode\nList Comprehensions\nAugmented Assignment\nString Methods\nGarbage Collection of Cycles\nOther Core Changes\nPorting to 2.0\nExtending/Embedding Changes\nDistutils: Making Modules Easy to Install\nXML Modules\nModule changes\nNew modules\nIDLE Improvements\nDeleted and Deprecated Modules\nAcknowledgements\nThe “Changelog” is an HTML version of the\nfile built\nfrom the contents of the\nMisc/NEWS.d\ndirectory tree, which contains\nall\nnontrivial changes\nto Python for the current version.\nChangelog\nPython next\nPython 3.13.5 final\nPython 3.13.4 final\nPython 3.13.3 final\nPython 3.13.2 final\nPython 3.13.1 final\nPython 3.13.0 final\nPython 3.13.0 release candidate 3\nPython 3.13.0 release candidate 2\nPython 3.13.0 release candidate 1\nPython 3.13.0 beta 4\nPython 3.13.0 beta 3\nPython 3.13.0 beta 2\nPython 3.13.0 beta 1\nPython 3.13.0 alpha 6\nPython 3.13.0 alpha 5\nPython 3.13.0 alpha 4\nPython 3.13.0 alpha 3\nPython 3.13.0 alpha 2\nPython 3.13.0 alpha 1\nPython 3.12.0 beta 1\nPython 3.12.0 alpha 7\nPython 3.12.0 alpha 6\nPython 3.12.0 alpha 5\nPython 3.12.0 alpha 4\nPython 3.12.0 alpha 3\nPython 3.12.0 alpha 2\nPython 3.12.0 alpha 1\nPython 3.11.0 beta 1\nPython 3.11.0 alpha 7\nPython 3.11.0 alpha 6\nPython 3.11.0 alpha 5\nPython 3.11.0 alpha 4\nPython 3.11.0 alpha 3\nPython 3.11.0 alpha 2\nPython 3.11.0 alpha 1\nPython 3.10.0 beta 1\nPython 3.10.0 alpha 7\nPython 3.10.0 alpha 6\nPython 3.10.0 alpha 5\nPython 3.10.0 alpha 4\nPython 3.10.0 alpha 3\nPython 3.10.0 alpha 2\nPython 3.10.0 alpha 1\nPython 3.9.0 beta 1\nPython 3.9.0 alpha 6\nPython 3.9.0 alpha 5\nPython 3.9.0 alpha 4\nPython 3.9.0 alpha 3\nPython 3.9.0 alpha 2\nPython 3.9.0 alpha 1\nPython 3.8.0 beta 1\nPython 3.8.0 alpha 4\nPython 3.8.0 alpha 3\nPython 3.8.0 alpha 2\nPython 3.8.0 alpha 1\nPython 3.7.0 final\nPython 3.7.0 release candidate 1\nPython 3.7.0 beta 5\nPython 3.7.0 beta 4\nPython 3.7.0 beta 3\nPython 3.7.0 beta 2\nPython 3.7.0 beta 1\nPython 3.7.0 alpha 4\nPython 3.7.0 alpha 3\nPython 3.7.0 alpha 2\nPython 3.7.0 alpha 1\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nPython 3.6.5 final\nPython 3.6.5 release candidate 1\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nPython 3.6.3 final\nPython 3.6.3 release candidate 1\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nPython 3.6.2 release candidate 1\nPython 3.6.1 final\nPython 3.6.1 release candidate 1\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nPython 3.6.0 release candidate 1\nPython 3.6.0 beta 4\nPython 3.6.0 beta 3\nPython 3.6.0 beta 2\nPython 3.6.0 beta 1\nPython 3.6.0 alpha 4\nPython 3.6.0 alpha 3\nPython 3.6.0 alpha 2\nPython 3.6.0 alpha 1\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nPython 3.5.4 final\nPython 3.5.4 release candidate 1\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nPython 3.5.2 final\nPython 3.5.2 release candidate 1\nPython 3.5.1 final\nPython 3.5.1 release candidate 1\nPython 3.5.0 final\nPython 3.5.0 release candidate 4\nPython 3.5.0 release candidate 3\nPython 3.5.0 release candidate 2\nPython 3.5.0 release candidate 1\nPython 3.5.0 beta 4\nPython 3.5.0 beta 3\nPython 3.5.0 beta 2\nPython 3.5.0 beta 1\nPython 3.5.0 alpha 4\nPython 3.5.0 alpha 3\nPython 3.5.0 alpha 2\nPython 3.5.0 alpha 1\nPrevious topic\nPython Documentation contents\nNext topic\nWhat’s New In Python 3.13\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nWhat’s New in Python\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [
        {
          "language": "docutils",
          "code": "concurrent.futures",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code>"
        },
        {
          "language": "docutils",
          "code": "site-packages",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">site-packages</span></code>"
        },
        {
          "language": "docutils",
          "code": "multiprocessing",
          "element": "<code class=\"docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "What’s New in Python¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731624.502431
    },
    {
      "url": "https://docs.python.org/3/using/index.html",
      "title": "Python Setup and Usage — Python 3.13.5 documentation",
      "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Setup and Usage\n|\nTheme\nAuto\nLight\nDark\n|\nPython Setup and Usage\n¶\nThis part of the documentation is devoted to general information on the setup\nof the Python environment on different platforms, the invocation of the\ninterpreter and things that make working with Python easier.\n1. Command line and environment\n1.1. Command line\n1.2. Environment variables\n2. Using Python on Unix platforms\n2.1. Getting and installing the latest version of Python\n2.2. Building Python\n2.3. Python-related paths and files\n2.4. Miscellaneous\n2.5. Custom OpenSSL\n3. Configure Python\n3.1. Build Requirements\n3.2. Generated files\n3.3. Configure Options\n3.4. Python Build System\n3.5. Compiler and linker flags\n4. Using Python on Windows\n4.1. The full installer\n4.2. The Microsoft Store package\n4.3. The nuget.org packages\n4.4. The embeddable package\n4.5. Alternative bundles\n4.6. Configuring Python\n4.7. UTF-8 mode\n4.8. Python Launcher for Windows\n4.9. Finding modules\n4.10. Additional modules\n4.11. Compiling Python on Windows\n4.12. Other Platforms\n5. Using Python on macOS\n5.1. Using Python for macOS from\npython.org\n5.2. Alternative Distributions\n5.3. Installing Additional Python Packages\n5.4. GUI Programming\n5.5. Advanced Topics\n5.6. Other Resources\n6. Using Python on Android\n6.1. Adding Python to an Android app\n6.2. Building a Python package for Android\n7. Using Python on iOS\n7.1. Python at runtime on iOS\n7.2. Installing Python on iOS\n7.3. App Store Compliance\n8. Editors and IDEs\n8.1. IDLE — Python editor and shell\n8.2. Other Editors and IDEs\nPrevious topic\n16.\nAppendix\nNext topic\n1.\nCommand line and environment\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Setup and Usage\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jun 23, 2025 (23:21 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Python Setup and Usage¶",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 3,
          "text": "This page",
          "id": ""
        },
        {
          "level": 3,
          "text": "Navigation",
          "id": ""
        },
        {
          "level": 4,
          "text": "Previous topic",
          "id": ""
        },
        {
          "level": 4,
          "text": "Next topic",
          "id": ""
        }
      ],
      "timestamp": 1750731626.7596521
    }
  ],
  "total_pages": 11,
  "errors": []
}