{
  "technology": "helm",
  "base_url": "https://helm.sh/docs/",
  "pages": [
    {
      "url": "https://helm.sh/docs/",
      "title": "Helm | Docs",
      "content": "Welcome\nWelcome to the\nHelm\ndocumentation. Helm is the package\nmanager for Kubernetes, and you can read detailed background information in the\nCNCF Helm Project Journey\nreport\n.\nHow the documentation is organized\nHelm has a lot of documentation. A high-level overview of how it’s organized\nwill help you know where to look for certain things:\nTutorials\ntake you by the hand through a series of steps to create\nyour first Helm chart. Start here if you’re new to Helm.\nTopic guides\ndiscuss key topics and concepts at a fairly high level\nand provide useful background information and explanation.\nCommunity Guides\ndiscuss topics centered around Helm’s community.\nStart here if you want to learn more about the development process of Helm\nitself and how you can contribute.\nHow-to guides\nare recipes. They guide you through the steps involved\nin addressing key problems and use-cases. They are more advanced than\ntutorials and assume some knowledge of how Helm works.\nQuicklinks\nQuickstart Guide\nHow to install and get started with Helm including instructions for distros, FAQs, and plugins.\nChart Guide\nPractical steps for building Helm charts—how to structure, sign, and sync your charts.\nVideo: Intro to Helm\nWatch Matt Farina and Josh Dolitsky present an introduction to Helm at KubeCon 2019.\nMigrating from v2 to v3\nRead our blog post on how to migrate from Helm v2 to Helm v3.\nHelm Security Audit\nHelm has been audited and deemed as recommended for public deployment during a third-party security audit funded by the CNCF.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Welcome",
          "id": "welcome"
        },
        {
          "level": 1,
          "text": "How the documentation is organized",
          "id": "how-the-documentation-is-organized"
        },
        {
          "level": 3,
          "text": "Quicklinks",
          "id": ""
        },
        {
          "level": 4,
          "text": "Quickstart Guide",
          "id": ""
        },
        {
          "level": 4,
          "text": "Chart Guide",
          "id": ""
        },
        {
          "level": 4,
          "text": "Video: Intro to Helm",
          "id": ""
        },
        {
          "level": 4,
          "text": "Migrating from v2 to v3",
          "id": ""
        },
        {
          "level": 4,
          "text": "Helm Security Audit",
          "id": ""
        }
      ],
      "timestamp": 1750732624.6740448
    },
    {
      "url": "https://helm.sh/docs/intro/quickstart",
      "title": "Helm | Quickstart Guide",
      "content": "Quickstart Guide\nThis guide covers how you can quickly get started using Helm.\nPrerequisites\nThe following prerequisites are required for a successful and properly secured\nuse of Helm.\nA Kubernetes cluster\nDeciding what security configurations to apply to your installation, if any\nInstalling and configuring Helm.\nInstall Kubernetes or have access to a cluster\nYou must have Kubernetes installed. For the latest release of Helm, we\nrecommend the latest stable release of Kubernetes, which in most cases is the\nsecond-latest minor release.\nYou should also have a local configured copy of\nkubectl\n.\nSee the\nHelm Version Support Policy\nfor the maximum version skew supported between Helm and Kubernetes.\nInstall Helm\nDownload a binary release of the Helm client. You can use tools like\nhomebrew\n,\nor look at\nthe official releases page\n.\nFor more details, or for other options, see\nthe installation guide\n.\nInitialize a Helm Chart Repository\nOnce you have Helm ready, you can add a chart repository. Check\nArtifact\nHub\nfor available Helm chart\nrepositories.\n$\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nOnce this is installed, you will be able to list the charts you can install:\n$\nhelm search repo bitnami\nNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTION\nbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...\nbitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...\nbitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Server\nbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...\n#\n... and many more\nInstall an Example Chart\nTo install a chart, you can run the\nhelm install\ncommand. Helm has several\nways to find and install a chart, but the easiest is to use the\nbitnami\ncharts.\n$\nhelm repo update\n# Make sure we get the latest list of charts\n$\nhelm install bitnami/mysql --generate-name\nNAME: mysql-1612624192\nLAST DEPLOYED: Sat Feb  6 16:09:56 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES: ...\nIn the example above, the\nbitnami/mysql\nchart was released, and the name of\nour new release is\nmysql-1612624192\n.\nYou get a simple idea of the features of this MySQL chart by running\nhelm show chart bitnami/mysql\n. Or you could run\nhelm show all bitnami/mysql\nto get all\ninformation about the chart.\nWhenever you install a chart, a new release is created. So one chart can be\ninstalled multiple times into the same cluster. And each can be independently\nmanaged and upgraded.\nThe\nhelm install\ncommand is a very powerful command with many capabilities. To\nlearn more about it, check out the\nUsing Helm Guide\nLearn About Releases\nIt's easy to see what has been released using Helm:\n$\nhelm list\nNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSION\nmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23\nThe\nhelm list\n(or\nhelm ls\n) function will show you a list of all deployed releases.\nUninstall a Release\nTo uninstall a release, use the\nhelm uninstall\ncommand:\n$\nhelm uninstall mysql-1612624192\nrelease \"mysql-1612624192\" uninstalled\nThis will uninstall\nmysql-1612624192\nfrom Kubernetes, which will remove all\nresources associated with the release as well as the release history.\nIf the flag\n--keep-history\nis provided, release history will be kept. You will\nbe able to request information about that release:\n$\nhelm status mysql-1612624192\nStatus: UNINSTALLED\n...\nBecause Helm tracks your releases even after you've uninstalled them, you can\naudit a cluster's history, and even undelete a release (with\nhelm rollback\n).\nReading the Help Text\nTo learn more about the available Helm commands, use\nhelm help\nor type a\ncommand followed by the\n-h\nflag:\n$\nhelm get -h\nNext\nInstalling Helm →",
      "code_examples": [
        {
          "language": "",
          "code": "$helm repo add bitnami https://charts.bitnami.com/bitnami",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add bitnami https://charts.bitnami.com/bitnami",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add bitnami https://charts.bitnami.com/bitnami\n</span></..."
        },
        {
          "language": "",
          "code": "$helm search repo bitnamiNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTIONbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...bitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...bitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Serverbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...#... and many more",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm search repo bitnamiNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTIONbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...bitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...bitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Serverbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...#... and many more",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm search repo bitnami\n</span></span><span style=\"display:flex\">..."
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "$helm repo update# Make sure we get the latest list of charts$helm install bitnami/mysql --generate-nameNAME: mysql-1612624192LAST DEPLOYED: Sat Feb  6 16:09:56 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES: ...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo update# Make sure we get the latest list of charts$helm install bitnami/mysql --generate-nameNAME: mysql-1612624192LAST DEPLOYED: Sat Feb  6 16:09:56 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES: ...",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo update              <span style=\"color:#09f;font-style:i..."
        },
        {
          "language": "",
          "code": "bitnami/mysql",
          "element": "<code>bitnami/mysql</code>"
        },
        {
          "language": "",
          "code": "mysql-1612624192",
          "element": "<code>mysql-1612624192</code>"
        },
        {
          "language": "",
          "code": "helm show chart bitnami/mysql",
          "element": "<code>helm show chart bitnami/mysql</code>"
        },
        {
          "language": "",
          "code": "helm show all bitnami/mysql",
          "element": "<code>helm show all bitnami/mysql</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "$helm listNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSIONmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm listNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSIONmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm list\n</span></span><span style=\"display:flex\"><span><span sty..."
        },
        {
          "language": "",
          "code": "helm uninstall",
          "element": "<code>helm uninstall</code>"
        },
        {
          "language": "",
          "code": "$helm uninstall mysql-1612624192release \"mysql-1612624192\" uninstalled",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm uninstall mysql-1612624192release \"mysql-1612624192\" uninstalled",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm uninstall mysql-1612624192\n</span></span><span style=\"display..."
        },
        {
          "language": "",
          "code": "mysql-1612624192",
          "element": "<code>mysql-1612624192</code>"
        },
        {
          "language": "",
          "code": "--keep-history",
          "element": "<code>--keep-history</code>"
        },
        {
          "language": "",
          "code": "$helm status mysql-1612624192Status: UNINSTALLED...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm status mysql-1612624192Status: UNINSTALLED...",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm status mysql-1612624192\n</span></span><span style=\"display:fl..."
        },
        {
          "language": "",
          "code": "helm rollback",
          "element": "<code>helm rollback</code>"
        },
        {
          "language": "",
          "code": "$helm get -h",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm get -h",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm get -h\n</span></span></code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Quickstart Guide",
          "id": ""
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Install Helm",
          "id": "install-helm"
        },
        {
          "level": 2,
          "text": "Initialize a Helm Chart Repository",
          "id": "initialize-a-helm-chart-repository"
        },
        {
          "level": 2,
          "text": "Install an Example Chart",
          "id": "install-an-example-chart"
        },
        {
          "level": 2,
          "text": "Learn About Releases",
          "id": "learn-about-releases"
        },
        {
          "level": 2,
          "text": "Uninstall a Release",
          "id": "uninstall-a-release"
        },
        {
          "level": 2,
          "text": "Reading the Help Text",
          "id": "reading-the-help-text"
        },
        {
          "level": 3,
          "text": "Install Kubernetes or have access to a cluster",
          "id": "install-kubernetes-or-have-access-to-a-cluster"
        }
      ],
      "timestamp": 1750732627.349314
    },
    {
      "url": "https://helm.sh/docs/intro/",
      "title": "Helm | Docs",
      "content": "Introduction to Helm\nAre you new to Helm? This is the place to start!\nQuicklinks\nQuickstart Guide\nHow to install and get started with Helm including instructions for distros, FAQs, and plugins.\nInstalling Helm\nLearn how to install and get running with Helm.\nUsing Helm\nExplains the basics of Helm.\nCheat Sheet\nHelm cheatsheet",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Introduction to Helm",
          "id": "introduction-to-helm"
        },
        {
          "level": 3,
          "text": "Quicklinks",
          "id": ""
        },
        {
          "level": 4,
          "text": "Quickstart Guide",
          "id": ""
        },
        {
          "level": 4,
          "text": "Installing Helm",
          "id": ""
        },
        {
          "level": 4,
          "text": "Using Helm",
          "id": ""
        },
        {
          "level": 4,
          "text": "Cheat Sheet",
          "id": ""
        }
      ],
      "timestamp": 1750732629.744045
    },
    {
      "url": "https://helm.sh/docs/intro/quickstart/",
      "title": "Helm | Quickstart Guide",
      "content": "Quickstart Guide\nThis guide covers how you can quickly get started using Helm.\nPrerequisites\nThe following prerequisites are required for a successful and properly secured\nuse of Helm.\nA Kubernetes cluster\nDeciding what security configurations to apply to your installation, if any\nInstalling and configuring Helm.\nInstall Kubernetes or have access to a cluster\nYou must have Kubernetes installed. For the latest release of Helm, we\nrecommend the latest stable release of Kubernetes, which in most cases is the\nsecond-latest minor release.\nYou should also have a local configured copy of\nkubectl\n.\nSee the\nHelm Version Support Policy\nfor the maximum version skew supported between Helm and Kubernetes.\nInstall Helm\nDownload a binary release of the Helm client. You can use tools like\nhomebrew\n,\nor look at\nthe official releases page\n.\nFor more details, or for other options, see\nthe installation guide\n.\nInitialize a Helm Chart Repository\nOnce you have Helm ready, you can add a chart repository. Check\nArtifact\nHub\nfor available Helm chart\nrepositories.\n$\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nOnce this is installed, you will be able to list the charts you can install:\n$\nhelm search repo bitnami\nNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTION\nbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...\nbitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...\nbitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Server\nbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...\n#\n... and many more\nInstall an Example Chart\nTo install a chart, you can run the\nhelm install\ncommand. Helm has several\nways to find and install a chart, but the easiest is to use the\nbitnami\ncharts.\n$\nhelm repo update\n# Make sure we get the latest list of charts\n$\nhelm install bitnami/mysql --generate-name\nNAME: mysql-1612624192\nLAST DEPLOYED: Sat Feb  6 16:09:56 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES: ...\nIn the example above, the\nbitnami/mysql\nchart was released, and the name of\nour new release is\nmysql-1612624192\n.\nYou get a simple idea of the features of this MySQL chart by running\nhelm show chart bitnami/mysql\n. Or you could run\nhelm show all bitnami/mysql\nto get all\ninformation about the chart.\nWhenever you install a chart, a new release is created. So one chart can be\ninstalled multiple times into the same cluster. And each can be independently\nmanaged and upgraded.\nThe\nhelm install\ncommand is a very powerful command with many capabilities. To\nlearn more about it, check out the\nUsing Helm Guide\nLearn About Releases\nIt's easy to see what has been released using Helm:\n$\nhelm list\nNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSION\nmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23\nThe\nhelm list\n(or\nhelm ls\n) function will show you a list of all deployed releases.\nUninstall a Release\nTo uninstall a release, use the\nhelm uninstall\ncommand:\n$\nhelm uninstall mysql-1612624192\nrelease \"mysql-1612624192\" uninstalled\nThis will uninstall\nmysql-1612624192\nfrom Kubernetes, which will remove all\nresources associated with the release as well as the release history.\nIf the flag\n--keep-history\nis provided, release history will be kept. You will\nbe able to request information about that release:\n$\nhelm status mysql-1612624192\nStatus: UNINSTALLED\n...\nBecause Helm tracks your releases even after you've uninstalled them, you can\naudit a cluster's history, and even undelete a release (with\nhelm rollback\n).\nReading the Help Text\nTo learn more about the available Helm commands, use\nhelm help\nor type a\ncommand followed by the\n-h\nflag:\n$\nhelm get -h\nNext\nInstalling Helm →",
      "code_examples": [
        {
          "language": "",
          "code": "$helm repo add bitnami https://charts.bitnami.com/bitnami",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add bitnami https://charts.bitnami.com/bitnami",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add bitnami https://charts.bitnami.com/bitnami\n</span></..."
        },
        {
          "language": "",
          "code": "$helm search repo bitnamiNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTIONbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...bitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...bitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Serverbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...#... and many more",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm search repo bitnamiNAME                             \tCHART VERSION\tAPP VERSION  \tDESCRIPTIONbitnami/bitnami-common           \t0.0.9        \t0.0.9        \tDEPRECATED Chart with custom templates used in ...bitnami/airflow                  \t8.0.2        \t2.0.0        \tApache Airflow is a platform to programmaticall...bitnami/apache                   \t8.2.3        \t2.4.46       \tChart for Apache HTTP Serverbitnami/aspnet-core              \t1.2.3        \t3.1.9        \tASP.NET Core is an open-source framework create...#... and many more",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm search repo bitnami\n</span></span><span style=\"display:flex\">..."
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "$helm repo update# Make sure we get the latest list of charts$helm install bitnami/mysql --generate-nameNAME: mysql-1612624192LAST DEPLOYED: Sat Feb  6 16:09:56 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES: ...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo update# Make sure we get the latest list of charts$helm install bitnami/mysql --generate-nameNAME: mysql-1612624192LAST DEPLOYED: Sat Feb  6 16:09:56 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES: ...",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo update              <span style=\"color:#09f;font-style:i..."
        },
        {
          "language": "",
          "code": "bitnami/mysql",
          "element": "<code>bitnami/mysql</code>"
        },
        {
          "language": "",
          "code": "mysql-1612624192",
          "element": "<code>mysql-1612624192</code>"
        },
        {
          "language": "",
          "code": "helm show chart bitnami/mysql",
          "element": "<code>helm show chart bitnami/mysql</code>"
        },
        {
          "language": "",
          "code": "helm show all bitnami/mysql",
          "element": "<code>helm show all bitnami/mysql</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "$helm listNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSIONmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm listNAME            \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSIONmysql-1612624192\tdefault  \t1       \t2021-02-06 16:09:56.283059 +0100 CET\tdeployed\tmysql-8.3.0\t8.0.23",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm list\n</span></span><span style=\"display:flex\"><span><span sty..."
        },
        {
          "language": "",
          "code": "helm uninstall",
          "element": "<code>helm uninstall</code>"
        },
        {
          "language": "",
          "code": "$helm uninstall mysql-1612624192release \"mysql-1612624192\" uninstalled",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm uninstall mysql-1612624192release \"mysql-1612624192\" uninstalled",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm uninstall mysql-1612624192\n</span></span><span style=\"display..."
        },
        {
          "language": "",
          "code": "mysql-1612624192",
          "element": "<code>mysql-1612624192</code>"
        },
        {
          "language": "",
          "code": "--keep-history",
          "element": "<code>--keep-history</code>"
        },
        {
          "language": "",
          "code": "$helm status mysql-1612624192Status: UNINSTALLED...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm status mysql-1612624192Status: UNINSTALLED...",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm status mysql-1612624192\n</span></span><span style=\"display:fl..."
        },
        {
          "language": "",
          "code": "helm rollback",
          "element": "<code>helm rollback</code>"
        },
        {
          "language": "",
          "code": "$helm get -h",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm get -h",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm get -h\n</span></span></code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Quickstart Guide",
          "id": ""
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Install Helm",
          "id": "install-helm"
        },
        {
          "level": 2,
          "text": "Initialize a Helm Chart Repository",
          "id": "initialize-a-helm-chart-repository"
        },
        {
          "level": 2,
          "text": "Install an Example Chart",
          "id": "install-an-example-chart"
        },
        {
          "level": 2,
          "text": "Learn About Releases",
          "id": "learn-about-releases"
        },
        {
          "level": 2,
          "text": "Uninstall a Release",
          "id": "uninstall-a-release"
        },
        {
          "level": 2,
          "text": "Reading the Help Text",
          "id": "reading-the-help-text"
        },
        {
          "level": 3,
          "text": "Install Kubernetes or have access to a cluster",
          "id": "install-kubernetes-or-have-access-to-a-cluster"
        }
      ],
      "timestamp": 1750732631.8076758
    },
    {
      "url": "https://helm.sh/docs/intro/install/",
      "title": "Helm | Installing Helm",
      "content": "Installing Helm\nThis guide shows how to install the Helm CLI. Helm can be installed either from\nsource, or from pre-built binary releases.\nFrom The Helm Project\nThe Helm project provides two ways to fetch and install Helm. These are the\nofficial methods to get Helm releases. In addition to that, the Helm community\nprovides methods to install Helm through different package managers.\nInstallation through those methods can be found below the official methods.\nFrom the Binary Releases\nEvery\nrelease\nof Helm provides binary\nreleases for a variety of OSes. These binary versions can be manually downloaded\nand installed.\nDownload your\ndesired version\nUnpack it (\ntar -zxvf helm-v3.0.0-linux-amd64.tar.gz\n)\nFind the\nhelm\nbinary in the unpacked directory, and move it to its desired\ndestination (\nmv linux-amd64/helm /usr/local/bin/helm\n)\nFrom there, you should be able to run the client and\nadd the stable\nchart repository\n:\nhelm help\n.\nNote:\nHelm automated tests are performed for Linux AMD64 only during\nGitHub Actions builds and releases. Testing of other OSes are the responsibility of\nthe community requesting Helm for the OS in question.\nFrom Script\nHelm now has an installer script that will automatically grab the latest version\nof Helm and\ninstall it\nlocally\n.\nYou can fetch that script, and then execute it locally. It's well documented so\nthat you can read through it and understand what it is doing before you run it.\n$\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n$\nchmod\n700\nget_helm.sh\n$\n./get_helm.sh\nYes, you can\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\nif\nyou want to live on the edge.\nThrough Package Managers\nThe Helm community provides the ability to install Helm through operating system\npackage managers. These are not supported by the Helm project and are not\nconsidered trusted 3rd parties.\nFrom Homebrew (macOS)\nMembers of the Helm community have contributed a Helm formula build to Homebrew.\nThis formula is generally up to date.\nbrew install helm\n(Note: There is also a formula for emacs-helm, which is a different project.)\nFrom Chocolatey (Windows)\nMembers of the Helm community have contributed a\nHelm\npackage\nbuild to\nChocolatey\n. This package is generally up to date.\nchoco install kubernetes-helm\nFrom Scoop (Windows)\nMembers of the Helm community have contributed a\nHelm\npackage\nbuild to\nScoop\n. This package is generally up to date.\nscoop install helm\nFrom Winget (Windows)\nMembers of the Helm community have contributed a\nHelm\npackage\nbuild to\nWinget\n. This package is generally up to date.\nwinget install Helm.Helm\nFrom Apt (Debian/Ubuntu)\nMembers of the Helm community have contributed a\nHelm\npackage\nfor Apt. This package is\ngenerally up to date.\ncurl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\nFrom dnf/yum (fedora)\nSince Fedora 35, helm is available on the official repository.\nYou can install helm with invoking:\nsudo dnf install helm\nFrom Snap\nThe\nSnapcrafters\ncommunity maintains the Snap\nversion of the\nHelm package\n:\nsudo snap install helm --classic\nFrom pkg (FreeBSD)\nMembers of the FreeBSD community have contributed a\nHelm\npackage\nbuild to the\nFreeBSD Ports Collection\n.\nThis package is generally up to date.\npkg install helm\nDevelopment Builds\nIn addition to releases you can download or install development snapshots of\nHelm.\nFrom Canary Builds\n\"Canary\" builds are versions of the Helm software that are built from the latest\nmain\nbranch. They are not official releases, and may not be stable. However,\nthey offer the opportunity to test the cutting edge features.\nCanary Helm binaries are stored at\nget.helm.sh\n. Here are\nlinks to the common builds:\nLinux AMD64\nmacOS AMD64\nExperimental Windows\nAMD64\nFrom Source (Linux, macOS)\nBuilding Helm from source is slightly more work, but is the best way to go if\nyou want to test the latest (pre-release) Helm version.\nYou must have a working Go environment.\n$\ngit clone https://github.com/helm/helm.git\n$\ncd\nhelm\n$\nmake\nIf required, it will fetch the dependencies and cache them, and validate\nconfiguration. It will then compile\nhelm\nand place it in\nbin/helm\n.\nConclusion\nIn most cases, installation is as simple as getting a pre-built\nhelm\nbinary.\nThis document covers additional cases for those who want to do more\nsophisticated things with Helm.\nOnce you have the Helm Client successfully installed, you can move on to using\nHelm to manage charts and\nadd the stable\nchart repository\n.\nPrev\n← Quickstart Guide\nNext\nUsing Helm →",
      "code_examples": [
        {
          "language": "",
          "code": "tar -zxvf helm-v3.0.0-linux-amd64.tar.gz",
          "element": "<code>tar -zxvf helm-v3.0.0-linux-amd64.tar.gz</code>"
        },
        {
          "language": "",
          "code": "mv linux-amd64/helm /usr/local/bin/helm",
          "element": "<code>mv linux-amd64/helm /usr/local/bin/helm</code>"
        },
        {
          "language": "",
          "code": "$curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3$chmod700get_helm.sh$./get_helm.sh",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3$chmod700get_helm.sh$./get_helm.sh",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/h..."
        },
        {
          "language": "",
          "code": "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash",
          "element": "<code>curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash</code>"
        },
        {
          "language": "",
          "code": "brew install helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "brew install helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">brew install helm\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "choco install kubernetes-helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "choco install kubernetes-helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">choco install kubernetes-helm\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "scoop install helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "scoop install helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">scoop install helm\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "winget install Helm.Helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "winget install Helm.Helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">winget install Helm.Helm\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/nullsudo apt-get install apt-transport-https --yesecho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.listsudo apt-get updatesudo apt-get install helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/nullsudo apt-get install apt-transport-https --yesecho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.listsudo apt-get updatesudo apt-get install helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/h..."
        },
        {
          "language": "",
          "code": "sudo dnf install helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "sudo dnf install helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">sudo dnf install helm\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "sudo snap install helm --classic",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "sudo snap install helm --classic",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">sudo snap install helm --classic\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "pkg install helm",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "pkg install helm",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">pkg install helm\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "$git clone https://github.com/helm/helm.git$cdhelm$make",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$git clone https://github.com/helm/helm.git$cdhelm$make",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> git clone https://github.com/helm/helm.git\n</span></span><span sty..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Installing Helm",
          "id": ""
        },
        {
          "level": 2,
          "text": "From The Helm Project",
          "id": "from-the-helm-project"
        },
        {
          "level": 2,
          "text": "Through Package Managers",
          "id": "through-package-managers"
        },
        {
          "level": 2,
          "text": "Conclusion",
          "id": "conclusion"
        },
        {
          "level": 3,
          "text": "From the Binary Releases",
          "id": "from-the-binary-releases"
        },
        {
          "level": 3,
          "text": "From Script",
          "id": "from-script"
        },
        {
          "level": 3,
          "text": "From Homebrew (macOS)",
          "id": "from-homebrew-macos"
        },
        {
          "level": 3,
          "text": "From Chocolatey (Windows)",
          "id": "from-chocolatey-windows"
        },
        {
          "level": 3,
          "text": "From Scoop (Windows)",
          "id": "from-scoop-windows"
        },
        {
          "level": 3,
          "text": "From Winget (Windows)",
          "id": "from-winget-windows"
        },
        {
          "level": 3,
          "text": "From Apt (Debian/Ubuntu)",
          "id": "from-apt-debianubuntu"
        },
        {
          "level": 3,
          "text": "From dnf/yum (fedora)",
          "id": "from-dnfyum-fedora"
        },
        {
          "level": 3,
          "text": "From Snap",
          "id": "from-snap"
        },
        {
          "level": 3,
          "text": "From pkg (FreeBSD)",
          "id": "from-pkg-freebsd"
        },
        {
          "level": 3,
          "text": "Development Builds",
          "id": "development-builds"
        },
        {
          "level": 3,
          "text": "From Canary Builds",
          "id": "from-canary-builds"
        },
        {
          "level": 3,
          "text": "From Source (Linux, macOS)",
          "id": "from-source-linux-macos"
        }
      ],
      "timestamp": 1750732634.0978959
    },
    {
      "url": "https://helm.sh/docs/intro/using_helm/",
      "title": "Helm | Using Helm",
      "content": "Using Helm\nThis guide explains the basics of using Helm to manage packages on your\nKubernetes cluster. It assumes that you have already\ninstalled\nthe Helm client.\nIf you are simply interested in running a few quick commands, you may wish to\nbegin with the\nQuickstart Guide\n. This chapter\ncovers the particulars of Helm commands, and explains how to use Helm.\nThree Big Concepts\nA\nChart\nis a Helm package. It contains all of the resource definitions\nnecessary to run an application, tool, or service inside of a Kubernetes\ncluster. Think of it like the Kubernetes equivalent of a Homebrew formula, an\nApt dpkg, or a Yum RPM file.\nA\nRepository\nis the place where charts can be collected and shared. It's like\nPerl's\nCPAN archive\nor the\nFedora Package\nDatabase\n, but for Kubernetes packages.\nA\nRelease\nis an instance of a chart running in a Kubernetes cluster. One chart\ncan often be installed many times into the same cluster. And each time it is\ninstalled, a new\nrelease\nis created. Consider a MySQL chart. If you want two\ndatabases running in your cluster, you can install that chart twice. Each one\nwill have its own\nrelease\n, which will in turn have its own\nrelease name\n.\nWith these concepts in mind, we can now explain Helm like this:\nHelm installs\ncharts\ninto Kubernetes, creating a new\nrelease\nfor each\ninstallation. And to find new charts, you can search Helm chart\nrepositories\n.\n'helm search': Finding Charts\nHelm comes with a powerful search command. It can be used to search two\ndifferent types of source:\nhelm search hub\nsearches\nthe Artifact Hub\n, which\nlists helm charts from dozens of different repositories.\nhelm search repo\nsearches the repositories that you have added to your local\nhelm client (with\nhelm repo add\n). This search is done over local data, and\nno public network connection is needed.\nYou can find publicly available charts by running\nhelm search hub\n:\n$\nhelm search hub wordpress\nURL                                                 CHART VERSION APP VERSION DESCRIPTION\nhttps://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Chart\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...\nThe above searches for all\nwordpress\ncharts on Artifact Hub.\nWith no filter,\nhelm search hub\nshows you all of the available charts.\nhelm search hub\nexposes the URL to the location on\nartifacthub.io\nbut not the actual Helm repo.\nhelm search hub --list-repo-url\nexposes the actual Helm repo URL which comes in handy when you are looking to add a new repo:\nhelm repo add [NAME] [URL]\n.\nUsing\nhelm search repo\n, you can find the names of the charts in repositories\nyou have already added:\n$\nhelm repo add brigade https://brigadecore.github.io/charts\n\"brigade\" has been added to your repositories\n$\nhelm search repo brigade\nNAME                          CHART VERSION APP VERSION DESCRIPTION\nbrigade/brigade               1.3.2         v1.2.1      Brigade provides event-driven scripting of Kube...\nbrigade/brigade-github-app    0.4.1         v0.2.1      The Brigade GitHub App, an advanced gateway for...\nbrigade/brigade-github-oauth  0.2.0         v0.20.0     The legacy OAuth GitHub Gateway for Brigade\nbrigade/brigade-k8s-gateway   0.1.0                     A Helm chart for Kubernetes\nbrigade/brigade-project       1.0.0         v1.0.0      Create a Brigade project\nbrigade/kashti                0.4.0         v0.4.0      A Helm chart for Kubernetes\nHelm search uses a fuzzy string matching algorithm, so you can type parts of\nwords or phrases:\n$\nhelm search repo kash\nNAME            CHART VERSION APP VERSION DESCRIPTION\nbrigade/kashti  0.4.0         v0.4.0      A Helm chart for Kubernetes\nSearch is a good way to find available packages. Once you have found a package\nyou want to install, you can use\nhelm install\nto install it.\n'helm install': Installing a Package\nTo install a new package, use the\nhelm install\ncommand. At its simplest, it\ntakes two arguments: A release name that you pick, and the name of the chart you\nwant to install.\n$\nhelm install happy-panda bitnami/wordpress\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\nYour WordPress site can be accessed through the following DNS name from within your cluster:\nhappy-panda-wordpress.default.svc.cluster.local (port 80)\nTo access your WordPress site from outside the cluster follow the steps below:\n1. Get the WordPress URL by running these commands:\nNOTE: It may take a few minutes for the LoadBalancer IP to be available.\nWatch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\nexport SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\necho \"WordPress URL: http://$SERVICE_IP/\"\necho \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n2. Open a browser and access WordPress using the obtained URL.\n3. Login with the following credentials below to see your blog:\necho Username: user\necho Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\nNow the\nwordpress\nchart is installed. Note that installing a chart creates a\nnew\nrelease\nobject. The release above is named\nhappy-panda\n. (If you want\nHelm to generate a name for you, leave off the release name and use\n--generate-name\n.)\nDuring installation, the\nhelm\nclient will print useful information about which\nresources were created, what the state of the release is, and also whether there\nare additional configuration steps you can or should take.\nHelm installs resources in the following order:\nNamespace\nNetworkPolicy\nResourceQuota\nLimitRange\nPodSecurityPolicy\nPodDisruptionBudget\nServiceAccount\nSecret\nSecretList\nConfigMap\nStorageClass\nPersistentVolume\nPersistentVolumeClaim\nCustomResourceDefinition\nClusterRole\nClusterRoleList\nClusterRoleBinding\nClusterRoleBindingList\nRole\nRoleList\nRoleBinding\nRoleBindingList\nService\nDaemonSet\nPod\nReplicationController\nReplicaSet\nDeployment\nHorizontalPodAutoscaler\nStatefulSet\nJob\nCronJob\nIngress\nAPIService\nHelm does not wait until all of the resources are running before it exits. Many\ncharts require Docker images that are over 600MB in size, and may take a long\ntime to install into the cluster.\nTo keep track of a release's state, or to re-read configuration information, you\ncan use\nhelm status\n:\n$\nhelm status happy-panda\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\nYour WordPress site can be accessed through the following DNS name from within your cluster:\nhappy-panda-wordpress.default.svc.cluster.local (port 80)\nTo access your WordPress site from outside the cluster follow the steps below:\n1. Get the WordPress URL by running these commands:\nNOTE: It may take a few minutes for the LoadBalancer IP to be available.\nWatch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\nexport SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\necho \"WordPress URL: http://$SERVICE_IP/\"\necho \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n2. Open a browser and access WordPress using the obtained URL.\n3. Login with the following credentials below to see your blog:\necho Username: user\necho Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\nThe above shows the current state of your release.\nCustomizing the Chart Before Installing\nInstalling the way we have here will only use the default configuration options\nfor this chart. Many times, you will want to customize the chart to use your\npreferred configuration.\nTo see what options are configurable on a chart, use\nhelm show values\n:\n$\nhelm show values bitnami/wordpress\n#\n# Global Docker image parameters\n#\n# Please, note that this will override the image parameters, including dependencies, configured to use the global value\n#\n# Current available global Docker image parameters: imageRegistry and imagePullSecrets\n#\n#\n#\nglobal:\n#\nimageRegistry: myRegistryName\n#\nimagePullSecrets:\n#\n- myRegistryKeySecretName\n#\nstorageClass: myStorageClass\n#\n# Bitnami WordPress image version\n#\n# ref: https://hub.docker.com/r/bitnami/wordpress/tags/\n#\n#\nimage:\nregistry: docker.io\nrepository: bitnami/wordpress\ntag: 5.6.0-debian-10-r35\n[..]\nYou can then override any of these settings in a YAML formatted file, and then\npass that file during installation.\n$\necho\n'{mariadb.auth.database: user0db, mariadb.auth.username: user0}'\n> values.yaml\n$\nhelm install -f values.yaml bitnami/wordpress --generate-name\nThe above will create a default MariaDB user with the name\nuser0\n, and grant\nthis user access to a newly created\nuser0db\ndatabase, but will accept all the\nrest of the defaults for that chart.\nThere are two ways to pass configuration data during install:\n--values\n(or\n-f\n): Specify a YAML file with overrides. This can be\nspecified multiple times and the rightmost file will take precedence\n--set\n: Specify overrides on the command line.\nIf both are used,\n--set\nvalues are merged into\n--values\nwith higher\nprecedence. Overrides specified with\n--set\nare persisted in a Secret.\nValues that have been\n--set\ncan be viewed for a given release with\nhelm get values <release-name>\n. Values that have been\n--set\ncan be cleared by running\nhelm upgrade\nwith\n--reset-values\nspecified.\nThe Format and Limitations of\n--set\nThe\n--set\noption takes zero or more name/value pairs. At its simplest, it is\nused like this:\n--set name=value\n. The YAML equivalent of that is:\nname\n:\nvalue\nMultiple values are separated by\n,\ncharacters. So\n--set a=b,c=d\nbecomes:\na\n:\nb\nc\n:\nd\nMore complex expressions are supported. For example,\n--set outer.inner=value\nis translated into this:\nouter\n:\ninner\n:\nvalue\nLists can be expressed by enclosing values in\n{\nand\n}\n. For example,\n--set name={a, b, c}\ntranslates to:\nname\n:\n- a\n- b\n- c\nCertain name/key can be set to be\nnull\nor to be an empty array\n[]\n. For example,\n--set name=[],a=null\ntranslates\nname\n:\n- a\n- b\n- c\na\n:\nb\nto\nname\n:\n[]\na\n:\nnull\nAs of Helm 2.5.0, it is possible to access list items using an array index\nsyntax. For example,\n--set servers[0].port=80\nbecomes:\nservers\n:\n-\nport\n:\n80\nMultiple values can be set this way. The line\n--set servers[0].port=80,servers[0].host=example\nbecomes:\nservers\n:\n-\nport\n:\n80\nhost\n:\nexample\nSometimes you need to use special characters in your\n--set\nlines. You can use\na backslash to escape the characters;\n--set name=value1\\,value2\nwill become:\nname\n:\n\"value1,value2\"\nSimilarly, you can escape dot sequences as well, which may come in handy when\ncharts use the\ntoYaml\nfunction to parse annotations, labels and node\nselectors. The syntax for\n--set nodeSelector.\"kubernetes\\.io/role\"=master\nbecomes:\nnodeSelector\n:\nkubernetes.io/role\n:\nmaster\nDeeply nested data structures can be difficult to express using\n--set\n. Chart\ndesigners are encouraged to consider the\n--set\nusage when designing the format\nof a\nvalues.yaml\nfile (read more about\nValues Files\n).\nMore Installation Methods\nThe\nhelm install\ncommand can install from several sources:\nA chart repository (as we've seen above)\nA local chart archive (\nhelm install foo foo-0.1.1.tgz\n)\nAn unpacked chart directory (\nhelm install foo path/to/foo\n)\nA full URL (\nhelm install foo https://example.com/charts/foo-1.2.3.tgz\n)\n'helm upgrade' and 'helm rollback': Upgrading a Release, and Recovering on Failure\nWhen a new version of a chart is released, or when you want to change the\nconfiguration of your release, you can use the\nhelm upgrade\ncommand.\nAn upgrade takes an existing release and upgrades it according to the\ninformation you provide. Because Kubernetes charts can be large and complex,\nHelm tries to perform the least invasive upgrade. It will only update things\nthat have changed since the last release.\n$\nhelm upgrade -f panda.yaml happy-panda bitnami/wordpress\nIn the above case, the\nhappy-panda\nrelease is upgraded with the same chart,\nbut with a new YAML file:\nmariadb.auth.username\n:\nuser1\nWe can use\nhelm get values\nto see whether that new setting took effect.\n$\nhelm get values happy-panda\nmariadb:\nauth:\nusername: user1\nThe\nhelm get\ncommand is a useful tool for looking at a release in the cluster.\nAnd as we can see above, it shows that our new values from\npanda.yaml\nwere\ndeployed to the cluster.\nNow, if something does not go as planned during a release, it is easy to roll\nback to a previous release using\nhelm rollback [RELEASE] [REVISION]\n.\n$\nhelm rollback happy-panda\n1\nThe above rolls back our happy-panda to its very first release version. A\nrelease version is an incremental revision. Every time an install, upgrade, or\nrollback happens, the revision number is incremented by 1. The first revision\nnumber is always 1. And we can use\nhelm history [RELEASE]\nto see revision\nnumbers for a certain release.\nHelpful Options for Install/Upgrade/Rollback\nThere are several other helpful options you can specify for customizing the\nbehavior of Helm during an install/upgrade/rollback. Please note that this is\nnot a full list of cli flags. To see a description of all flags, just run\nhelm <command> --help\n.\n--timeout\n: A\nGo duration\nvalue\nto wait for Kubernetes commands to complete. This defaults to\n5m0s\n.\n--wait\n: Waits until all Pods are in a ready state, PVCs are bound,\nDeployments have minimum (\nDesired\nminus\nmaxUnavailable\n) Pods in ready\nstate and Services have an IP address (and Ingress if a\nLoadBalancer\n) before\nmarking the release as successful. It will wait for as long as the\n--timeout\nvalue. If timeout is reached, the release will be marked as\nFAILED\n. Note: In\nscenarios where Deployment has\nreplicas\nset to 1 and\nmaxUnavailable\nis not\nset to 0 as part of rolling update strategy,\n--wait\nwill return as ready as\nit has satisfied the minimum Pod in ready condition.\n--no-hooks\n: This skips running hooks for the command\n--recreate-pods\n(only available for\nupgrade\nand\nrollback\n): This flag\nwill cause all pods to be recreated (with the exception of pods belonging to\ndeployments). (DEPRECATED in Helm 3)\n'helm uninstall': Uninstalling a Release\nWhen it is time to uninstall a release from the cluster, use the\nhelm uninstall\ncommand:\n$\nhelm uninstall happy-panda\nThis will remove the release from the cluster. You can see all of your currently\ndeployed releases with the\nhelm list\ncommand:\n$\nhelm list\nNAME            VERSION UPDATED                         STATUS          CHART\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\nFrom the output above, we can see that the\nhappy-panda\nrelease was\nuninstalled.\nIn previous versions of Helm, when a release was deleted, a record of its\ndeletion would remain. In Helm 3, deletion removes the release record as well.\nIf you wish to keep a deletion release record, use\nhelm uninstall --keep-history\n. Using\nhelm list --uninstalled\nwill only show releases that\nwere uninstalled with the\n--keep-history\nflag.\nThe\nhelm list --all\nflag will show you all release records that Helm has\nretained, including records for failed or deleted items (if\n--keep-history\nwas\nspecified):\n$\nhelm list --all\nNAME            VERSION UPDATED                         STATUS          CHART\nhappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     wordpress-10.4.5.6.0\ninky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0\nkindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0\nNote that because releases are now deleted by default, it is no longer possible\nto rollback an uninstalled resource.\n'helm repo': Working with Repositories\nHelm 3 no longer ships with a default chart repository. The\nhelm repo\ncommand\ngroup provides commands to add, list, and remove repositories.\nYou can see which repositories are configured using\nhelm repo list\n:\n$\nhelm repo list\nNAME            URL\nstable          https://charts.helm.sh/stable\nmumoshu         https://mumoshu.github.io/charts\nAnd new repositories can be added with\nhelm repo add [NAME] [URL]\n:\n$\nhelm repo add dev https://example.com/dev-charts\nBecause chart repositories change frequently, at any point you can make sure\nyour Helm client is up to date by running\nhelm repo update\n.\nRepositories can be removed with\nhelm repo remove\n.\nCreating Your Own Charts\nThe\nChart Development Guide\nexplains how\nto develop your own charts. But you can get started quickly by using the\nhelm create\ncommand:\n$\nhelm create deis-workflow\nCreating deis-workflow\nNow there is a chart in\n./deis-workflow\n. You can edit it and create your own\ntemplates.\nAs you edit your chart, you can validate that it is well-formed by running\nhelm lint\n.\nWhen it's time to package the chart up for distribution, you can run the\nhelm package\ncommand:\n$\nhelm package deis-workflow\ndeis-workflow-0.1.0.tgz\nAnd that chart can now easily be installed by\nhelm install\n:\n$\nhelm install deis-workflow ./deis-workflow-0.1.0.tgz\n...\nCharts that are packaged can be loaded into chart repositories. See the\ndocumentation for\nHelm chart\nrepositories\nfor more details.\nConclusion\nThis chapter has covered the basic usage patterns of the\nhelm\nclient,\nincluding searching, installation, upgrading, and uninstalling. It has also\ncovered useful utility commands like\nhelm status\n,\nhelm get\n, and\nhelm repo\n.\nFor more information on these commands, take a look at Helm's built-in help:\nhelm help\n.\nIn the\nnext chapter\n, we look at the process of developing charts.\nPrev\n← Installing Helm\nNext\nCheat Sheet →",
      "code_examples": [
        {
          "language": "",
          "code": "helm search hub",
          "element": "<code>helm search hub</code>"
        },
        {
          "language": "",
          "code": "helm search repo",
          "element": "<code>helm search repo</code>"
        },
        {
          "language": "",
          "code": "helm repo add",
          "element": "<code>helm repo add</code>"
        },
        {
          "language": "",
          "code": "helm search hub",
          "element": "<code>helm search hub</code>"
        },
        {
          "language": "",
          "code": "$helm search hub wordpressURL                                                 CHART VERSION APP VERSION DESCRIPTIONhttps://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...https://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Charthttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm search hub wordpressURL                                                 CHART VERSION APP VERSION DESCRIPTIONhttps://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...https://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Charthttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm search hub wordpress\n</span></span><span style=\"display:flex\"..."
        },
        {
          "language": "",
          "code": "helm search hub",
          "element": "<code>helm search hub</code>"
        },
        {
          "language": "",
          "code": "helm search hub",
          "element": "<code>helm search hub</code>"
        },
        {
          "language": "",
          "code": "helm search hub --list-repo-url",
          "element": "<code>helm search hub --list-repo-url</code>"
        },
        {
          "language": "",
          "code": "helm repo add [NAME] [URL]",
          "element": "<code>helm repo add [NAME] [URL]</code>"
        },
        {
          "language": "",
          "code": "helm search repo",
          "element": "<code>helm search repo</code>"
        },
        {
          "language": "",
          "code": "$helm repo add brigade https://brigadecore.github.io/charts\"brigade\" has been added to your repositories$helm search repo brigadeNAME                          CHART VERSION APP VERSION DESCRIPTIONbrigade/brigade               1.3.2         v1.2.1      Brigade provides event-driven scripting of Kube...brigade/brigade-github-app    0.4.1         v0.2.1      The Brigade GitHub App, an advanced gateway for...brigade/brigade-github-oauth  0.2.0         v0.20.0     The legacy OAuth GitHub Gateway for Brigadebrigade/brigade-k8s-gateway   0.1.0                     A Helm chart for Kubernetesbrigade/brigade-project       1.0.0         v1.0.0      Create a Brigade projectbrigade/kashti                0.4.0         v0.4.0      A Helm chart for Kubernetes",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add brigade https://brigadecore.github.io/charts\"brigade\" has been added to your repositories$helm search repo brigadeNAME                          CHART VERSION APP VERSION DESCRIPTIONbrigade/brigade               1.3.2         v1.2.1      Brigade provides event-driven scripting of Kube...brigade/brigade-github-app    0.4.1         v0.2.1      The Brigade GitHub App, an advanced gateway for...brigade/brigade-github-oauth  0.2.0         v0.20.0     The legacy OAuth GitHub Gateway for Brigadebrigade/brigade-k8s-gateway   0.1.0                     A Helm chart for Kubernetesbrigade/brigade-project       1.0.0         v1.0.0      Create a Brigade projectbrigade/kashti                0.4.0         v0.4.0      A Helm chart for Kubernetes",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add brigade https://brigadecore.github.io/charts\n</span>..."
        },
        {
          "language": "",
          "code": "$helm search repo kashNAME            CHART VERSION APP VERSION DESCRIPTIONbrigade/kashti  0.4.0         v0.4.0      A Helm chart for Kubernetes",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm search repo kashNAME            CHART VERSION APP VERSION DESCRIPTIONbrigade/kashti  0.4.0         v0.4.0      A Helm chart for Kubernetes",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm search repo kash\n</span></span><span style=\"display:flex\"><sp..."
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "$helm install happy-panda bitnami/wordpressNAME: happy-pandaLAST DEPLOYED: Tue Jan 26 10:27:17 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1NOTES:** Please be patient while the chart is being deployed **Your WordPress site can be accessed through the following DNS name from within your cluster:happy-panda-wordpress.default.svc.cluster.local (port 80)To access your WordPress site from outside the cluster follow the steps below:1. Get the WordPress URL by running these commands:NOTE: It may take a few minutes for the LoadBalancer IP to be available.Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")echo \"WordPress URL: http://$SERVICE_IP/\"echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"2. Open a browser and access WordPress using the obtained URL.3. Login with the following credentials below to see your blog:echo Username: userecho Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install happy-panda bitnami/wordpressNAME: happy-pandaLAST DEPLOYED: Tue Jan 26 10:27:17 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1NOTES:** Please be patient while the chart is being deployed **Your WordPress site can be accessed through the following DNS name from within your cluster:happy-panda-wordpress.default.svc.cluster.local (port 80)To access your WordPress site from outside the cluster follow the steps below:1. Get the WordPress URL by running these commands:NOTE: It may take a few minutes for the LoadBalancer IP to be available.Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")echo \"WordPress URL: http://$SERVICE_IP/\"echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"2. Open a browser and access WordPress using the obtained URL.3. Login with the following credentials below to see your blog:echo Username: userecho Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install happy-panda bitnami/wordpress\n</span></span><span sty..."
        },
        {
          "language": "",
          "code": "happy-panda",
          "element": "<code>happy-panda</code>"
        },
        {
          "language": "",
          "code": "--generate-name",
          "element": "<code>--generate-name</code>"
        },
        {
          "language": "",
          "code": "helm status",
          "element": "<code>helm status</code>"
        },
        {
          "language": "",
          "code": "$helm status happy-pandaNAME: happy-pandaLAST DEPLOYED: Tue Jan 26 10:27:17 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1NOTES:** Please be patient while the chart is being deployed **Your WordPress site can be accessed through the following DNS name from within your cluster:happy-panda-wordpress.default.svc.cluster.local (port 80)To access your WordPress site from outside the cluster follow the steps below:1. Get the WordPress URL by running these commands:NOTE: It may take a few minutes for the LoadBalancer IP to be available.Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")echo \"WordPress URL: http://$SERVICE_IP/\"echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"2. Open a browser and access WordPress using the obtained URL.3. Login with the following credentials below to see your blog:echo Username: userecho Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm status happy-pandaNAME: happy-pandaLAST DEPLOYED: Tue Jan 26 10:27:17 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1NOTES:** Please be patient while the chart is being deployed **Your WordPress site can be accessed through the following DNS name from within your cluster:happy-panda-wordpress.default.svc.cluster.local (port 80)To access your WordPress site from outside the cluster follow the steps below:1. Get the WordPress URL by running these commands:NOTE: It may take a few minutes for the LoadBalancer IP to be available.Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")echo \"WordPress URL: http://$SERVICE_IP/\"echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"2. Open a browser and access WordPress using the obtained URL.3. Login with the following credentials below to see your blog:echo Username: userecho Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm status happy-panda\n</span></span><span style=\"display:flex\"><..."
        },
        {
          "language": "",
          "code": "helm show values",
          "element": "<code>helm show values</code>"
        },
        {
          "language": "",
          "code": "$helm show values bitnami/wordpress## Global Docker image parameters## Please, note that this will override the image parameters, including dependencies, configured to use the global value## Current available global Docker image parameters: imageRegistry and imagePullSecrets###global:#imageRegistry: myRegistryName#imagePullSecrets:#- myRegistryKeySecretName#storageClass: myStorageClass## Bitnami WordPress image version## ref: https://hub.docker.com/r/bitnami/wordpress/tags/##image:registry: docker.iorepository: bitnami/wordpresstag: 5.6.0-debian-10-r35[..]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm show values bitnami/wordpress## Global Docker image parameters## Please, note that this will override the image parameters, including dependencies, configured to use the global value## Current available global Docker image parameters: imageRegistry and imagePullSecrets###global:#imageRegistry: myRegistryName#imagePullSecrets:#- myRegistryKeySecretName#storageClass: myStorageClass## Bitnami WordPress image version## ref: https://hub.docker.com/r/bitnami/wordpress/tags/##image:registry: docker.iorepository: bitnami/wordpresstag: 5.6.0-debian-10-r35[..]",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm show values bitnami/wordpress\n</span></span><span style=\"disp..."
        },
        {
          "language": "",
          "code": "$echo'{mariadb.auth.database: user0db, mariadb.auth.username: user0}'> values.yaml$helm install -f values.yaml bitnami/wordpress --generate-name",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$echo'{mariadb.auth.database: user0db, mariadb.auth.username: user0}'> values.yaml$helm install -f values.yaml bitnami/wordpress --generate-name",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> <span style=\"color:#366\">echo</span> <span style=\"color:#c30\">'{ma..."
        },
        {
          "language": "",
          "code": "helm get values <release-name>",
          "element": "<code>helm get values &lt;release-name&gt;</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "--reset-values",
          "element": "<code>--reset-values</code>"
        },
        {
          "language": "",
          "code": "--set name=value",
          "element": "<code>--set name=value</code>"
        },
        {
          "language": "",
          "code": "--set a=b,c=d",
          "element": "<code>--set a=b,c=d</code>"
        },
        {
          "language": "",
          "code": "--set outer.inner=value",
          "element": "<code>--set outer.inner=value</code>"
        },
        {
          "language": "",
          "code": "outer:inner:value",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "outer:inner:value",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">outer</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:..."
        },
        {
          "language": "",
          "code": "--set name={a, b, c}",
          "element": "<code>--set name={a, b, c}</code>"
        },
        {
          "language": "",
          "code": "name:- a- b- c",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:- a- b- c",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:f..."
        },
        {
          "language": "",
          "code": "--set name=[],a=null",
          "element": "<code>--set name=[],a=null</code>"
        },
        {
          "language": "",
          "code": "name:- a- b- ca:b",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:- a- b- ca:b",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:f..."
        },
        {
          "language": "",
          "code": "name:[]a:null",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:[]a:null",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>[]<span style=\"color:#bbb\">\n</span><..."
        },
        {
          "language": "",
          "code": "--set servers[0].port=80",
          "element": "<code>--set servers[0].port=80</code>"
        },
        {
          "language": "",
          "code": "servers:-port:80",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "servers:-port:80",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">servers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"displa..."
        },
        {
          "language": "",
          "code": "--set servers[0].port=80,servers[0].host=example",
          "element": "<code>--set servers[0].port=80,servers[0].host=example</code>"
        },
        {
          "language": "",
          "code": "servers:-port:80host:example",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "servers:-port:80host:example",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">servers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"displa..."
        },
        {
          "language": "",
          "code": "--set name=value1\\,value2",
          "element": "<code>--set name=value1\\,value2</code>"
        },
        {
          "language": "",
          "code": "name:\"value1,value2\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:\"value1,value2\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"value1,val..."
        },
        {
          "language": "",
          "code": "--set nodeSelector.\"kubernetes\\.io/role\"=master",
          "element": "<code>--set nodeSelector.\"kubernetes\\.io/role\"=master</code>"
        },
        {
          "language": "",
          "code": "nodeSelector:kubernetes.io/role:master",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "nodeSelector:kubernetes.io/role:master",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">nodeSelector</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"d..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm install foo foo-0.1.1.tgz",
          "element": "<code>helm install foo foo-0.1.1.tgz</code>"
        },
        {
          "language": "",
          "code": "helm install foo path/to/foo",
          "element": "<code>helm install foo path/to/foo</code>"
        },
        {
          "language": "",
          "code": "helm install foo https://example.com/charts/foo-1.2.3.tgz",
          "element": "<code>helm install foo https://example.com/charts/foo-1.2.3.tgz</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "$helm upgrade -f panda.yaml happy-panda bitnami/wordpress",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm upgrade -f panda.yaml happy-panda bitnami/wordpress",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm upgrade -f panda.yaml happy-panda bitnami/wordpress\n</span></..."
        },
        {
          "language": "",
          "code": "happy-panda",
          "element": "<code>happy-panda</code>"
        },
        {
          "language": "",
          "code": "mariadb.auth.username:user1",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "mariadb.auth.username:user1",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">mariadb.auth.username</span>:<span style=\"color:#bbb\"> </span>user1<span style=\"c..."
        },
        {
          "language": "",
          "code": "helm get values",
          "element": "<code>helm get values</code>"
        },
        {
          "language": "",
          "code": "$helm get values happy-pandamariadb:auth:username: user1",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm get values happy-pandamariadb:auth:username: user1",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm get values happy-panda\n</span></span><span style=\"display:fle..."
        },
        {
          "language": "",
          "code": "helm rollback [RELEASE] [REVISION]",
          "element": "<code>helm rollback [RELEASE] [REVISION]</code>"
        },
        {
          "language": "",
          "code": "$helm rollback happy-panda1",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm rollback happy-panda1",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm rollback happy-panda <span style=\"color:#f60\">1</span>\n</span..."
        },
        {
          "language": "",
          "code": "helm history [RELEASE]",
          "element": "<code>helm history [RELEASE]</code>"
        },
        {
          "language": "",
          "code": "helm <command> --help",
          "element": "<code>helm &lt;command&gt; --help</code>"
        },
        {
          "language": "",
          "code": "maxUnavailable",
          "element": "<code>maxUnavailable</code>"
        },
        {
          "language": "",
          "code": "LoadBalancer",
          "element": "<code>LoadBalancer</code>"
        },
        {
          "language": "",
          "code": "maxUnavailable",
          "element": "<code>maxUnavailable</code>"
        },
        {
          "language": "",
          "code": "--recreate-pods",
          "element": "<code>--recreate-pods</code>"
        },
        {
          "language": "",
          "code": "helm uninstall",
          "element": "<code>helm uninstall</code>"
        },
        {
          "language": "",
          "code": "$helm uninstall happy-panda",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm uninstall happy-panda",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm uninstall happy-panda\n</span></span></code>"
        },
        {
          "language": "",
          "code": "$helm listNAME            VERSION UPDATED                         STATUS          CHARTinky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm listNAME            VERSION UPDATED                         STATUS          CHARTinky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm list\n</span></span><span style=\"display:flex\"><span><span sty..."
        },
        {
          "language": "",
          "code": "happy-panda",
          "element": "<code>happy-panda</code>"
        },
        {
          "language": "",
          "code": "helm uninstall --keep-history",
          "element": "<code>helm uninstall --keep-history</code>"
        },
        {
          "language": "",
          "code": "helm list --uninstalled",
          "element": "<code>helm list --uninstalled</code>"
        },
        {
          "language": "",
          "code": "--keep-history",
          "element": "<code>--keep-history</code>"
        },
        {
          "language": "",
          "code": "helm list --all",
          "element": "<code>helm list --all</code>"
        },
        {
          "language": "",
          "code": "--keep-history",
          "element": "<code>--keep-history</code>"
        },
        {
          "language": "",
          "code": "$helm list --allNAME            VERSION UPDATED                         STATUS          CHARThappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     wordpress-10.4.5.6.0inky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0kindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm list --allNAME            VERSION UPDATED                         STATUS          CHARThappy-panda     2       Wed Sep 28 12:47:54 2016        UNINSTALLED     wordpress-10.4.5.6.0inky-cat        1       Wed Sep 28 12:59:46 2016        DEPLOYED        alpine-0.1.0kindred-angelf  2       Tue Sep 27 16:16:10 2016        UNINSTALLED     alpine-0.1.0",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span>  helm list --all\n</span></span><span style=\"display:flex\"><span><s..."
        },
        {
          "language": "",
          "code": "helm repo list",
          "element": "<code>helm repo list</code>"
        },
        {
          "language": "",
          "code": "$helm repo listNAME            URLstable          https://charts.helm.sh/stablemumoshu         https://mumoshu.github.io/charts",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo listNAME            URLstable          https://charts.helm.sh/stablemumoshu         https://mumoshu.github.io/charts",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo list\n</span></span><span style=\"display:flex\"><span><spa..."
        },
        {
          "language": "",
          "code": "helm repo add [NAME] [URL]",
          "element": "<code>helm repo add [NAME] [URL]</code>"
        },
        {
          "language": "",
          "code": "$helm repo add dev https://example.com/dev-charts",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add dev https://example.com/dev-charts",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add dev https://example.com/dev-charts\n</span></span></c..."
        },
        {
          "language": "",
          "code": "helm repo update",
          "element": "<code>helm repo update</code>"
        },
        {
          "language": "",
          "code": "helm repo remove",
          "element": "<code>helm repo remove</code>"
        },
        {
          "language": "",
          "code": "helm create",
          "element": "<code>helm create</code>"
        },
        {
          "language": "",
          "code": "$helm create deis-workflowCreating deis-workflow",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create deis-workflowCreating deis-workflow",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create deis-workflow\n</span></span><span style=\"display:flex\"..."
        },
        {
          "language": "",
          "code": "./deis-workflow",
          "element": "<code>./deis-workflow</code>"
        },
        {
          "language": "",
          "code": "helm package",
          "element": "<code>helm package</code>"
        },
        {
          "language": "",
          "code": "$helm package deis-workflowdeis-workflow-0.1.0.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm package deis-workflowdeis-workflow-0.1.0.tgz",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm package deis-workflow\n</span></span><span style=\"display:flex..."
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "$helm install deis-workflow ./deis-workflow-0.1.0.tgz...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install deis-workflow ./deis-workflow-0.1.0.tgz...",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install deis-workflow ./deis-workflow-0.1.0.tgz\n</span></span..."
        },
        {
          "language": "",
          "code": "helm status",
          "element": "<code>helm status</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Using Helm",
          "id": ""
        },
        {
          "level": 2,
          "text": "Three Big Concepts",
          "id": "three-big-concepts"
        },
        {
          "level": 2,
          "text": "'helm search': Finding Charts",
          "id": "helm-search-finding-charts"
        },
        {
          "level": 2,
          "text": "'helm install': Installing a Package",
          "id": "helm-install-installing-a-package"
        },
        {
          "level": 2,
          "text": "'helm upgrade' and 'helm rollback': Upgrading a Release, and Recovering on Failure",
          "id": "helm-upgrade-and-helm-rollback-upgrading-a-release-and-recovering-on-failure"
        },
        {
          "level": 2,
          "text": "Helpful Options for Install/Upgrade/Rollback",
          "id": "helpful-options-for-installupgraderollback"
        },
        {
          "level": 2,
          "text": "'helm uninstall': Uninstalling a Release",
          "id": "helm-uninstall-uninstalling-a-release"
        },
        {
          "level": 2,
          "text": "'helm repo': Working with Repositories",
          "id": "helm-repo-working-with-repositories"
        },
        {
          "level": 2,
          "text": "Creating Your Own Charts",
          "id": "creating-your-own-charts"
        },
        {
          "level": 2,
          "text": "Conclusion",
          "id": "conclusion"
        },
        {
          "level": 3,
          "text": "Customizing the Chart Before Installing",
          "id": "customizing-the-chart-before-installing"
        },
        {
          "level": 3,
          "text": "More Installation Methods",
          "id": "more-installation-methods"
        },
        {
          "level": 4,
          "text": "The Format and Limitations of--set",
          "id": "the-format-and-limitations-of---set"
        }
      ],
      "timestamp": 1750732636.963501
    },
    {
      "url": "https://helm.sh/docs/intro/cheatsheet/",
      "title": "Helm | Cheat Sheet",
      "content": "Cheat Sheet\nHelm cheatsheet featuring all the necessary commands required to manage an application through Helm.\nBasic interpretations/context\nChart:\nIt is the name of your chart in case it has been pulled and untarred.\nIt is <repo_name>/<chart_name> in case the repository has been added but chart not pulled.\nIt is the URL/Absolute path to the chart.\nName:\nIt is the name you want to give to your current helm chart installation.\nRelease:\nIs the name you assigned to an installation instance.\nRevision:\nIs the value from the Helm history command\nRepo-name:\nThe name of a repository.\nDIR:\nDirectory name/path\nChart Management\nhelm create <name>\n# Creates a chart directory along with the common files and directories used in a chart.\nhelm package <chart-path>\n# Packages a chart into a versioned chart archive file.\nhelm lint <chart>\n# Run tests to examine a chart and identify possible issues:\nhelm show all <chart>\n# Inspect a chart and list its contents:\nhelm show values <chart>\n# Displays the contents of the values.yaml file\nhelm pull <chart>\n# Download/pull chart\nhelm pull <chart> --untar\n=\ntrue\n# If set to true, will untar the chart after downloading it\nhelm pull <chart> --verify\n# Verify the package before using it\nhelm pull <chart> --version <number>\n# Default-latest is used, specify a version constraint for the chart version to use\nhelm dependency list <chart>\n# Display a list of a chart’s dependencies:\nInstall and Uninstall Apps\nhelm install <name> <chart>\n# Install the chart with a name\nhelm install <name> <chart> --namespace <namespace>\n# Install the chart in a specific namespace\nhelm install <name> <chart> --set\nkey1\n=\nval1,key2\n=\nval2\n# Set values on the command line (can specify multiple or separate values with commas)\nhelm install <name> <chart> --values <yaml-file/url>\n# Install the chart with your specified values\nhelm install <name> <chart> --dry-run --debug\n# Run a test installation to validate chart (p)\nhelm install <name> <chart> --verify\n# Verify the package before using it\nhelm install <name> <chart> --dependency-update\n# update dependencies if they are missing before installing the chart\nhelm uninstall <name>\n# Uninstall a release\nPerform App Upgrade and Rollback\nhelm upgrade <release> <chart>\n# Upgrade a release\nhelm upgrade <release> <chart> --atomic\n# If set, upgrade process rolls back changes made in case of failed upgrade.\nhelm upgrade <release> <chart> --dependency-update\n# update dependencies if they are missing before installing the chart\nhelm upgrade <release> <chart> --version <version_number>\n# specify a version constraint for the chart version to use\nhelm upgrade <release> <chart> --values\n# specify values in a YAML file or a URL (can specify multiple)\nhelm upgrade <release> <chart> --set\nkey1\n=\nval1,key2\n=\nval2\n# Set values on the command line (can specify multiple or separate valuese)\nhelm upgrade <release> <chart> --force\n# Force resource updates through a replacement strategy\nhelm rollback <release> <revision>\n# Roll back a release to a specific revision\nhelm rollback <release> <revision>  --cleanup-on-fail\n# Allow deletion of new resources created in this rollback when rollback fails\nList, Add, Remove, and Update Repositories\nhelm repo add <repo-name> <url>\n# Add a repository from the internet:\nhelm repo list\n# List added chart repositories\nhelm repo update\n# Update information of available charts locally from chart repositories\nhelm repo remove <repo_name>\n# Remove one or more chart repositories\nhelm repo index <DIR>\n# Read the current directory and generate an index file based on the charts found.\nhelm repo index <DIR> --merge\n# Merge the generated index with an existing index file\nhelm search repo <keyword>\n# Search repositories for a keyword in charts\nhelm search hub <keyword>\n# Search for charts in the Artifact Hub or your own hub instance\nHelm Release monitoring\nhelm list\n# Lists all of the releases for a specified namespace, uses current namespace context if namespace not specified\nhelm list --all\n# Show all releases without any filter applied, can use -a\nhelm list --all-namespaces\n# List releases across all namespaces, we can use -A\nhelm list -l\nkey1\n=\nvalue1,key2\n=\nvalue2\n# Selector (label query) to filter on, supports '=', '==', and '!='\nhelm list --date\n# Sort by release date\nhelm list --deployed\n# Show deployed releases. If no other is specified, this will be automatically enabled\nhelm list --pending\n# Show pending releases\nhelm list --failed\n# Show failed releases\nhelm list --uninstalled\n# Show uninstalled releases (if 'helm uninstall --keep-history' was used)\nhelm list --superseded\n# Show superseded releases\nhelm list -o yaml\n# Prints the output in the specified format. Allowed values: table, json, yaml (default table)\nhelm status <release>\n# This command shows the status of a named release.\nhelm status <release> --revision <number>\n# if set, display the status of the named release with revision\nhelm\nhistory\n<release>\n# Historical revisions for a given release.\nhelm env\n# Env prints out all the environment information in use by Helm.\nDownload Release Information\nhelm get all <release>\n# A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.\nhelm get hooks <release>\n# This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\\n' separator.\nhelm get manifest <release>\n# A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.\nhelm get notes <release>\n# Shows notes provided by the chart of a named release.\nhelm get values <release>\n# Downloads a values file for a given release. use -o to format output\nPlugin Management\nhelm plugin install <path/url>\n# Install plugins\nhelm plugin list\n# View a list of all installed plugins\nhelm plugin update <plugin>\n# Update plugins\nhelm plugin uninstall <plugin>\n# Uninstall a plugin\nPrev\n← Using Helm",
      "code_examples": [
        {
          "language": "",
          "code": "helm create <name># Creates a chart directory along with the common files and directories used in a chart.helm package <chart-path># Packages a chart into a versioned chart archive file.helm lint <chart># Run tests to examine a chart and identify possible issues:helm show all <chart># Inspect a chart and list its contents:helm show values <chart># Displays the contents of the values.yaml filehelm pull <chart># Download/pull charthelm pull <chart> --untar=true# If set to true, will untar the chart after downloading ithelm pull <chart> --verify# Verify the package before using ithelm pull <chart> --version <number># Default-latest is used, specify a version constraint for the chart version to usehelm dependency list <chart># Display a list of a chart’s dependencies:",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm create &lt;name&gt;      ..."
        },
        {
          "language": "language-bash",
          "code": "helm create <name># Creates a chart directory along with the common files and directories used in a chart.helm package <chart-path># Packages a chart into a versioned chart archive file.helm lint <chart># Run tests to examine a chart and identify possible issues:helm show all <chart># Inspect a chart and list its contents:helm show values <chart># Displays the contents of the values.yaml filehelm pull <chart># Download/pull charthelm pull <chart> --untar=true# If set to true, will untar the chart after downloading ithelm pull <chart> --verify# Verify the package before using ithelm pull <chart> --version <number># Default-latest is used, specify a version constraint for the chart version to usehelm dependency list <chart># Display a list of a chart’s dependencies:",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm create &lt;name&gt;                      <span style=\"color:#09f;font-style:italic\"># Creates a chart directory along..."
        },
        {
          "language": "",
          "code": "helm install <name> <chart># Install the chart with a namehelm install <name> <chart> --namespace <namespace># Install the chart in a specific namespacehelm install <name> <chart> --setkey1=val1,key2=val2# Set values on the command line (can specify multiple or separate values with commas)helm install <name> <chart> --values <yaml-file/url># Install the chart with your specified valueshelm install <name> <chart> --dry-run --debug# Run a test installation to validate chart (p)helm install <name> <chart> --verify# Verify the package before using ithelm install <name> <chart> --dependency-update# update dependencies if they are missing before installing the charthelm uninstall <name># Uninstall a release",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm install &lt;name&gt; &lt;..."
        },
        {
          "language": "language-bash",
          "code": "helm install <name> <chart># Install the chart with a namehelm install <name> <chart> --namespace <namespace># Install the chart in a specific namespacehelm install <name> <chart> --setkey1=val1,key2=val2# Set values on the command line (can specify multiple or separate values with commas)helm install <name> <chart> --values <yaml-file/url># Install the chart with your specified valueshelm install <name> <chart> --dry-run --debug# Run a test installation to validate chart (p)helm install <name> <chart> --verify# Verify the package before using ithelm install <name> <chart> --dependency-update# update dependencies if they are missing before installing the charthelm uninstall <name># Uninstall a release",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm install &lt;name&gt; &lt;chart&gt;                           <span style=\"color:#09f;font-style:italic\"># Install the..."
        },
        {
          "language": "",
          "code": "helm upgrade <release> <chart># Upgrade a releasehelm upgrade <release> <chart> --atomic# If set, upgrade process rolls back changes made in case of failed upgrade.helm upgrade <release> <chart> --dependency-update# update dependencies if they are missing before installing the charthelm upgrade <release> <chart> --version <version_number># specify a version constraint for the chart version to usehelm upgrade <release> <chart> --values# specify values in a YAML file or a URL (can specify multiple)helm upgrade <release> <chart> --setkey1=val1,key2=val2# Set values on the command line (can specify multiple or separate valuese)helm upgrade <release> <chart> --force# Force resource updates through a replacement strategyhelm rollback <release> <revision># Roll back a release to a specific revisionhelm rollback <release> <revision>  --cleanup-on-fail# Allow deletion of new resources created in this rollback when rollback fails",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm upgrade &lt;release&gt; &..."
        },
        {
          "language": "language-bash",
          "code": "helm upgrade <release> <chart># Upgrade a releasehelm upgrade <release> <chart> --atomic# If set, upgrade process rolls back changes made in case of failed upgrade.helm upgrade <release> <chart> --dependency-update# update dependencies if they are missing before installing the charthelm upgrade <release> <chart> --version <version_number># specify a version constraint for the chart version to usehelm upgrade <release> <chart> --values# specify values in a YAML file or a URL (can specify multiple)helm upgrade <release> <chart> --setkey1=val1,key2=val2# Set values on the command line (can specify multiple or separate valuese)helm upgrade <release> <chart> --force# Force resource updates through a replacement strategyhelm rollback <release> <revision># Roll back a release to a specific revisionhelm rollback <release> <revision>  --cleanup-on-fail# Allow deletion of new resources created in this rollback when rollback fails",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm upgrade &lt;release&gt; &lt;chart&gt;                            <span style=\"color:#09f;font-style:italic\"># Upgrade..."
        },
        {
          "language": "",
          "code": "helm repo add <repo-name> <url># Add a repository from the internet:helm repo list# List added chart repositorieshelm repo update# Update information of available charts locally from chart repositorieshelm repo remove <repo_name># Remove one or more chart repositorieshelm repo index <DIR># Read the current directory and generate an index file based on the charts found.helm repo index <DIR> --merge# Merge the generated index with an existing index filehelm search repo <keyword># Search repositories for a keyword in chartshelm search hub <keyword># Search for charts in the Artifact Hub or your own hub instance",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm repo add &lt;repo-name&gt..."
        },
        {
          "language": "language-bash",
          "code": "helm repo add <repo-name> <url># Add a repository from the internet:helm repo list# List added chart repositorieshelm repo update# Update information of available charts locally from chart repositorieshelm repo remove <repo_name># Remove one or more chart repositorieshelm repo index <DIR># Read the current directory and generate an index file based on the charts found.helm repo index <DIR> --merge# Merge the generated index with an existing index filehelm search repo <keyword># Search repositories for a keyword in chartshelm search hub <keyword># Search for charts in the Artifact Hub or your own hub instance",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm repo add &lt;repo-name&gt; &lt;url&gt;   <span style=\"color:#09f;font-style:italic\"># Add a repository from the inter..."
        },
        {
          "language": "",
          "code": "helm list# Lists all of the releases for a specified namespace, uses current namespace context if namespace not specifiedhelm list --all# Show all releases without any filter applied, can use -ahelm list --all-namespaces# List releases across all namespaces, we can use -Ahelm list -lkey1=value1,key2=value2# Selector (label query) to filter on, supports '=', '==', and '!='helm list --date# Sort by release datehelm list --deployed# Show deployed releases. If no other is specified, this will be automatically enabledhelm list --pending# Show pending releaseshelm list --failed# Show failed releaseshelm list --uninstalled# Show uninstalled releases (if 'helm uninstall --keep-history' was used)helm list --superseded# Show superseded releaseshelm list -o yaml# Prints the output in the specified format. Allowed values: table, json, yaml (default table)helm status <release># This command shows the status of a named release.helm status <release> --revision <number># if set, display the status of the named release with revisionhelmhistory<release># Historical revisions for a given release.helm env# Env prints out all the environment information in use by Helm.",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm list                     ..."
        },
        {
          "language": "language-bash",
          "code": "helm list# Lists all of the releases for a specified namespace, uses current namespace context if namespace not specifiedhelm list --all# Show all releases without any filter applied, can use -ahelm list --all-namespaces# List releases across all namespaces, we can use -Ahelm list -lkey1=value1,key2=value2# Selector (label query) to filter on, supports '=', '==', and '!='helm list --date# Sort by release datehelm list --deployed# Show deployed releases. If no other is specified, this will be automatically enabledhelm list --pending# Show pending releaseshelm list --failed# Show failed releaseshelm list --uninstalled# Show uninstalled releases (if 'helm uninstall --keep-history' was used)helm list --superseded# Show superseded releaseshelm list -o yaml# Prints the output in the specified format. Allowed values: table, json, yaml (default table)helm status <release># This command shows the status of a named release.helm status <release> --revision <number># if set, display the status of the named release with revisionhelmhistory<release># Historical revisions for a given release.helm env# Env prints out all the environment information in use by Helm.",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm list                       <span style=\"color:#09f;font-style:italic\"># Lists all of the releases for a specified nam..."
        },
        {
          "language": "",
          "code": "helm get all <release># A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.helm get hooks <release># This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\\n' separator.helm get manifest <release># A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.helm get notes <release># Shows notes provided by the chart of a named release.helm get values <release># Downloads a values file for a given release. use -o to format output",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm get all &lt;release&gt;  ..."
        },
        {
          "language": "language-bash",
          "code": "helm get all <release># A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.helm get hooks <release># This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\\n' separator.helm get manifest <release># A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.helm get notes <release># Shows notes provided by the chart of a named release.helm get values <release># Downloads a values file for a given release. use -o to format output",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm get all &lt;release&gt;      <span style=\"color:#09f;font-style:italic\"># A human readable collection of information ..."
        },
        {
          "language": "",
          "code": "helm plugin install <path/url># Install pluginshelm plugin list# View a list of all installed pluginshelm plugin update <plugin># Update pluginshelm plugin uninstall <plugin># Uninstall a plugin",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm plugin install &lt;path/u..."
        },
        {
          "language": "language-bash",
          "code": "helm plugin install <path/url># Install pluginshelm plugin list# View a list of all installed pluginshelm plugin update <plugin># Update pluginshelm plugin uninstall <plugin># Uninstall a plugin",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>helm plugin install &lt;path/url&gt;      <span style=\"color:#09f;font-style:italic\"># Install plugins</span>\n</span></spa..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Cheat Sheet",
          "id": ""
        },
        {
          "level": 3,
          "text": "Basic interpretations/context",
          "id": "basic-interpretationscontext"
        },
        {
          "level": 3,
          "text": "Chart Management",
          "id": "chart-management"
        },
        {
          "level": 3,
          "text": "Install and Uninstall Apps",
          "id": "install-and-uninstall-apps"
        },
        {
          "level": 3,
          "text": "Perform App Upgrade and Rollback",
          "id": "perform-app-upgrade-and-rollback"
        },
        {
          "level": 3,
          "text": "List, Add, Remove, and Update Repositories",
          "id": "list-add-remove-and-update-repositories"
        },
        {
          "level": 3,
          "text": "Helm Release monitoring",
          "id": "helm-release-monitoring"
        },
        {
          "level": 3,
          "text": "Download Release Information",
          "id": "download-release-information"
        },
        {
          "level": 3,
          "text": "Plugin Management",
          "id": "plugin-management"
        }
      ],
      "timestamp": 1750732639.365779
    },
    {
      "url": "https://helm.sh/docs/howto/",
      "title": "Helm | Docs",
      "content": "How-to Guides\nHere you’ll find short answers to “How do I….?” types of questions. These how-to\nguides don’t cover topics in depth – you’ll find that material in the\nTopic\nGuides\n. However, these guides will help you quickly accomplish\ncommon tasks.\nQuicklinks\nChart Development Tips and Tricks\nCovers some of the tips and tricks Helm chart developers have learned while building production-quality charts.\nSyncing Your Chart Repository\nDescribes how to synchronize your local and remote chart repositories.\nChart Releaser Action to Automate GitHub Page Charts\nDescribe how to use Chart Releaser Action to automate releasing charts through GitHub pages.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "How-to Guides",
          "id": "how-to-guides"
        },
        {
          "level": 3,
          "text": "Quicklinks",
          "id": ""
        },
        {
          "level": 4,
          "text": "Chart Development Tips and Tricks",
          "id": ""
        },
        {
          "level": 4,
          "text": "Syncing Your Chart Repository",
          "id": ""
        },
        {
          "level": 4,
          "text": "Chart Releaser Action to Automate GitHub Page Charts",
          "id": ""
        }
      ],
      "timestamp": 1750732641.626763
    },
    {
      "url": "https://helm.sh/docs/howto/charts_tips_and_tricks/",
      "title": "Helm | Chart Development Tips and Tricks",
      "content": "Chart Development Tips and Tricks\nThis guide covers some of the tips and tricks Helm chart developers have learned\nwhile building production-quality charts.\nKnow Your Template Functions\nHelm uses\nGo templates\nfor templating your\nresource files. While Go ships several built-in functions, we have added many\nothers.\nFirst, we added all of the functions in the\nSprig\nlibrary\n, except\nenv\nand\nexpandenv\n, for security reasons.\nWe also added two special template functions:\ninclude\nand\nrequired\n. The\ninclude\nfunction allows you to bring in another template, and then pass the\nresults to other template functions.\nFor example, this template snippet includes a template called\nmytpl\n, then\nlowercases the result, then wraps that in double quotes.\nvalue\n:\n{{\ninclude \"mytpl\" . | lower | quote }}\nThe\nrequired\nfunction allows you to declare a particular values entry as\nrequired for template rendering. If the value is empty, the template rendering\nwill fail with a user submitted error message.\nThe following example of the\nrequired\nfunction declares an entry for\n.Values.who\nis required, and will print an error message when that entry is\nmissing:\nvalue\n:\n{{\nrequired \"A valid .Values.who entry required!\" .Values.who }}\nQuote Strings, Don't Quote Integers\nWhen you are working with string data, you are always safer quoting the strings\nthan leaving them as bare words:\nname\n:\n{{\n.Values.MyName | quote }}\nBut when working with integers\ndo not quote the values.\nThat can, in many\ncases, cause parsing errors inside of Kubernetes.\nport\n:\n{{\n.Values.Port }}\nThis remark does not apply to env variables values which are expected to be\nstring, even if they represent integers:\nenv\n:\n-\nname\n:\nHOST\nvalue\n:\n\"http://host\"\n-\nname\n:\nPORT\nvalue\n:\n\"1234\"\nUsing the 'include' Function\nGo provides a way of including one template in another using a built-in\ntemplate\ndirective. However, the built-in function cannot be used in Go\ntemplate pipelines.\nTo make it possible to include a template, and then perform an operation on that\ntemplate's output, Helm has a special\ninclude\nfunction:\n{{ include \"toYaml\" $value | indent 2 }}\nThe above includes a template called\ntoYaml\n, passes it\n$value\n, and then\npasses the output of that template to the\nindent\nfunction.\nBecause YAML ascribes significance to indentation levels and whitespace, this is\none great way to include snippets of code, but handle indentation in a relevant\ncontext.\nUsing the 'required' function\nGo provides a way for setting template options to control behavior when a map is\nindexed with a key that's not present in the map. This is typically set with\ntemplate.Options(\"missingkey=option\")\n, where\noption\ncan be\ndefault\n,\nzero\n, or\nerror\n. While setting this option to error will stop execution with\nan error, this would apply to every missing key in the map. There may be\nsituations where a chart developer wants to enforce this behavior for select\nvalues in the\nvalues.yaml\nfile.\nThe\nrequired\nfunction gives developers the ability to declare a value entry as\nrequired for template rendering. If the entry is empty in\nvalues.yaml\n, the\ntemplate will not render and will return an error message supplied by the\ndeveloper.\nFor example:\n{{ required \"A valid foo is required!\" .Values.foo }}\nThe above will render the template when\n.Values.foo\nis defined, but will fail\nto render and exit when\n.Values.foo\nis undefined.\nUsing the 'tpl' Function\nThe\ntpl\nfunction allows developers to evaluate strings as templates inside a\ntemplate. This is useful to pass a template string as a value to a chart or\nrender external configuration files. Syntax:\n{{ tpl TEMPLATE_STRING VALUES }}\nExamples:\n# values\ntemplate\n:\n\"{{ .Values.name }}\"\nname\n:\n\"Tom\"\n# template\n{{\ntpl .Values.template . }}\n# output\nTom\nRendering an external configuration file:\n# external configuration file conf/app.conf\nfirstName={{ .Values.firstName }}\nlastName={{ .Values.lastName }}\n# values\nfirstName\n:\nPeter\nlastName\n:\nParker\n# template\n{{\ntpl (.Files.Get \"conf/app.conf\") . }}\n# output\nfirstName=Peter\nlastName=Parker\nCreating Image Pull Secrets\nImage pull secrets are essentially a combination of\nregistry\n,\nusername\n, and\npassword\n. You may need them in an application you are deploying, but to\ncreate them requires running\nbase64\na couple of times. We can write a helper\ntemplate to compose the Docker configuration file for use as the Secret's\npayload. Here is an example:\nFirst, assume that the credentials are defined in the\nvalues.yaml\nfile like\nso:\nimageCredentials\n:\nregistry\n:\nquay.io\nusername\n:\nsomeone\npassword\n:\nsillyness\nemail\n:\nsomeone@host.com\nWe then define our helper template as follows:\n{{- define \"imagePullSecret\" }}\n{{- with .Values.imageCredentials }}\n{{- printf \"{\\\"auths\\\":{\\\"%s\\\":{\\\"username\\\":\\\"%s\\\",\\\"password\\\":\\\"%s\\\",\\\"email\\\":\\\"%s\\\",\\\"auth\\\":\\\"%s\\\"}}}\" .registry .username .password .email (printf \"%s:%s\" .username .password | b64enc) | b64enc }}\n{{- end }}\n{{- end }}\nFinally, we use the helper template in a larger template to create the Secret\nmanifest:\napiVersion\n:\nv1\nkind\n:\nSecret\nmetadata\n:\nname\n:\nmyregistrykey\ntype\n:\nkubernetes.io/dockerconfigjson\ndata\n:\n.dockerconfigjson\n:\n{{\ntemplate \"imagePullSecret\" . }}\nAutomatically Roll Deployments\nOften times ConfigMaps or Secrets are injected as configuration files in\ncontainers or there are other external dependency changes that require rolling\npods. Depending on the application a restart may be required should those be\nupdated with a subsequent\nhelm upgrade\n, but if the deployment spec itself\ndidn't change the application keeps running with the old configuration resulting\nin an inconsistent deployment.\nThe\nsha256sum\nfunction can be used to ensure a deployment's annotation section\nis updated if another file changes:\nkind\n:\nDeployment\nspec\n:\ntemplate\n:\nmetadata\n:\nannotations\n:\nchecksum/config\n:\n{{\ninclude (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}\n[...]\nNOTE: If you're adding this to a library chart you won't be able to access your\nfile in\n$.Template.BasePath\n. Instead you can reference your definition with\n{{ include (\"mylibchart.configmap\") . | sha256sum }}\n.\nIn the event you always want to roll your deployment, you can use a similar\nannotation step as above, instead replacing with a random string so it always\nchanges and causes the deployment to roll:\nkind\n:\nDeployment\nspec\n:\ntemplate\n:\nmetadata\n:\nannotations\n:\nrollme\n:\n{{\nrandAlphaNum 5 | quote }}\n[...]\nEach invocation of the template function will generate a unique random string.\nThis means that if it's necessary to sync the random strings used by multiple\nresources, all relevant resources will need to be in the same template file.\nBoth of these methods allow your Deployment to leverage the built in update\nstrategy logic to avoid taking downtime.\nNOTE: In the past we recommended using the\n--recreate-pods\nflag as another\noption. This flag has been marked as deprecated in Helm 3 in favor of the more\ndeclarative method above.\nTell Helm Not To Uninstall a Resource\nSometimes there are resources that should not be uninstalled when Helm runs a\nhelm uninstall\n. Chart developers can add an annotation to a resource to\nprevent it from being uninstalled.\nkind\n:\nSecret\nmetadata\n:\nannotations\n:\nhelm.sh/resource-policy\n:\nkeep\n[...]\nThe annotation\nhelm.sh/resource-policy: keep\ninstructs Helm to skip deleting\nthis resource when a helm operation (such as\nhelm uninstall\n,\nhelm upgrade\nor\nhelm rollback\n) would result in its deletion.\nHowever\n, this resource becomes\norphaned. Helm will no longer manage it in any way. This can lead to problems if\nusing\nhelm install --replace\non a release that has already been uninstalled,\nbut has kept resources.\nUsing \"Partials\" and Template Includes\nSometimes you want to create some reusable parts in your chart, whether they're\nblocks or template partials. And often, it's cleaner to keep these in their own\nfiles.\nIn the\ntemplates/\ndirectory, any file that begins with an underscore(\n_\n) is\nnot expected to output a Kubernetes manifest file. So by convention, helper\ntemplates and partials are placed in a\n_helpers.tpl\nfile.\nComplex Charts with Many Dependencies\nMany of the charts in the CNCF\nArtifact\nHub\nare \"building blocks\" for\ncreating more advanced applications. But charts may be used to create instances\nof large-scale applications. In such cases, a single umbrella chart may have\nmultiple subcharts, each of which functions as a piece of the whole.\nThe current best practice for composing a complex application from discrete\nparts is to create a top-level umbrella chart that exposes the global\nconfigurations, and then use the\ncharts/\nsubdirectory to embed each of the\ncomponents.\nYAML is a Superset of JSON\nAccording to the YAML specification, YAML is a superset of JSON. That means that\nany valid JSON structure ought to be valid in YAML.\nThis has an advantage: Sometimes template developers may find it easier to\nexpress a datastructure with a JSON-like syntax rather than deal with YAML's\nwhitespace sensitivity.\nAs a best practice, templates should follow a YAML-like syntax\nunless\nthe JSON\nsyntax substantially reduces the risk of a formatting issue.\nBe Careful with Generating Random Values\nThere are functions in Helm that allow you to generate random data,\ncryptographic keys, and so on. These are fine to use. But be aware that during\nupgrades, templates are re-executed. When a template run generates data that\ndiffers from the last run, that will trigger an update of that resource.\nInstall or Upgrade a Release with One Command\nHelm provides a way to perform an install-or-upgrade as a single command. Use\nhelm upgrade\nwith the\n--install\ncommand. This will cause Helm to see if the\nrelease is already installed. If not, it will run an install. If it is, then the\nexisting release will be upgraded.\n$\nhelm upgrade --install <release name> --values <values file> <chart directory>\nNext\nSyncing Your Chart Repository →",
      "code_examples": [
        {
          "language": "",
          "code": "value:{{include \"mytpl\" . | lower | quote }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "value:{{include \"mytpl\" . | lower | quote }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">value</span>:<span style=\"color:#bbb\"> </span>{{<span style=\"color:#bbb\"> </span>..."
        },
        {
          "language": "",
          "code": ".Values.who",
          "element": "<code>.Values.who</code>"
        },
        {
          "language": "",
          "code": "value:{{required \"A valid .Values.who entry required!\" .Values.who }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "value:{{required \"A valid .Values.who entry required!\" .Values.who }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">value</span>:<span style=\"color:#bbb\"> </span>{{<span style=\"color:#bbb\"> </span>..."
        },
        {
          "language": "",
          "code": "name:{{.Values.MyName | quote }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:{{.Values.MyName | quote }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>{{<span style=\"color:#bbb\"> </span>...."
        },
        {
          "language": "",
          "code": "port:{{.Values.Port }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "port:{{.Values.Port }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">port</span>:<span style=\"color:#bbb\"> </span>{{<span style=\"color:#bbb\"> </span>...."
        },
        {
          "language": "",
          "code": "env:-name:HOSTvalue:\"http://host\"-name:PORTvalue:\"1234\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "env:-name:HOSTvalue:\"http://host\"-name:PORTvalue:\"1234\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">env</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:fl..."
        },
        {
          "language": "",
          "code": "{{ include \"toYaml\" $value | indent 2 }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>{{ include \"toYaml\" $v..."
        },
        {
          "language": "language-fallback",
          "code": "{{ include \"toYaml\" $value | indent 2 }}",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>{{ include \"toYaml\" $value | indent 2 }}\n</span></span></code>"
        },
        {
          "language": "",
          "code": "template.Options(\"missingkey=option\")",
          "element": "<code>template.Options(\"missingkey=option\")</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "{{ required \"A valid foo is required!\" .Values.foo }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>{{ required \"A valid f..."
        },
        {
          "language": "language-fallback",
          "code": "{{ required \"A valid foo is required!\" .Values.foo }}",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>{{ required \"A valid foo is required!\" .Values.foo }}\n</span></span></code>"
        },
        {
          "language": "",
          "code": ".Values.foo",
          "element": "<code>.Values.foo</code>"
        },
        {
          "language": "",
          "code": ".Values.foo",
          "element": "<code>.Values.foo</code>"
        },
        {
          "language": "",
          "code": "{{ tpl TEMPLATE_STRING VALUES }}",
          "element": "<code>{{ tpl TEMPLATE_STRING VALUES }}</code>"
        },
        {
          "language": "",
          "code": "# valuestemplate:\"{{ .Values.name }}\"name:\"Tom\"# template{{tpl .Values.template . }}# outputTom",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# valuestemplate:\"{{ .Values.name }}\"name:\"Tom\"# template{{tpl .Values.template . }}# outputTom",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># values</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"disp..."
        },
        {
          "language": "",
          "code": "# external configuration file conf/app.conffirstName={{ .Values.firstName }}lastName={{ .Values.lastName }}# valuesfirstName:PeterlastName:Parker# template{{tpl (.Files.Get \"conf/app.conf\") . }}# outputfirstName=PeterlastName=Parker",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# external configuration file conf/app.conffirstName={{ .Values.firstName }}lastName={{ .Values.lastName }}# valuesfirstName:PeterlastName:Parker# template{{tpl (.Files.Get \"conf/app.conf\") . }}# outputfirstName=PeterlastName=Parker",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># external configuration file conf/app.conf</span><span style=\"color:#bbb\">\n</s..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "imageCredentials:registry:quay.iousername:someonepassword:sillynessemail:someone@host.com",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "imageCredentials:registry:quay.iousername:someonepassword:sillynessemail:someone@host.com",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">imageCredentials</span>:<span style=\"color:#bbb\">\n</span></span></span><span styl..."
        },
        {
          "language": "",
          "code": "{{- define \"imagePullSecret\" }}{{- with .Values.imageCredentials }}{{- printf \"{\\\"auths\\\":{\\\"%s\\\":{\\\"username\\\":\\\"%s\\\",\\\"password\\\":\\\"%s\\\",\\\"email\\\":\\\"%s\\\",\\\"auth\\\":\\\"%s\\\"}}}\" .registry .username .password .email (printf \"%s:%s\" .username .password | b64enc) | b64enc }}{{- end }}{{- end }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>{{- define \"imagePullS..."
        },
        {
          "language": "language-fallback",
          "code": "{{- define \"imagePullSecret\" }}{{- with .Values.imageCredentials }}{{- printf \"{\\\"auths\\\":{\\\"%s\\\":{\\\"username\\\":\\\"%s\\\",\\\"password\\\":\\\"%s\\\",\\\"email\\\":\\\"%s\\\",\\\"auth\\\":\\\"%s\\\"}}}\" .registry .username .password .email (printf \"%s:%s\" .username .password | b64enc) | b64enc }}{{- end }}{{- end }}",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>{{- define \"imagePullSecret\" }}\n</span></span><span style=\"display:flex\"><span>{{- with .Values.imageCredentials }..."
        },
        {
          "language": "",
          "code": "apiVersion:v1kind:Secretmetadata:name:myregistrykeytype:kubernetes.io/dockerconfigjsondata:.dockerconfigjson:{{template \"imagePullSecret\" . }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v1kind:Secretmetadata:name:myregistrykeytype:kubernetes.io/dockerconfigjsondata:.dockerconfigjson:{{template \"imagePullSecret\" . }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "kind:Deploymentspec:template:metadata:annotations:checksum/config:{{include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}[...]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "kind:Deploymentspec:template:metadata:annotations:checksum/config:{{include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}[...]",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">kind</span>:<span style=\"color:#bbb\"> </span>Deployment<span style=\"color:#bbb\">\n..."
        },
        {
          "language": "",
          "code": "$.Template.BasePath",
          "element": "<code>$.Template.BasePath</code>"
        },
        {
          "language": "",
          "code": "{{ include (\"mylibchart.configmap\") . | sha256sum }}",
          "element": "<code>{{ include (\"mylibchart.configmap\") . | sha256sum }}</code>"
        },
        {
          "language": "",
          "code": "kind:Deploymentspec:template:metadata:annotations:rollme:{{randAlphaNum 5 | quote }}[...]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "kind:Deploymentspec:template:metadata:annotations:rollme:{{randAlphaNum 5 | quote }}[...]",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">kind</span>:<span style=\"color:#bbb\"> </span>Deployment<span style=\"color:#bbb\">\n..."
        },
        {
          "language": "",
          "code": "--recreate-pods",
          "element": "<code>--recreate-pods</code>"
        },
        {
          "language": "",
          "code": "helm uninstall",
          "element": "<code>helm uninstall</code>"
        },
        {
          "language": "",
          "code": "kind:Secretmetadata:annotations:helm.sh/resource-policy:keep[...]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "kind:Secretmetadata:annotations:helm.sh/resource-policy:keep[...]",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">kind</span>:<span style=\"color:#bbb\"> </span>Secret<span style=\"color:#bbb\">\n</sp..."
        },
        {
          "language": "",
          "code": "helm.sh/resource-policy: keep",
          "element": "<code>helm.sh/resource-policy: keep</code>"
        },
        {
          "language": "",
          "code": "helm uninstall",
          "element": "<code>helm uninstall</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "helm rollback",
          "element": "<code>helm rollback</code>"
        },
        {
          "language": "",
          "code": "helm install --replace",
          "element": "<code>helm install --replace</code>"
        },
        {
          "language": "",
          "code": "_helpers.tpl",
          "element": "<code>_helpers.tpl</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "$helm upgrade --install <release name> --values <values file> <chart directory>",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm upgrade --install <release name> --values <values file> <chart directory>",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm upgrade --install &lt;release name&gt; --values &lt;values fi..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Chart Development Tips and Tricks",
          "id": ""
        },
        {
          "level": 2,
          "text": "Know Your Template Functions",
          "id": "know-your-template-functions"
        },
        {
          "level": 2,
          "text": "Quote Strings, Don't Quote Integers",
          "id": "quote-strings-dont-quote-integers"
        },
        {
          "level": 2,
          "text": "Using the 'include' Function",
          "id": "using-the-include-function"
        },
        {
          "level": 2,
          "text": "Using the 'required' function",
          "id": "using-the-required-function"
        },
        {
          "level": 2,
          "text": "Using the 'tpl' Function",
          "id": "using-the-tpl-function"
        },
        {
          "level": 2,
          "text": "Creating Image Pull Secrets",
          "id": "creating-image-pull-secrets"
        },
        {
          "level": 2,
          "text": "Automatically Roll Deployments",
          "id": "automatically-roll-deployments"
        },
        {
          "level": 2,
          "text": "Tell Helm Not To Uninstall a Resource",
          "id": "tell-helm-not-to-uninstall-a-resource"
        },
        {
          "level": 2,
          "text": "Using \"Partials\" and Template Includes",
          "id": "using-partials-and-template-includes"
        },
        {
          "level": 2,
          "text": "Complex Charts with Many Dependencies",
          "id": "complex-charts-with-many-dependencies"
        },
        {
          "level": 2,
          "text": "YAML is a Superset of JSON",
          "id": "yaml-is-a-superset-of-json"
        },
        {
          "level": 2,
          "text": "Be Careful with Generating Random Values",
          "id": "be-careful-with-generating-random-values"
        },
        {
          "level": 2,
          "text": "Install or Upgrade a Release with One Command",
          "id": "install-or-upgrade-a-release-with-one-command"
        }
      ],
      "timestamp": 1750732644.284035
    },
    {
      "url": "https://helm.sh/docs/howto/chart_repository_sync_example/",
      "title": "Helm | Syncing Your Chart Repository",
      "content": "Syncing Your Chart Repository\nNote: This example is specifically for a Google Cloud Storage (GCS) bucket\nwhich serves a chart repository.\nPrerequisites\nInstall the\ngsutil\ntool.\nWe\nrely heavily on the gsutil rsync functionality\nBe sure to have access to the Helm binary\nOptional: We recommend you set\nobject\nversioning\non your GCS bucket in case you accidentally delete something.\nSet up a local chart repository directory\nCreate a local directory like we did in\nthe chart repository guide\n, and place your packaged charts in that\ndirectory.\nFor example:\n$\nmkdir fantastic-charts\n$\nmv alpine-0.1.0.tgz fantastic-charts/\nGenerate an updated index.yaml\nUse Helm to generate an updated index.yaml file by passing in the directory path\nand the url of the remote repository to the\nhelm repo index\ncommand like this:\n$\nhelm repo index fantastic-charts/ --url https://fantastic-charts.storage.googleapis.com\nThis will generate an updated index.yaml file and place it in the\nfantastic-charts/\ndirectory.\nSync your local and remote chart repositories\nUpload the contents of the directory to your GCS bucket by running\nscripts/sync-repo.sh\nand pass in the local directory name and the GCS bucket\nname.\nFor example:\n$\npwd\n/Users/me/code/go/src/helm.sh/helm\n$\nscripts/sync-repo.sh fantastic-charts/ fantastic-charts\nGetting ready to sync your local directory (fantastic-charts/) to a remote repository at gs://fantastic-charts\nVerifying Prerequisites....\nThumbs up! Looks like you have gsutil. Let's continue.\nBuilding synchronization state...\nStarting synchronization\nWould copy file://fantastic-charts/alpine-0.1.0.tgz to gs://fantastic-charts/alpine-0.1.0.tgz\nWould copy file://fantastic-charts/index.yaml to gs://fantastic-charts/index.yaml\nAre you sure you would like to continue with these changes?? [y/N]} y\nBuilding synchronization state...\nStarting synchronization\nCopying file://fantastic-charts/alpine-0.1.0.tgz [Content-Type=application/x-tar]...\nUploading   gs://fantastic-charts/alpine-0.1.0.tgz:              740 B/740 B\nCopying file://fantastic-charts/index.yaml [Content-Type=application/octet-stream]...\nUploading   gs://fantastic-charts/index.yaml:                    347 B/347 B\nCongratulations your remote chart repository now matches the contents of fantastic-charts/\nUpdating your chart repository\nYou'll want to keep a local copy of the contents of your chart repository or use\ngsutil rsync\nto copy the contents of your remote chart repository to a local\ndirectory.\nFor example:\n$\ngsutil rsync -d -n gs://bucket-name local-dir/\n# the -n flag does a dry run\nBuilding synchronization state...\nStarting synchronization\nWould copy gs://bucket-name/alpine-0.1.0.tgz to file://local-dir/alpine-0.1.0.tgz\nWould copy gs://bucket-name/index.yaml to file://local-dir/index.yaml\n$\ngsutil rsync -d gs://bucket-name local-dir/\n# performs the copy actions\nBuilding synchronization state...\nStarting synchronization\nCopying gs://bucket-name/alpine-0.1.0.tgz...\nDownloading file://local-dir/alpine-0.1.0.tgz:                        740 B/740 B\nCopying gs://bucket-name/index.yaml...\nDownloading file://local-dir/index.yaml:                              346 B/346 B\nHelpful Links:\nDocumentation on\ngsutil\nrsync\nThe Chart Repository Guide\nDocumentation on\nobject versioning and concurrency\ncontrol\nin Google Cloud Storage\nPrev\n← Chart Development Tips and Tricks\nNext\nChart Releaser Action to Automate GitHub Page Charts →",
      "code_examples": [
        {
          "language": "",
          "code": "$mkdir fantastic-charts$mv alpine-0.1.0.tgz fantastic-charts/",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$mkdir fantastic-charts$mv alpine-0.1.0.tgz fantastic-charts/",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> mkdir fantastic-charts\n</span></span><span style=\"display:flex\"><s..."
        },
        {
          "language": "",
          "code": "helm repo index",
          "element": "<code>helm repo index</code>"
        },
        {
          "language": "",
          "code": "$helm repo index fantastic-charts/ --url https://fantastic-charts.storage.googleapis.com",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo index fantastic-charts/ --url https://fantastic-charts.storage.googleapis.com",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo index fantastic-charts/ --url https://fantastic-charts.s..."
        },
        {
          "language": "",
          "code": "fantastic-charts/",
          "element": "<code>fantastic-charts/</code>"
        },
        {
          "language": "",
          "code": "scripts/sync-repo.sh",
          "element": "<code>scripts/sync-repo.sh</code>"
        },
        {
          "language": "",
          "code": "$pwd/Users/me/code/go/src/helm.sh/helm$scripts/sync-repo.sh fantastic-charts/ fantastic-chartsGetting ready to sync your local directory (fantastic-charts/) to a remote repository at gs://fantastic-chartsVerifying Prerequisites....Thumbs up! Looks like you have gsutil. Let's continue.Building synchronization state...Starting synchronizationWould copy file://fantastic-charts/alpine-0.1.0.tgz to gs://fantastic-charts/alpine-0.1.0.tgzWould copy file://fantastic-charts/index.yaml to gs://fantastic-charts/index.yamlAre you sure you would like to continue with these changes?? [y/N]} yBuilding synchronization state...Starting synchronizationCopying file://fantastic-charts/alpine-0.1.0.tgz [Content-Type=application/x-tar]...Uploading   gs://fantastic-charts/alpine-0.1.0.tgz:              740 B/740 BCopying file://fantastic-charts/index.yaml [Content-Type=application/octet-stream]...Uploading   gs://fantastic-charts/index.yaml:                    347 B/347 BCongratulations your remote chart repository now matches the contents of fantastic-charts/",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$pwd/Users/me/code/go/src/helm.sh/helm$scripts/sync-repo.sh fantastic-charts/ fantastic-chartsGetting ready to sync your local directory (fantastic-charts/) to a remote repository at gs://fantastic-chartsVerifying Prerequisites....Thumbs up! Looks like you have gsutil. Let's continue.Building synchronization state...Starting synchronizationWould copy file://fantastic-charts/alpine-0.1.0.tgz to gs://fantastic-charts/alpine-0.1.0.tgzWould copy file://fantastic-charts/index.yaml to gs://fantastic-charts/index.yamlAre you sure you would like to continue with these changes?? [y/N]} yBuilding synchronization state...Starting synchronizationCopying file://fantastic-charts/alpine-0.1.0.tgz [Content-Type=application/x-tar]...Uploading   gs://fantastic-charts/alpine-0.1.0.tgz:              740 B/740 BCopying file://fantastic-charts/index.yaml [Content-Type=application/octet-stream]...Uploading   gs://fantastic-charts/index.yaml:                    347 B/347 BCongratulations your remote chart repository now matches the contents of fantastic-charts/",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> <span style=\"color:#366\">pwd</span>\n</span></span><span style=\"dis..."
        },
        {
          "language": "",
          "code": "gsutil rsync",
          "element": "<code>gsutil rsync</code>"
        },
        {
          "language": "",
          "code": "$gsutil rsync -d -n gs://bucket-name local-dir/# the -n flag does a dry runBuilding synchronization state...Starting synchronizationWould copy gs://bucket-name/alpine-0.1.0.tgz to file://local-dir/alpine-0.1.0.tgzWould copy gs://bucket-name/index.yaml to file://local-dir/index.yaml$gsutil rsync -d gs://bucket-name local-dir/# performs the copy actionsBuilding synchronization state...Starting synchronizationCopying gs://bucket-name/alpine-0.1.0.tgz...Downloading file://local-dir/alpine-0.1.0.tgz:                        740 B/740 BCopying gs://bucket-name/index.yaml...Downloading file://local-dir/index.yaml:                              346 B/346 B",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$gsutil rsync -d -n gs://bucket-name local-dir/# the -n flag does a dry runBuilding synchronization state...Starting synchronizationWould copy gs://bucket-name/alpine-0.1.0.tgz to file://local-dir/alpine-0.1.0.tgzWould copy gs://bucket-name/index.yaml to file://local-dir/index.yaml$gsutil rsync -d gs://bucket-name local-dir/# performs the copy actionsBuilding synchronization state...Starting synchronizationCopying gs://bucket-name/alpine-0.1.0.tgz...Downloading file://local-dir/alpine-0.1.0.tgz:                        740 B/740 BCopying gs://bucket-name/index.yaml...Downloading file://local-dir/index.yaml:                              346 B/346 B",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> gsutil rsync -d -n gs://bucket-name local-dir/    <span style=\"col..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Syncing Your Chart Repository",
          "id": ""
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Set up a local chart repository directory",
          "id": "set-up-a-local-chart-repository-directory"
        },
        {
          "level": 2,
          "text": "Generate an updated index.yaml",
          "id": "generate-an-updated-indexyaml"
        },
        {
          "level": 2,
          "text": "Sync your local and remote chart repositories",
          "id": "sync-your-local-and-remote-chart-repositories"
        },
        {
          "level": 2,
          "text": "Updating your chart repository",
          "id": "updating-your-chart-repository"
        }
      ],
      "timestamp": 1750732647.158019
    },
    {
      "url": "https://helm.sh/docs/howto/chart_releaser_action/",
      "title": "Helm | Chart Releaser Action to Automate GitHub Page Charts",
      "content": "Chart Releaser Action to Automate GitHub Page Charts\nThis guide describes how to use\nChart Releaser\nAction\nto automate\nreleasing charts through GitHub pages. Chart Releaser Action is a GitHub Action\nworkflow to turn a GitHub project into a self-hosted Helm chart repo, using\nhelm/chart-releaser\nCLI tool.\nRepository Changes\nCreate a Git repository under your GitHub organization. You could give the name\nof the repository as\nhelm-charts\n, though other names are also acceptable. The\nsources of all the charts can be placed under the\nmain\nbranch. The charts\nshould be placed under\n/charts\ndirectory at the top-level of the directory\ntree.\nThere should be another branch named\ngh-pages\nto publish the charts. The\nchanges to that branch will be automatically created by the Chart Releaser\nAction described here. However, you can create that\ngh-branch\nand add\nREADME.md\nfile, which is going to be visible to the users visiting the page.\nYou can add instruction in the\nREADME.md\nfor charts installation like this\n(replace\n<alias>\n,\n<orgname>\n, and\n<chart-name>\n):\n## Usage\n[Helm](https://helm.sh) must be installed to use the charts.  Please refer to\nHelm's [documentation](https://helm.sh/docs) to get started.\nOnce Helm has been set up correctly, add the repo as follows:\nhelm repo add <alias> https://<orgname>.github.io/helm-charts\nIf you had already added this repo earlier, run `helm repo update` to retrieve\nthe latest versions of the packages.  You can then run `helm search repo\n<alias>` to see the charts.\nTo install the <chart-name> chart:\nhelm install my-<chart-name> <alias>/<chart-name>\nTo uninstall the chart:\nhelm uninstall my-<chart-name>\nThe charts will be published to a website with URL like this:\nhttps://<orgname>.github.io/helm-charts\nGitHub Actions Workflow\nCreate GitHub Actions workflow file in the\nmain\nbranch at\n.github/workflows/release.yml\nname: Release Charts\non:\npush:\nbranches:\n- main\njobs:\nrelease:\npermissions:\ncontents: write\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v4\nwith:\nfetch-depth: 0\n- name: Configure Git\nrun: |\ngit config user.name \"$GITHUB_ACTOR\"\ngit config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n- name: Run chart-releaser\nuses: helm/chart-releaser-action@v1.6.0\nenv:\nCR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\nThe above configuration uses\n@helm/chart-releaser-action\nto\nturn your GitHub project into a self-hosted Helm chart repo. It does this -\nduring every push to main - by checking each chart in your project, and whenever\nthere's a new chart version, creates a corresponding GitHub release named for\nthe chart version, adds Helm chart artifacts to the release, and creates or\nupdates an\nindex.yaml\nfile with metadata about those releases, which is then\nhosted on GitHub pages.\nThe Chart Releaser Action version number used in the above example is\nv1.6.0\n.\nYou can change it to the\nlatest available\nversion\n.\nNote: The Chart Releaser Action is almost always used in tandem with the\nHelm Testing\nAction\nand\nKind\nAction\n.\nPrev\n← Syncing Your Chart Repository",
      "code_examples": [
        {
          "language": "",
          "code": "helm-charts",
          "element": "<code>helm-charts</code>"
        },
        {
          "language": "",
          "code": "<chart-name>",
          "element": "<code>&lt;chart-name&gt;</code>"
        },
        {
          "language": "",
          "code": "## Usage[Helm](https://helm.sh) must be installed to use the charts.  Please refer toHelm's [documentation](https://helm.sh/docs) to get started.Once Helm has been set up correctly, add the repo as follows:helm repo add <alias> https://<orgname>.github.io/helm-chartsIf you had already added this repo earlier, run `helm repo update` to retrievethe latest versions of the packages.  You can then run `helm search repo<alias>` to see the charts.To install the <chart-name> chart:helm install my-<chart-name> <alias>/<chart-name>To uninstall the chart:helm uninstall my-<chart-name>",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>## Usage\n</span></span..."
        },
        {
          "language": "language-fallback",
          "code": "## Usage[Helm](https://helm.sh) must be installed to use the charts.  Please refer toHelm's [documentation](https://helm.sh/docs) to get started.Once Helm has been set up correctly, add the repo as follows:helm repo add <alias> https://<orgname>.github.io/helm-chartsIf you had already added this repo earlier, run `helm repo update` to retrievethe latest versions of the packages.  You can then run `helm search repo<alias>` to see the charts.To install the <chart-name> chart:helm install my-<chart-name> <alias>/<chart-name>To uninstall the chart:helm uninstall my-<chart-name>",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>## Usage\n</span></span><span style=\"display:flex\"><span>\n</span></span><span style=\"display:flex\"><span>[Helm](htt..."
        },
        {
          "language": "",
          "code": "https://<orgname>.github.io/helm-charts",
          "element": "<pre><code>https://&lt;orgname&gt;.github.io/helm-charts\n</code></pre>"
        },
        {
          "language": "",
          "code": "https://<orgname>.github.io/helm-charts",
          "element": "<code>https://&lt;orgname&gt;.github.io/helm-charts\n</code>"
        },
        {
          "language": "",
          "code": ".github/workflows/release.yml",
          "element": "<code>.github/workflows/release.yml</code>"
        },
        {
          "language": "",
          "code": "name: Release Chartson:push:branches:- mainjobs:release:permissions:contents: writeruns-on: ubuntu-lateststeps:- name: Checkoutuses: actions/checkout@v4with:fetch-depth: 0- name: Configure Gitrun: |git config user.name \"$GITHUB_ACTOR\"git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"- name: Run chart-releaseruses: helm/chart-releaser-action@v1.6.0env:CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>name: Release Charts\n<..."
        },
        {
          "language": "language-fallback",
          "code": "name: Release Chartson:push:branches:- mainjobs:release:permissions:contents: writeruns-on: ubuntu-lateststeps:- name: Checkoutuses: actions/checkout@v4with:fetch-depth: 0- name: Configure Gitrun: |git config user.name \"$GITHUB_ACTOR\"git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"- name: Run chart-releaseruses: helm/chart-releaser-action@v1.6.0env:CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>name: Release Charts\n</span></span><span style=\"display:flex\"><span>\n</span></span><span style=\"display:flex\"><spa..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Chart Releaser Action to Automate GitHub Page Charts",
          "id": ""
        },
        {
          "level": 2,
          "text": "Repository Changes",
          "id": "repository-changes"
        },
        {
          "level": 2,
          "text": "GitHub Actions Workflow",
          "id": "github-actions-workflow"
        }
      ],
      "timestamp": 1750732650.401301
    },
    {
      "url": "https://helm.sh/docs/topics/",
      "title": "Helm | Docs",
      "content": "Topic Guides\nHere you’ll find introductions to all the key parts of Helm you’ll need or want\nto know.\nQuicklinks\nCharts\nExplains the chart format, and provides basic guidance for building charts with Helm.\nChart Hooks\nDescribes how to work with chart hooks.\nChart Tests\nDescribes how to run and test your charts.\nLibrary Charts\nExplains library charts and examples of usage\nHelm Provenance and Integrity\nDescribes how to verify the integrity and origin of a Chart.\nThe Chart Repository Guide\nHow to create and work with Helm chart repositories.\nUse OCI-based registries\nDescribes how to use OCI for Chart distribution.\nHelm Architecture\nDescribes the Helm architecture at a high level.\nAdvanced Helm Techniques\nExplains various advanced features for Helm power users\nKubernetes Distribution Guide\nCaptures information about using Helm in specific Kubernetes environments.\nRole-based Access Control\nExplains how Helm interacts with Kubernetes' Role-Based Access Control.\nThe Helm Plugins Guide\nIntroduces how to use and create plugins to extend Helm's functionality.\nMigrating Helm v2 to v3\nLearn how to migrate Helm v2 to v3.\nDeprecated Kubernetes APIs\nExplains deprecated Kubernetes APIs in Helm\nHelm Version Support Policy\nDescribes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.\nPermissions management for SQL storage backend\nGet to know how to setup permissions when using SQL storage backend.\nRelease schedule policy\nDescribes Helm's release schedule policy.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Topic Guides",
          "id": "topic-guides"
        },
        {
          "level": 3,
          "text": "Quicklinks",
          "id": ""
        },
        {
          "level": 4,
          "text": "Charts",
          "id": ""
        },
        {
          "level": 4,
          "text": "Chart Hooks",
          "id": ""
        },
        {
          "level": 4,
          "text": "Chart Tests",
          "id": ""
        },
        {
          "level": 4,
          "text": "Library Charts",
          "id": ""
        },
        {
          "level": 4,
          "text": "Helm Provenance and Integrity",
          "id": ""
        },
        {
          "level": 4,
          "text": "The Chart Repository Guide",
          "id": ""
        },
        {
          "level": 4,
          "text": "Use OCI-based registries",
          "id": ""
        },
        {
          "level": 4,
          "text": "Helm Architecture",
          "id": ""
        },
        {
          "level": 4,
          "text": "Advanced Helm Techniques",
          "id": ""
        },
        {
          "level": 4,
          "text": "Kubernetes Distribution Guide",
          "id": ""
        },
        {
          "level": 4,
          "text": "Role-based Access Control",
          "id": ""
        },
        {
          "level": 4,
          "text": "The Helm Plugins Guide",
          "id": ""
        },
        {
          "level": 4,
          "text": "Migrating Helm v2 to v3",
          "id": ""
        },
        {
          "level": 4,
          "text": "Deprecated Kubernetes APIs",
          "id": ""
        },
        {
          "level": 4,
          "text": "Helm Version Support Policy",
          "id": ""
        },
        {
          "level": 4,
          "text": "Permissions management for SQL storage backend",
          "id": ""
        },
        {
          "level": 4,
          "text": "Release schedule policy",
          "id": ""
        }
      ],
      "timestamp": 1750732653.149558
    },
    {
      "url": "https://helm.sh/docs/topics/charts/",
      "title": "Helm | Charts",
      "content": "Charts\nHelm uses a packaging format called\ncharts\n. A chart is a collection of files\nthat describe a related set of Kubernetes resources. A single chart might be\nused to deploy something simple, like a memcached pod, or something complex,\nlike a full web app stack with HTTP servers, databases, caches, and so on.\nCharts are created as files laid out in a particular directory tree. They can be\npackaged into versioned archives to be deployed.\nIf you want to download and look at the files for a published chart, without\ninstalling it, you can do so with\nhelm pull chartrepo/chartname\n.\nThis document explains the chart format, and provides basic guidance for\nbuilding charts with Helm.\nThe Chart File Structure\nA chart is organized as a collection of files inside of a directory. The\ndirectory name is the name of the chart (without versioning information). Thus,\na chart describing WordPress would be stored in a\nwordpress/\ndirectory.\nInside of this directory, Helm will expect a structure that matches this:\nwordpress/\nChart.yaml          # A YAML file containing information about the chart\nLICENSE             # OPTIONAL: A plain text file containing the license for the chart\nREADME.md           # OPTIONAL: A human-readable README file\nvalues.yaml         # The default configuration values for this chart\nvalues.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\ncharts/             # A directory containing any charts upon which this chart depends.\ncrds/               # Custom Resource Definitions\ntemplates/          # A directory of templates that, when combined with values,\n# will generate valid Kubernetes manifest files.\ntemplates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes\nHelm reserves use of the\ncharts/\n,\ncrds/\n, and\ntemplates/\ndirectories, and\nof the listed file names. Other files will be left as they are.\nThe Chart.yaml File\nThe\nChart.yaml\nfile is required for a chart. It contains the following fields:\napiVersion\n:\nThe chart API version (required)\nname\n:\nThe name of the chart (required)\nversion\n:\nA SemVer 2 version (required)\nkubeVersion\n:\nA SemVer range of compatible Kubernetes versions (optional)\ndescription\n:\nA single-sentence description of this project (optional)\ntype\n:\nThe type of the chart (optional)\nkeywords\n:\n- A list of keywords about this project (optional)\nhome\n:\nThe URL of this projects home page (optional)\nsources\n:\n- A list of URLs to source code for this project (optional)\ndependencies\n:\n# A list of the chart requirements (optional)\n-\nname\n:\nThe name of the chart (nginx)\nversion\n:\nThe version of the chart (\"1.2.3\")\nrepository\n:\n(optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")\ncondition\n:\n(optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )\ntags\n:\n# (optional)\n- Tags can be used to group charts for enabling/disabling together\nimport-values\n:\n# (optional)\n- ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.\nalias\n:\n(optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times\nmaintainers\n:\n# (optional)\n-\nname\n:\nThe maintainers name (required for each maintainer)\nemail\n:\nThe maintainers email (optional for each maintainer)\nurl\n:\nA URL for the maintainer (optional for each maintainer)\nicon\n:\nA URL to an SVG or PNG image to be used as an icon (optional).\nappVersion\n:\nThe version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.\ndeprecated\n:\nWhether this chart is deprecated (optional, boolean)\nannotations\n:\nexample\n:\nA list of annotations keyed by name (optional).\nAs of\nv3.3.2\n, additional\nfields are not allowed.\nThe recommended approach is to add custom metadata in\nannotations\n.\nCharts and Versioning\nEvery chart must have a version number. A version must follow the\nSemVer\n2\nstandard. Unlike Helm Classic, Helm v2\nand later uses version numbers as release markers. Packages in repositories are\nidentified by name plus version.\nFor example, an\nnginx\nchart whose version field is set to\nversion: 1.2.3\nwill be named:\nnginx-1.2.3.tgz\nMore complex SemVer 2 names are also supported, such as\nversion: 1.2.3-alpha.1+ef365\n. But non-SemVer names are explicitly disallowed by the\nsystem.\nNOTE:\nWhereas Helm Classic and Deployment Manager were both very GitHub\noriented when it came to charts, Helm v2 and later does not rely upon or require\nGitHub or even Git. Consequently, it does not use Git SHAs for versioning at\nall.\nThe\nversion\nfield inside of the\nChart.yaml\nis used by many of the Helm\ntools, including the CLI. When generating a package, the\nhelm package\ncommand\nwill use the version that it finds in the\nChart.yaml\nas a token in the package\nname. The system assumes that the version number in the chart package name\nmatches the version number in the\nChart.yaml\n. Failure to meet this assumption\nwill cause an error.\nThe\napiVersion\nField\nThe\napiVersion\nfield should be\nv2\nfor Helm charts that require at least Helm\n3. Charts supporting previous Helm versions have an\napiVersion\nset to\nv1\nand\nare still installable by Helm 3.\nChanges from\nv1\nto\nv2\n:\nA\ndependencies\nfield defining chart dependencies, which were located in a\nseparate\nrequirements.yaml\nfile for\nv1\ncharts (see\nChart\nDependencies\n).\nThe\ntype\nfield, discriminating application and library charts (see\nChart\nTypes\n).\nThe\nappVersion\nField\nNote that the\nappVersion\nfield is not related to the\nversion\nfield. It is a\nway of specifying the version of the application. For example, the\ndrupal\nchart may have an\nappVersion: \"8.2.1\"\n, indicating that the version of Drupal\nincluded in the chart (by default) is\n8.2.1\n. This field is informational, and\nhas no impact on chart version calculations. Wrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string. Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets\n1.0\nas a floating point value, and a git commit SHA like\n1234e10\nas scientific notation.\nAs of Helm v3.5.0,\nhelm create\nwraps the default\nappVersion\nfield in quotes.\nThe\nkubeVersion\nField\nThe optional\nkubeVersion\nfield can define semver constraints on supported\nKubernetes versions. Helm will validate the version constraints when installing\nthe chart and fail if the cluster runs an unsupported Kubernetes version.\nVersion constraints may comprise space separated AND comparisons such as\n>= 1.13.0 < 1.15.0\nwhich themselves can be combined with the OR\n||\noperator like in the following\nexample\n>= 1.13.0 < 1.14.0 || >= 1.14.1 < 1.15.0\nIn this example the version\n1.14.0\nis excluded, which can make sense if a bug\nin certain versions is known to prevent the chart from running properly.\nApart from version constrains employing operators\n=\n!=\n>\n<\n>=\n<=\nthe\nfollowing shorthand notations are supported\nhyphen ranges for closed intervals, where\n1.1 - 2.3.4\nis equivalent to\n>= 1.1 <= 2.3.4\n.\nwildcards\nx\n,\nX\nand\n*\n, where\n1.2.x\nis equivalent to\n>= 1.2.0 < 1.3.0\n.\ntilde ranges (patch version changes allowed), where\n~1.2.3\nis equivalent to\n>= 1.2.3 < 1.3.0\n.\ncaret ranges (minor version changes allowed), where\n^1.2.3\nis equivalent to\n>= 1.2.3 < 2.0.0\n.\nFor a detailed explanation of supported semver constraints see\nMasterminds/semver\n.\nDeprecating Charts\nWhen managing charts in a Chart Repository, it is sometimes necessary to\ndeprecate a chart. The optional\ndeprecated\nfield in\nChart.yaml\ncan be used\nto mark a chart as deprecated. If the\nlatest\nversion of a chart in the\nrepository is marked as deprecated, then the chart as a whole is considered to\nbe deprecated. The chart name can be later reused by publishing a newer version\nthat is not marked as deprecated. The workflow for deprecating charts is:\nUpdate chart's\nChart.yaml\nto mark the chart as deprecated, bumping the\nversion\nRelease the new chart version in the Chart Repository\nRemove the chart from the source repository (e.g. git)\nChart Types\nThe\ntype\nfield defines the type of chart. There are two types:\napplication\nand\nlibrary\n. Application is the default type and it is the standard chart\nwhich can be operated on fully. The\nlibrary chart\nprovides utilities or functions for the\nchart builder. A library chart differs from an application chart because it is\nnot installable and usually doesn't contain any resource objects.\nNote:\nAn application chart can be used as a library chart. This is enabled\nby setting the type to\nlibrary\n. The chart will then be rendered as a library\nchart where all utilities and functions can be leveraged. All resource objects\nof the chart will not be rendered.\nChart LICENSE, README and NOTES\nCharts can also contain files that describe the installation, configuration,\nusage and license of a chart.\nA LICENSE is a plain text file containing the\nlicense\nfor the chart. The\nchart can contain a license as it may have programming logic in the templates\nand would therefore not be configuration only. There can also be separate\nlicense(s) for the application installed by the chart, if required.\nA README for a chart should be formatted in Markdown (README.md), and should\ngenerally contain:\nA description of the application or service the chart provides\nAny prerequisites or requirements to run the chart\nDescriptions of options in\nvalues.yaml\nand default values\nAny other information that may be relevant to the installation or\nconfiguration of the chart\nWhen hubs and other user interfaces display details about a chart that detail is\npulled from the content in the\nREADME.md\nfile.\nThe chart can also contain a short plain text\ntemplates/NOTES.txt\nfile that\nwill be printed out after installation, and when viewing the status of a\nrelease. This file is evaluated as a\ntemplate\n, and can\nbe used to display usage notes, next steps, or any other information relevant to\na release of the chart. For example, instructions could be provided for\nconnecting to a database, or accessing a web UI. Since this file is printed to\nSTDOUT when running\nhelm install\nor\nhelm status\n, it is recommended to keep\nthe content brief and point to the README for greater detail.\nChart Dependencies\nIn Helm, one chart may depend on any number of other charts. These dependencies\ncan be dynamically linked using the\ndependencies\nfield in\nChart.yaml\nor\nbrought in to the\ncharts/\ndirectory and managed manually.\nManaging Dependencies with the\ndependencies\nfield\nThe charts required by the current chart are defined as a list in the\ndependencies\nfield.\ndependencies\n:\n-\nname\n:\napache\nversion\n:\n1.2.3\nrepository\n:\nhttps://example.com/charts\n-\nname\n:\nmysql\nversion\n:\n3.2.1\nrepository\n:\nhttps://another.example.com/charts\nThe\nname\nfield is the name of the chart you want.\nThe\nversion\nfield is the version of the chart you want.\nThe\nrepository\nfield is the full URL to the chart repository. Note that you\nmust also use\nhelm repo add\nto add that repo locally.\nYou might use the name of the repo instead of URL\n$\nhelm repo add fantastic-charts https://charts.helm.sh/incubator\ndependencies\n:\n-\nname\n:\nawesomeness\nversion\n:\n1.0.0\nrepository\n:\n\"@fantastic-charts\"\nOnce you have defined dependencies, you can run\nhelm dependency update\nand it\nwill use your dependency file to download all the specified charts into your\ncharts/\ndirectory for you.\n$\nhelm dep up foochart\nHang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"local\" chart repository\n...Successfully got an update from the \"stable\" chart repository\n...Successfully got an update from the \"example\" chart repository\n...Successfully got an update from the \"another\" chart repository\nUpdate Complete. Happy Helming!\nSaving 2 charts\nDownloading apache from repo https://example.com/charts\nDownloading mysql from repo https://another.example.com/charts\nWhen\nhelm dependency update\nretrieves charts, it will store them as chart\narchives in the\ncharts/\ndirectory. So for the example above, one would expect\nto see the following files in the charts directory:\ncharts/\napache-1.2.3.tgz\nmysql-3.2.1.tgz\nAlias field in dependencies\nIn addition to the other fields above, each requirements entry may contain the\noptional field\nalias\n.\nAdding an alias for a dependency chart would put a chart in dependencies using\nalias as name of new dependency.\nOne can use\nalias\nin cases where they need to access a chart with other\nname(s).\n# parentchart/Chart.yaml\ndependencies\n:\n-\nname\n:\nsubchart\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\nalias\n:\nnew-subchart-1\n-\nname\n:\nsubchart\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\nalias\n:\nnew-subchart-2\n-\nname\n:\nsubchart\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\nIn the above example we will get 3 dependencies in all for\nparentchart\n:\nsubchart\nnew-subchart-1\nnew-subchart-2\nThe manual way of achieving this is by copy/pasting the same chart in the\ncharts/\ndirectory multiple times with different names.\nTags and Condition fields in dependencies\nIn addition to the other fields above, each requirements entry may contain the\noptional fields\ntags\nand\ncondition\n.\nAll charts are loaded by default. If\ntags\nor\ncondition\nfields are present,\nthey will be evaluated and used to control loading for the chart(s) they are\napplied to.\nCondition - The condition field holds one or more YAML paths (delimited by\ncommas). If this path exists in the top parent's values and resolves to a\nboolean value, the chart will be enabled or disabled based on that boolean\nvalue. Only the first valid path found in the list is evaluated and if no paths\nexist then the condition has no effect.\nTags - The tags field is a YAML list of labels to associate with this chart. In\nthe top parent's values, all charts with tags can be enabled or disabled by\nspecifying the tag and a boolean value.\n# parentchart/Chart.yaml\ndependencies\n:\n-\nname\n:\nsubchart1\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\ncondition\n:\nsubchart1.enabled,global.subchart1.enabled\ntags\n:\n- front-end\n- subchart1\n-\nname\n:\nsubchart2\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\ncondition\n:\nsubchart2.enabled,global.subchart2.enabled\ntags\n:\n- back-end\n- subchart2\n# parentchart/values.yaml\nsubchart1\n:\nenabled\n:\ntrue\ntags\n:\nfront-end\n:\nfalse\nback-end\n:\ntrue\nIn the above example all charts with the tag\nfront-end\nwould be disabled but\nsince the\nsubchart1.enabled\npath evaluates to 'true' in the parent's values,\nthe condition will override the\nfront-end\ntag and\nsubchart1\nwill be enabled.\nSince\nsubchart2\nis tagged with\nback-end\nand that tag evaluates to\ntrue\n,\nsubchart2\nwill be enabled. Also note that although\nsubchart2\nhas a condition\nspecified, there is no corresponding path and value in the parent's values so\nthat condition has no effect.\nUsing the CLI with Tags and Conditions\nThe\n--set\nparameter can be used as usual to alter tag and condition values.\nhelm install --set tags.front-end=true --set subchart2.enabled=false\nTags and Condition Resolution\nConditions (when set in values) always override tags.\nThe first condition\npath that exists wins and subsequent ones for that chart are ignored.\nTags are evaluated as 'if any of the chart's tags are true then enable the\nchart'.\nTags and conditions values must be set in the top parent's values.\nThe\ntags:\nkey in values must be a top level key. Globals and nested\ntags:\ntables are not currently supported.\nImporting Child Values via dependencies\nIn some cases it is desirable to allow a child chart's values to propagate to\nthe parent chart and be shared as common defaults. An additional benefit of\nusing the\nexports\nformat is that it will enable future tooling to introspect\nuser-settable values.\nThe keys containing the values to be imported can be specified in the parent\nchart's\ndependencies\nin the field\nimport-values\nusing a YAML list. Each item\nin the list is a key which is imported from the child chart's\nexports\nfield.\nTo import values not contained in the\nexports\nkey, use the\nchild-parent\nformat. Examples of both formats\nare described below.\nUsing the exports format\nIf a child chart's\nvalues.yaml\nfile contains an\nexports\nfield at the root,\nits contents may be imported directly into the parent's values by specifying the\nkeys to import as in the example below:\n# parent's Chart.yaml file\ndependencies\n:\n-\nname\n:\nsubchart\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\nimport-values\n:\n- data\n# child's values.yaml file\nexports\n:\ndata\n:\nmyint\n:\n99\nSince we are specifying the key\ndata\nin our import list, Helm looks in the\nexports\nfield of the child chart for\ndata\nkey and imports its contents.\nThe final parent values would contain our exported field:\n# parent's values\nmyint\n:\n99\nPlease note the parent key\ndata\nis not contained in the parent's final values.\nIf you need to specify the parent key, use the 'child-parent' format.\nUsing the child-parent format\nTo access values that are not contained in the\nexports\nkey of the child\nchart's values, you will need to specify the source key of the values to be\nimported (\nchild\n) and the destination path in the parent chart's values\n(\nparent\n).\nThe\nimport-values\nin the example below instructs Helm to take any values found\nat\nchild:\npath and copy them to the parent's values at the path specified in\nparent:\n# parent's Chart.yaml file\ndependencies\n:\n-\nname\n:\nsubchart1\nrepository\n:\nhttp://localhost:10191\nversion\n:\n0.1.0\n...\nimport-values\n:\n-\nchild\n:\ndefault.data\nparent\n:\nmyimports\nIn the above example, values found at\ndefault.data\nin the subchart1's values\nwill be imported to the\nmyimports\nkey in the parent chart's values as detailed\nbelow:\n# parent's values.yaml file\nmyimports\n:\nmyint\n:\n0\nmybool\n:\nfalse\nmystring\n:\n\"helm rocks!\"\n# subchart1's values.yaml file\ndefault\n:\ndata\n:\nmyint\n:\n999\nmybool\n:\ntrue\nThe parent chart's resulting values would be:\n# parent's final values\nmyimports\n:\nmyint\n:\n999\nmybool\n:\ntrue\nmystring\n:\n\"helm rocks!\"\nThe parent's final values now contains the\nmyint\nand\nmybool\nfields imported\nfrom subchart1.\nManaging Dependencies manually via the\ncharts/\ndirectory\nIf more control over dependencies is desired, these dependencies can be\nexpressed explicitly by copying the dependency charts into the\ncharts/\ndirectory.\nA dependency should be an unpacked chart directory but its name cannot start\nwith\n_\nor\n.\n. Such files are ignored by the chart loader.\nFor example, if the WordPress chart depends on the Apache chart, the Apache\nchart (of the correct version) is supplied in the WordPress chart's\ncharts/\ndirectory:\nwordpress\n:\nChart.yaml\n# ...\ncharts/\napache/\nChart.yaml\n# ...\nmysql/\nChart.yaml\n# ...\nThe example above shows how the WordPress chart expresses its dependency on\nApache and MySQL by including those charts inside of its\ncharts/\ndirectory.\nTIP:\nTo drop a dependency into your\ncharts/\ndirectory, use the\nhelm pull\ncommand\nOperational aspects of using dependencies\nThe above sections explain how to specify chart dependencies, but how does this\naffect chart installation using\nhelm install\nand\nhelm upgrade\n?\nSuppose that a chart named \"A\" creates the following Kubernetes objects\nnamespace \"A-Namespace\"\nstatefulset \"A-StatefulSet\"\nservice \"A-Service\"\nFurthermore, A is dependent on chart B that creates objects\nnamespace \"B-Namespace\"\nreplicaset \"B-ReplicaSet\"\nservice \"B-Service\"\nAfter installation/upgrade of chart A a single Helm release is created/modified.\nThe release will create/update all of the above Kubernetes objects in the\nfollowing order:\nA-Namespace\nB-Namespace\nA-Service\nB-Service\nB-ReplicaSet\nA-StatefulSet\nThis is because when Helm installs/upgrades charts, the Kubernetes objects from\nthe charts and all its dependencies are\naggregated into a single set; then\nsorted by type followed by name; and then\ncreated/updated in that order.\nHence a single release is created with all the objects for the chart and its\ndependencies.\nThe install order of Kubernetes types is given by the enumeration InstallOrder\nin kind_sorter.go (see\nthe Helm source\nfile\n).\nTemplates and Values\nHelm Chart templates are written in the\nGo template\nlanguage\n, with the addition of 50 or so\nadd-on template functions\nfrom the Sprig\nlibrary\nand a few other\nspecialized\nfunctions\n.\nAll template files are stored in a chart's\ntemplates/\nfolder. When Helm\nrenders the charts, it will pass every file in that directory through the\ntemplate engine.\nValues for the templates are supplied two ways:\nChart developers may supply a file called\nvalues.yaml\ninside of a chart.\nThis file can contain default values.\nChart users may supply a YAML file that contains values. This can be provided\non the command line with\nhelm install\n.\nWhen a user supplies custom values, these values will override the values in the\nchart's\nvalues.yaml\nfile.\nTemplate Files\nTemplate files follow the standard conventions for writing Go templates (see\nthe text/template Go package\ndocumentation\nfor details). An example\ntemplate file might look something like this:\napiVersion\n:\nv1\nkind\n:\nReplicationController\nmetadata\n:\nname\n:\ndeis-database\nnamespace\n:\ndeis\nlabels\n:\napp.kubernetes.io/managed-by\n:\ndeis\nspec\n:\nreplicas\n:\n1\nselector\n:\napp.kubernetes.io/name\n:\ndeis-database\ntemplate\n:\nmetadata\n:\nlabels\n:\napp.kubernetes.io/name\n:\ndeis-database\nspec\n:\nserviceAccount\n:\ndeis-database\ncontainers\n:\n-\nname\n:\ndeis-database\nimage\n:\n{{\n.Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}\nimagePullPolicy\n:\n{{\n.Values.pullPolicy }}\nports\n:\n-\ncontainerPort\n:\n5432\nenv\n:\n-\nname\n:\nDATABASE_STORAGE\nvalue\n:\n{{\ndefault \"minio\" .Values.storage }}\nThe above example, based loosely on\nhttps://github.com/deis/charts\n, is a template\nfor a Kubernetes replication controller. It can use the following four template\nvalues (usually defined in a\nvalues.yaml\nfile):\nimageRegistry\n: The source registry for the Docker image.\ndockerTag\n: The tag for the docker image.\npullPolicy\n: The Kubernetes pull policy.\nstorage\n: The storage backend, whose default is set to\n\"minio\"\nAll of these values are defined by the template author. Helm does not require or\ndictate parameters.\nTo see many working charts, check out the CNCF\nArtifact\nHub\n.\nPredefined Values\nValues that are supplied via a\nvalues.yaml\nfile (or via the\n--set\nflag) are\naccessible from the\n.Values\nobject in a template. But there are other\npre-defined pieces of data you can access in your templates.\nThe following values are pre-defined, are available to every template, and\ncannot be overridden. As with all values, the names are\ncase sensitive\n.\nRelease.Name\n: The name of the release (not the chart)\nRelease.Namespace\n: The namespace the chart was released to.\nRelease.Service\n: The service that conducted the release.\nRelease.IsUpgrade\n: This is set to true if the current operation is an\nupgrade or rollback.\nRelease.IsInstall\n: This is set to true if the current operation is an\ninstall.\nChart\n: The contents of the\nChart.yaml\n. Thus, the chart version is\nobtainable as\nChart.Version\nand the maintainers are in\nChart.Maintainers\n.\nFiles\n: A map-like object containing all non-special files in the chart. This\nwill not give you access to templates, but will give you access to additional\nfiles that are present (unless they are excluded using\n.helmignore\n). Files\ncan be accessed using\n{{ index .Files \"file.name\" }}\nor using the\n{{.Files.Get name }}\nfunction. You can also access the contents of the file\nas\n[]byte\nusing\n{{ .Files.GetBytes }}\nCapabilities\n: A map-like object that contains information about the versions\nof Kubernetes (\n{{ .Capabilities.KubeVersion }}\n) and the supported Kubernetes\nAPI versions (\n{{ .Capabilities.APIVersions.Has \"batch/v1\" }}\n)\nNOTE:\nAny unknown\nChart.yaml\nfields will be dropped. They will not be\naccessible inside of the\nChart\nobject. Thus,\nChart.yaml\ncannot be used to\npass arbitrarily structured data into the template. The values file can be used\nfor that, though.\nValues files\nConsidering the template in the previous section, a\nvalues.yaml\nfile that\nsupplies the necessary values would look like this:\nimageRegistry\n:\n\"quay.io/deis\"\ndockerTag\n:\n\"latest\"\npullPolicy\n:\n\"Always\"\nstorage\n:\n\"s3\"\nA values file is formatted in YAML. A chart may include a default\nvalues.yaml\nfile. The Helm install command allows a user to override values by supplying\nadditional YAML values:\n$\nhelm install --generate-name --values\n=\nmyvals.yaml wordpress\nWhen values are passed in this way, they will be merged into the default values\nfile. For example, consider a\nmyvals.yaml\nfile that looks like this:\nstorage\n:\n\"gcs\"\nWhen this is merged with the\nvalues.yaml\nin the chart, the resulting generated\ncontent will be:\nimageRegistry\n:\n\"quay.io/deis\"\ndockerTag\n:\n\"latest\"\npullPolicy\n:\n\"Always\"\nstorage\n:\n\"gcs\"\nNote that only the last field was overridden.\nNOTE:\nThe default values file included inside of a chart\nmust\nbe named\nvalues.yaml\n. But files specified on the command line can be named anything.\nNOTE:\nIf the\n--set\nflag is used on\nhelm install\nor\nhelm upgrade\n, those\nvalues are simply converted to YAML on the client side.\nNOTE:\nIf any required entries in the values file exist, they can be declared\nas required in the chart template by using the\n'required' function\nAny of these values are then accessible inside of templates using the\n.Values\nobject:\napiVersion\n:\nv1\nkind\n:\nReplicationController\nmetadata\n:\nname\n:\ndeis-database\nnamespace\n:\ndeis\nlabels\n:\napp.kubernetes.io/managed-by\n:\ndeis\nspec\n:\nreplicas\n:\n1\nselector\n:\napp.kubernetes.io/name\n:\ndeis-database\ntemplate\n:\nmetadata\n:\nlabels\n:\napp.kubernetes.io/name\n:\ndeis-database\nspec\n:\nserviceAccount\n:\ndeis-database\ncontainers\n:\n-\nname\n:\ndeis-database\nimage\n:\n{{\n.Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}\nimagePullPolicy\n:\n{{\n.Values.pullPolicy }}\nports\n:\n-\ncontainerPort\n:\n5432\nenv\n:\n-\nname\n:\nDATABASE_STORAGE\nvalue\n:\n{{\ndefault \"minio\" .Values.storage }}\nScope, Dependencies, and Values\nValues files can declare values for the top-level chart, as well as for any of\nthe charts that are included in that chart's\ncharts/\ndirectory. Or, to phrase\nit differently, a values file can supply values to the chart as well as to any\nof its dependencies. For example, the demonstration WordPress chart above has\nboth\nmysql\nand\napache\nas dependencies. The values file could supply values\nto all of these components:\ntitle\n:\n\"My WordPress Site\"\n# Sent to the WordPress template\nmysql\n:\nmax_connections\n:\n100\n# Sent to MySQL\npassword\n:\n\"secret\"\napache\n:\nport\n:\n8080\n# Passed to Apache\nCharts at a higher level have access to all of the variables defined beneath. So\nthe WordPress chart can access the MySQL password as\n.Values.mysql.password\n.\nBut lower level charts cannot access things in parent charts, so MySQL will not\nbe able to access the\ntitle\nproperty. Nor, for that matter, can it access\napache.port\n.\nValues are namespaced, but namespaces are pruned. So for the WordPress chart, it\ncan access the MySQL password field as\n.Values.mysql.password\n. But for the\nMySQL chart, the scope of the values has been reduced and the namespace prefix\nremoved, so it will see the password field simply as\n.Values.password\n.\nGlobal Values\nAs of 2.0.0-Alpha.2, Helm supports special \"global\" value. Consider this\nmodified version of the previous example:\ntitle\n:\n\"My WordPress Site\"\n# Sent to the WordPress template\nglobal\n:\napp\n:\nMyWordPress\nmysql\n:\nmax_connections\n:\n100\n# Sent to MySQL\npassword\n:\n\"secret\"\napache\n:\nport\n:\n8080\n# Passed to Apache\nThe above adds a\nglobal\nsection with the value\napp: MyWordPress\n. This value\nis available to\nall\ncharts as\n.Values.global.app\n.\nFor example, the\nmysql\ntemplates may access\napp\nas\n{{ .Values.global.app}}\n, and so can the\napache\nchart. Effectively, the values\nfile above is regenerated like this:\ntitle\n:\n\"My WordPress Site\"\n# Sent to the WordPress template\nglobal\n:\napp\n:\nMyWordPress\nmysql\n:\nglobal\n:\napp\n:\nMyWordPress\nmax_connections\n:\n100\n# Sent to MySQL\npassword\n:\n\"secret\"\napache\n:\nglobal\n:\napp\n:\nMyWordPress\nport\n:\n8080\n# Passed to Apache\nThis provides a way of sharing one top-level variable with all subcharts, which\nis useful for things like setting\nmetadata\nproperties like labels.\nIf a subchart declares a global variable, that global will be passed\ndownward\n(to the subchart's subcharts), but not\nupward\nto the parent chart. There is no\nway for a subchart to influence the values of the parent chart.\nAlso, global variables of parent charts take precedence over the global\nvariables from subcharts.\nSchema Files\nSometimes, a chart maintainer might want to define a structure on their values.\nThis can be done by defining a schema in the\nvalues.schema.json\nfile. A schema\nis represented as a\nJSON Schema\n. It might look\nsomething like this:\n{\n\"$schema\"\n:\n\"https://json-schema.org/draft-07/schema#\"\n,\n\"properties\"\n: {\n\"image\"\n: {\n\"description\"\n:\n\"Container Image\"\n,\n\"properties\"\n: {\n\"repo\"\n: {\n\"type\"\n:\n\"string\"\n},\n\"tag\"\n: {\n\"type\"\n:\n\"string\"\n}\n},\n\"type\"\n:\n\"object\"\n},\n\"name\"\n: {\n\"description\"\n:\n\"Service name\"\n,\n\"type\"\n:\n\"string\"\n},\n\"port\"\n: {\n\"description\"\n:\n\"Port\"\n,\n\"minimum\"\n:\n0\n,\n\"type\"\n:\n\"integer\"\n},\n\"protocol\"\n: {\n\"type\"\n:\n\"string\"\n}\n},\n\"required\"\n: [\n\"protocol\"\n,\n\"port\"\n],\n\"title\"\n:\n\"Values\"\n,\n\"type\"\n:\n\"object\"\n}\nThis schema will be applied to the values to validate it. Validation occurs when\nany of the following commands are invoked:\nhelm install\nhelm upgrade\nhelm lint\nhelm template\nAn example of a\nvalues.yaml\nfile that meets the requirements of this schema\nmight look something like this:\nname\n:\nfrontend\nprotocol\n:\nhttps\nport\n:\n443\nNote that the schema is applied to the final\n.Values\nobject, and not just to\nthe\nvalues.yaml\nfile. This means that the following\nyaml\nfile is valid,\ngiven that the chart is installed with the appropriate\n--set\noption shown\nbelow.\nname\n:\nfrontend\nprotocol\n:\nhttps\nhelm install --set port=443\nFurthermore, the final\n.Values\nobject is checked against\nall\nsubchart\nschemas. This means that restrictions on a subchart can't be circumvented by a\nparent chart. This also works backwards - if a subchart has a requirement that\nis not met in the subchart's\nvalues.yaml\nfile, the parent chart\nmust\nsatisfy\nthose restrictions in order to be valid.\nReferences\nWhen it comes to writing templates, values, and schema files, there are several\nstandard references that will help you out.\nGo templates\nExtra template functions\nThe YAML format\nJSON Schema\nCustom Resource Definitions (CRDs)\nKubernetes provides a mechanism for declaring new types of Kubernetes objects.\nUsing CustomResourceDefinitions (CRDs), Kubernetes developers can declare custom\nresource types.\nIn Helm 3, CRDs are treated as a special kind of object. They are installed\nbefore the rest of the chart, and are subject to some limitations.\nCRD YAML files should be placed in the\ncrds/\ndirectory inside of a chart.\nMultiple CRDs (separated by YAML start and end markers) may be placed in the\nsame file. Helm will attempt to load\nall\nof the files in the CRD directory\ninto Kubernetes.\nCRD files\ncannot be templated\n. They must be plain YAML documents.\nWhen Helm installs a new chart, it will upload the CRDs, pause until the CRDs\nare made available by the API server, and then start the template engine, render\nthe rest of the chart, and upload it to Kubernetes. Because of this ordering,\nCRD information is available in the\n.Capabilities\nobject in Helm templates,\nand Helm templates may create new instances of objects that were declared in\nCRDs.\nFor example, if your chart had a CRD for\nCronTab\nin the\ncrds/\ndirectory, you\nmay create instances of the\nCronTab\nkind in the\ntemplates/\ndirectory:\ncrontabs/\nChart.yaml\ncrds/\ncrontab.yaml\ntemplates/\nmycrontab.yaml\nThe\ncrontab.yaml\nfile must contain the CRD with no template directives:\nkind\n:\nCustomResourceDefinition\nmetadata\n:\nname\n:\ncrontabs.stable.example.com\nspec\n:\ngroup\n:\nstable.example.com\nversions\n:\n-\nname\n:\nv1\nserved\n:\ntrue\nstorage\n:\ntrue\nscope\n:\nNamespaced\nnames\n:\nplural\n:\ncrontabs\nsingular\n:\ncrontab\nkind\n:\nCronTab\nThen the template\nmycrontab.yaml\nmay create a new\nCronTab\n(using templates\nas usual):\napiVersion\n:\nstable.example.com\nkind\n:\nCronTab\nmetadata\n:\nname\n:\n{{\n.Values.name }}\nspec\n:\n# ...\nHelm will make sure that the\nCronTab\nkind has been installed and is available\nfrom the Kubernetes API server before it proceeds installing the things in\ntemplates/\n.\nLimitations on CRDs\nUnlike most objects in Kubernetes, CRDs are installed globally. For that reason,\nHelm takes a very cautious approach in managing CRDs. CRDs are subject to the\nfollowing limitations:\nCRDs are never reinstalled. If Helm determines that the CRDs in the\ncrds/\ndirectory are already present (regardless of version), Helm will not attempt\nto install or upgrade.\nCRDs are never installed on upgrade or rollback. Helm will only create CRDs on\ninstallation operations.\nCRDs are never deleted. Deleting a CRD automatically deletes all of the CRD's\ncontents across all namespaces in the cluster. Consequently, Helm will not\ndelete CRDs.\nOperators who want to upgrade or delete CRDs are encouraged to do this manually\nand with great care.\nUsing Helm to Manage Charts\nThe\nhelm\ntool has several commands for working with charts.\nIt can create a new chart for you:\n$\nhelm create mychart\nCreated mychart/\nOnce you have edited a chart,\nhelm\ncan package it into a chart archive for\nyou:\n$\nhelm package mychart\nArchived mychart-0.1.-.tgz\nYou can also use\nhelm\nto help you find issues with your chart's formatting or\ninformation:\n$\nhelm lint mychart\nNo issues found\nChart Repositories\nA\nchart repository\nis an HTTP server that houses one or more packaged charts.\nWhile\nhelm\ncan be used to manage local chart directories, when it comes to\nsharing charts, the preferred mechanism is a chart repository.\nAny HTTP server that can serve YAML files and tar files and can answer GET\nrequests can be used as a repository server. The Helm team has tested some\nservers, including Google Cloud Storage with website mode enabled, and S3 with\nwebsite mode enabled.\nA repository is characterized primarily by the presence of a special file called\nindex.yaml\nthat has a list of all of the packages supplied by the repository,\ntogether with metadata that allows retrieving and verifying those packages.\nOn the client side, repositories are managed with the\nhelm repo\ncommands.\nHowever, Helm does not provide tools for uploading charts to remote repository\nservers. This is because doing so would add substantial requirements to an\nimplementing server, and thus raise the barrier for setting up a repository.\nChart Starter Packs\nThe\nhelm create\ncommand takes an optional\n--starter\noption that lets you\nspecify a \"starter chart\". Also, the starter option has a short alias\n-p\n.\nExamples of usage:\nhelm create my-chart --starter starter-name\nhelm create my-chart -p starter-name\nhelm create my-chart -p /absolute/path/to/starter-name\nStarters are just regular charts, but are located in\n$XDG_DATA_HOME/helm/starters\n. As a chart developer, you may author charts that\nare specifically designed to be used as starters. Such charts should be designed\nwith the following considerations in mind:\nThe\nChart.yaml\nwill be overwritten by the generator.\nUsers will expect to modify such a chart's contents, so documentation should\nindicate how users can do so.\nAll occurrences of\n<CHARTNAME>\nwill be replaced with the specified chart name so that starter charts can be used as templates, except for some variable files. For example, if you use custom files in the\nvars\ndirectory or certain\nREADME.md\nfiles,\n<CHARTNAME>\nwill NOT override inside them. Additionally, the chart description is not inherited.\nCurrently the only way to add a chart to\n$XDG_DATA_HOME/helm/starters\nis to\nmanually copy it there. In your chart's documentation, you may want to explain\nthat process.\nNext\nChart Hooks →",
      "code_examples": [
        {
          "language": "",
          "code": "helm pull chartrepo/chartname",
          "element": "<code>helm pull chartrepo/chartname</code>"
        },
        {
          "language": "",
          "code": "wordpress/Chart.yaml          # A YAML file containing information about the chartLICENSE             # OPTIONAL: A plain text file containing the license for the chartREADME.md           # OPTIONAL: A human-readable README filevalues.yaml         # The default configuration values for this chartvalues.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml filecharts/             # A directory containing any charts upon which this chart depends.crds/               # Custom Resource Definitionstemplates/          # A directory of templates that, when combined with values,# will generate valid Kubernetes manifest files.templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>wordpress/\n</span></span><span..."
        },
        {
          "language": "language-text",
          "code": "wordpress/Chart.yaml          # A YAML file containing information about the chartLICENSE             # OPTIONAL: A plain text file containing the license for the chartREADME.md           # OPTIONAL: A human-readable README filevalues.yaml         # The default configuration values for this chartvalues.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml filecharts/             # A directory containing any charts upon which this chart depends.crds/               # Custom Resource Definitionstemplates/          # A directory of templates that, when combined with values,# will generate valid Kubernetes manifest files.templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes",
          "element": "<code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>wordpress/\n</span></span><span style=\"display:flex\"><span>  Chart.yaml          # A YAML file containing information about..."
        },
        {
          "language": "",
          "code": "apiVersion:The chart API version (required)name:The name of the chart (required)version:A SemVer 2 version (required)kubeVersion:A SemVer range of compatible Kubernetes versions (optional)description:A single-sentence description of this project (optional)type:The type of the chart (optional)keywords:- A list of keywords about this project (optional)home:The URL of this projects home page (optional)sources:- A list of URLs to source code for this project (optional)dependencies:# A list of the chart requirements (optional)-name:The name of the chart (nginx)version:The version of the chart (\"1.2.3\")repository:(optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")condition:(optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )tags:# (optional)- Tags can be used to group charts for enabling/disabling togetherimport-values:# (optional)- ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.alias:(optional) Alias to be used for the chart. Useful when you have to add the same chart multiple timesmaintainers:# (optional)-name:The maintainers name (required for each maintainer)email:The maintainers email (optional for each maintainer)url:A URL for the maintainer (optional for each maintainer)icon:A URL to an SVG or PNG image to be used as an icon (optional).appVersion:The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.deprecated:Whether this chart is deprecated (optional, boolean)annotations:example:A list of annotations keyed by name (optional).",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:The chart API version (required)name:The name of the chart (required)version:A SemVer 2 version (required)kubeVersion:A SemVer range of compatible Kubernetes versions (optional)description:A single-sentence description of this project (optional)type:The type of the chart (optional)keywords:- A list of keywords about this project (optional)home:The URL of this projects home page (optional)sources:- A list of URLs to source code for this project (optional)dependencies:# A list of the chart requirements (optional)-name:The name of the chart (nginx)version:The version of the chart (\"1.2.3\")repository:(optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")condition:(optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )tags:# (optional)- Tags can be used to group charts for enabling/disabling togetherimport-values:# (optional)- ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.alias:(optional) Alias to be used for the chart. Useful when you have to add the same chart multiple timesmaintainers:# (optional)-name:The maintainers name (required for each maintainer)email:The maintainers email (optional for each maintainer)url:A URL for the maintainer (optional for each maintainer)icon:A URL to an SVG or PNG image to be used as an icon (optional).appVersion:The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.deprecated:Whether this chart is deprecated (optional, boolean)annotations:example:A list of annotations keyed by name (optional).",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>The chart API version (require..."
        },
        {
          "language": "",
          "code": "annotations",
          "element": "<code>annotations</code>"
        },
        {
          "language": "",
          "code": "version: 1.2.3",
          "element": "<code>version: 1.2.3</code>"
        },
        {
          "language": "",
          "code": "nginx-1.2.3.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>nginx-1.2.3.tgz\n</span></span>..."
        },
        {
          "language": "language-text",
          "code": "nginx-1.2.3.tgz",
          "element": "<code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>nginx-1.2.3.tgz\n</span></span></code>"
        },
        {
          "language": "",
          "code": "version: 1.2.3-alpha.1+ef365",
          "element": "<code>version: 1.2.3-alpha.1+ef365</code>"
        },
        {
          "language": "",
          "code": "helm package",
          "element": "<code>helm package</code>"
        },
        {
          "language": "",
          "code": "dependencies",
          "element": "<code>dependencies</code>"
        },
        {
          "language": "",
          "code": "requirements.yaml",
          "element": "<code>requirements.yaml</code>"
        },
        {
          "language": "",
          "code": "appVersion: \"8.2.1\"",
          "element": "<code>appVersion: \"8.2.1\"</code>"
        },
        {
          "language": "",
          "code": "helm create",
          "element": "<code>helm create</code>"
        },
        {
          "language": "",
          "code": "kubeVersion",
          "element": "<code>kubeVersion</code>"
        },
        {
          "language": "",
          "code": "kubeVersion",
          "element": "<code>kubeVersion</code>"
        },
        {
          "language": "",
          "code": ">= 1.13.0 < 1.15.0",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>&gt;= 1.13.0 &lt; 1.15..."
        },
        {
          "language": "language-fallback",
          "code": ">= 1.13.0 < 1.15.0",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>&gt;= 1.13.0 &lt; 1.15.0\n</span></span></code>"
        },
        {
          "language": "",
          "code": ">= 1.13.0 < 1.14.0 || >= 1.14.1 < 1.15.0",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>&gt;= 1.13.0 &lt; 1.14..."
        },
        {
          "language": "language-fallback",
          "code": ">= 1.13.0 < 1.14.0 || >= 1.14.1 < 1.15.0",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>&gt;= 1.13.0 &lt; 1.14.0 || &gt;= 1.14.1 &lt; 1.15.0\n</span></span></code>"
        },
        {
          "language": "",
          "code": "1.1 - 2.3.4",
          "element": "<code>1.1 - 2.3.4</code>"
        },
        {
          "language": "",
          "code": ">= 1.1 <= 2.3.4",
          "element": "<code>&gt;= 1.1 &lt;= 2.3.4</code>"
        },
        {
          "language": "",
          "code": ">= 1.2.0 < 1.3.0",
          "element": "<code>&gt;= 1.2.0 &lt; 1.3.0</code>"
        },
        {
          "language": "",
          "code": ">= 1.2.3 < 1.3.0",
          "element": "<code>&gt;= 1.2.3 &lt; 1.3.0</code>"
        },
        {
          "language": "",
          "code": ">= 1.2.3 < 2.0.0",
          "element": "<code>&gt;= 1.2.3 &lt; 2.0.0</code>"
        },
        {
          "language": "",
          "code": "application",
          "element": "<code>application</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "templates/NOTES.txt",
          "element": "<code>templates/NOTES.txt</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm status",
          "element": "<code>helm status</code>"
        },
        {
          "language": "",
          "code": "dependencies",
          "element": "<code>dependencies</code>"
        },
        {
          "language": "",
          "code": "dependencies",
          "element": "<code>dependencies</code>"
        },
        {
          "language": "",
          "code": "dependencies",
          "element": "<code>dependencies</code>"
        },
        {
          "language": "",
          "code": "dependencies:-name:apacheversion:1.2.3repository:https://example.com/charts-name:mysqlversion:3.2.1repository:https://another.example.com/charts",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "dependencies:-name:apacheversion:1.2.3repository:https://example.com/charts-name:mysqlversion:3.2.1repository:https://another.example.com/charts",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">dependencies</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"d..."
        },
        {
          "language": "",
          "code": "helm repo add",
          "element": "<code>helm repo add</code>"
        },
        {
          "language": "",
          "code": "$helm repo add fantastic-charts https://charts.helm.sh/incubator",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add fantastic-charts https://charts.helm.sh/incubator",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add fantastic-charts https://charts.helm.sh/incubator\n</..."
        },
        {
          "language": "",
          "code": "dependencies:-name:awesomenessversion:1.0.0repository:\"@fantastic-charts\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "dependencies:-name:awesomenessversion:1.0.0repository:\"@fantastic-charts\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">dependencies</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"d..."
        },
        {
          "language": "",
          "code": "helm dependency update",
          "element": "<code>helm dependency update</code>"
        },
        {
          "language": "",
          "code": "$helm dep up foochartHang tight while we grab the latest from your chart repositories......Successfully got an update from the \"local\" chart repository...Successfully got an update from the \"stable\" chart repository...Successfully got an update from the \"example\" chart repository...Successfully got an update from the \"another\" chart repositoryUpdate Complete. Happy Helming!Saving 2 chartsDownloading apache from repo https://example.com/chartsDownloading mysql from repo https://another.example.com/charts",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm dep up foochartHang tight while we grab the latest from your chart repositories......Successfully got an update from the \"local\" chart repository...Successfully got an update from the \"stable\" chart repository...Successfully got an update from the \"example\" chart repository...Successfully got an update from the \"another\" chart repositoryUpdate Complete. Happy Helming!Saving 2 chartsDownloading apache from repo https://example.com/chartsDownloading mysql from repo https://another.example.com/charts",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm dep up foochart\n</span></span><span style=\"display:flex\"><spa..."
        },
        {
          "language": "",
          "code": "helm dependency update",
          "element": "<code>helm dependency update</code>"
        },
        {
          "language": "",
          "code": "charts/apache-1.2.3.tgzmysql-3.2.1.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>charts/\n</span></span><span st..."
        },
        {
          "language": "language-text",
          "code": "charts/apache-1.2.3.tgzmysql-3.2.1.tgz",
          "element": "<code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>charts/\n</span></span><span style=\"display:flex\"><span>  apache-1.2.3.tgz\n</span></span><span style=\"display:flex\"><span> ..."
        },
        {
          "language": "",
          "code": "# parentchart/Chart.yamldependencies:-name:subchartrepository:http://localhost:10191version:0.1.0alias:new-subchart-1-name:subchartrepository:http://localhost:10191version:0.1.0alias:new-subchart-2-name:subchartrepository:http://localhost:10191version:0.1.0",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parentchart/Chart.yamldependencies:-name:subchartrepository:http://localhost:10191version:0.1.0alias:new-subchart-1-name:subchartrepository:http://localhost:10191version:0.1.0alias:new-subchart-2-name:subchartrepository:http://localhost:10191version:0.1.0",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parentchart/Chart.yaml</span><span style=\"color:#bbb\">\n</span></span></span><..."
        },
        {
          "language": "",
          "code": "parentchart",
          "element": "<code>parentchart</code>"
        },
        {
          "language": "",
          "code": "subchartnew-subchart-1new-subchart-2",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>subchart\n</span></span><span s..."
        },
        {
          "language": "language-text",
          "code": "subchartnew-subchart-1new-subchart-2",
          "element": "<code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>subchart\n</span></span><span style=\"display:flex\"><span>new-subchart-1\n</span></span><span style=\"display:flex\"><span>new-..."
        },
        {
          "language": "",
          "code": "# parentchart/Chart.yamldependencies:-name:subchart1repository:http://localhost:10191version:0.1.0condition:subchart1.enabled,global.subchart1.enabledtags:- front-end- subchart1-name:subchart2repository:http://localhost:10191version:0.1.0condition:subchart2.enabled,global.subchart2.enabledtags:- back-end- subchart2",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parentchart/Chart.yamldependencies:-name:subchart1repository:http://localhost:10191version:0.1.0condition:subchart1.enabled,global.subchart1.enabledtags:- front-end- subchart1-name:subchart2repository:http://localhost:10191version:0.1.0condition:subchart2.enabled,global.subchart2.enabledtags:- back-end- subchart2",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parentchart/Chart.yaml</span><span style=\"color:#bbb\">\n</span></span></span><..."
        },
        {
          "language": "",
          "code": "# parentchart/values.yamlsubchart1:enabled:truetags:front-end:falseback-end:true",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parentchart/values.yamlsubchart1:enabled:truetags:front-end:falseback-end:true",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parentchart/values.yaml</span><span style=\"color:#bbb\">\n</span></span></span>..."
        },
        {
          "language": "",
          "code": "subchart1.enabled",
          "element": "<code>subchart1.enabled</code>"
        },
        {
          "language": "",
          "code": "helm install --set tags.front-end=true --set subchart2.enabled=false",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "helm install --set tags.front-end=true --set subchart2.enabled=false",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">helm install --set tags.front-end=true --set subchart2.enabled=false\n</span></span></span><..."
        },
        {
          "language": "",
          "code": "dependencies",
          "element": "<code>dependencies</code>"
        },
        {
          "language": "",
          "code": "import-values",
          "element": "<code>import-values</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "# parent's Chart.yaml filedependencies:-name:subchartrepository:http://localhost:10191version:0.1.0import-values:- data",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parent's Chart.yaml filedependencies:-name:subchartrepository:http://localhost:10191version:0.1.0import-values:- data",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parent's Chart.yaml file</span><span style=\"color:#bbb\">\n</span></span></span..."
        },
        {
          "language": "",
          "code": "# child's values.yaml fileexports:data:myint:99",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# child's values.yaml fileexports:data:myint:99",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># child's values.yaml file</span><span style=\"color:#bbb\">\n</span></span></span..."
        },
        {
          "language": "",
          "code": "# parent's valuesmyint:99",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parent's valuesmyint:99",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parent's values</span><span style=\"color:#bbb\">\n</span></span></span><span st..."
        },
        {
          "language": "",
          "code": "import-values",
          "element": "<code>import-values</code>"
        },
        {
          "language": "",
          "code": "# parent's Chart.yaml filedependencies:-name:subchart1repository:http://localhost:10191version:0.1.0...import-values:-child:default.dataparent:myimports",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parent's Chart.yaml filedependencies:-name:subchart1repository:http://localhost:10191version:0.1.0...import-values:-child:default.dataparent:myimports",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parent's Chart.yaml file</span><span style=\"color:#bbb\">\n</span></span></span..."
        },
        {
          "language": "",
          "code": "default.data",
          "element": "<code>default.data</code>"
        },
        {
          "language": "",
          "code": "# parent's values.yaml filemyimports:myint:0mybool:falsemystring:\"helm rocks!\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parent's values.yaml filemyimports:myint:0mybool:falsemystring:\"helm rocks!\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parent's values.yaml file</span><span style=\"color:#bbb\">\n</span></span></spa..."
        },
        {
          "language": "",
          "code": "# subchart1's values.yaml filedefault:data:myint:999mybool:true",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# subchart1's values.yaml filedefault:data:myint:999mybool:true",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># subchart1's values.yaml file</span><span style=\"color:#bbb\">\n</span></span></..."
        },
        {
          "language": "",
          "code": "# parent's final valuesmyimports:myint:999mybool:truemystring:\"helm rocks!\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# parent's final valuesmyimports:myint:999mybool:truemystring:\"helm rocks!\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># parent's final values</span><span style=\"color:#bbb\">\n</span></span></span><s..."
        },
        {
          "language": "",
          "code": "wordpress:Chart.yaml# ...charts/apache/Chart.yaml# ...mysql/Chart.yaml# ...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "wordpress:Chart.yaml# ...charts/apache/Chart.yaml# ...mysql/Chart.yaml# ...",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">wordpress</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"disp..."
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "apiVersion:v1kind:ReplicationControllermetadata:name:deis-databasenamespace:deislabels:app.kubernetes.io/managed-by:deisspec:replicas:1selector:app.kubernetes.io/name:deis-databasetemplate:metadata:labels:app.kubernetes.io/name:deis-databasespec:serviceAccount:deis-databasecontainers:-name:deis-databaseimage:{{.Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}imagePullPolicy:{{.Values.pullPolicy }}ports:-containerPort:5432env:-name:DATABASE_STORAGEvalue:{{default \"minio\" .Values.storage }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v1kind:ReplicationControllermetadata:name:deis-databasenamespace:deislabels:app.kubernetes.io/managed-by:deisspec:replicas:1selector:app.kubernetes.io/name:deis-databasetemplate:metadata:labels:app.kubernetes.io/name:deis-databasespec:serviceAccount:deis-databasecontainers:-name:deis-databaseimage:{{.Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}imagePullPolicy:{{.Values.pullPolicy }}ports:-containerPort:5432env:-name:DATABASE_STORAGEvalue:{{default \"minio\" .Values.storage }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "imageRegistry",
          "element": "<code>imageRegistry</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "Release.Name",
          "element": "<code>Release.Name</code>"
        },
        {
          "language": "",
          "code": "Release.Namespace",
          "element": "<code>Release.Namespace</code>"
        },
        {
          "language": "",
          "code": "Release.Service",
          "element": "<code>Release.Service</code>"
        },
        {
          "language": "",
          "code": "Release.IsUpgrade",
          "element": "<code>Release.IsUpgrade</code>"
        },
        {
          "language": "",
          "code": "Release.IsInstall",
          "element": "<code>Release.IsInstall</code>"
        },
        {
          "language": "",
          "code": "Chart.Version",
          "element": "<code>Chart.Version</code>"
        },
        {
          "language": "",
          "code": "Chart.Maintainers",
          "element": "<code>Chart.Maintainers</code>"
        },
        {
          "language": "",
          "code": ".helmignore",
          "element": "<code>.helmignore</code>"
        },
        {
          "language": "",
          "code": "{{ index .Files \"file.name\" }}",
          "element": "<code>{{ index .Files \"file.name\" }}</code>"
        },
        {
          "language": "",
          "code": "{{.Files.Get name }}",
          "element": "<code>{{.Files.Get name }}</code>"
        },
        {
          "language": "",
          "code": "{{ .Files.GetBytes }}",
          "element": "<code>{{ .Files.GetBytes }}</code>"
        },
        {
          "language": "",
          "code": "Capabilities",
          "element": "<code>Capabilities</code>"
        },
        {
          "language": "",
          "code": "{{ .Capabilities.KubeVersion }}",
          "element": "<code>{{ .Capabilities.KubeVersion }}</code>"
        },
        {
          "language": "",
          "code": "{{ .Capabilities.APIVersions.Has \"batch/v1\" }}",
          "element": "<code>{{ .Capabilities.APIVersions.Has \"batch/v1\" }}</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "imageRegistry:\"quay.io/deis\"dockerTag:\"latest\"pullPolicy:\"Always\"storage:\"s3\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "imageRegistry:\"quay.io/deis\"dockerTag:\"latest\"pullPolicy:\"Always\"storage:\"s3\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">imageRegistry</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"q..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "$helm install --generate-name --values=myvals.yaml wordpress",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install --generate-name --values=myvals.yaml wordpress",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install --generate-name --values<span style=\"color:#555\">=</s..."
        },
        {
          "language": "",
          "code": "myvals.yaml",
          "element": "<code>myvals.yaml</code>"
        },
        {
          "language": "",
          "code": "storage:\"gcs\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "storage:\"gcs\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">storage</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"gcs\"</s..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "imageRegistry:\"quay.io/deis\"dockerTag:\"latest\"pullPolicy:\"Always\"storage:\"gcs\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "imageRegistry:\"quay.io/deis\"dockerTag:\"latest\"pullPolicy:\"Always\"storage:\"gcs\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">imageRegistry</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"q..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "apiVersion:v1kind:ReplicationControllermetadata:name:deis-databasenamespace:deislabels:app.kubernetes.io/managed-by:deisspec:replicas:1selector:app.kubernetes.io/name:deis-databasetemplate:metadata:labels:app.kubernetes.io/name:deis-databasespec:serviceAccount:deis-databasecontainers:-name:deis-databaseimage:{{.Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}imagePullPolicy:{{.Values.pullPolicy }}ports:-containerPort:5432env:-name:DATABASE_STORAGEvalue:{{default \"minio\" .Values.storage }}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v1kind:ReplicationControllermetadata:name:deis-databasenamespace:deislabels:app.kubernetes.io/managed-by:deisspec:replicas:1selector:app.kubernetes.io/name:deis-databasetemplate:metadata:labels:app.kubernetes.io/name:deis-databasespec:serviceAccount:deis-databasecontainers:-name:deis-databaseimage:{{.Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}imagePullPolicy:{{.Values.pullPolicy }}ports:-containerPort:5432env:-name:DATABASE_STORAGEvalue:{{default \"minio\" .Values.storage }}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "title:\"My WordPress Site\"# Sent to the WordPress templatemysql:max_connections:100# Sent to MySQLpassword:\"secret\"apache:port:8080# Passed to Apache",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "title:\"My WordPress Site\"# Sent to the WordPress templatemysql:max_connections:100# Sent to MySQLpassword:\"secret\"apache:port:8080# Passed to Apache",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">title</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"My WordPr..."
        },
        {
          "language": "",
          "code": ".Values.mysql.password",
          "element": "<code>.Values.mysql.password</code>"
        },
        {
          "language": "",
          "code": "apache.port",
          "element": "<code>apache.port</code>"
        },
        {
          "language": "",
          "code": ".Values.mysql.password",
          "element": "<code>.Values.mysql.password</code>"
        },
        {
          "language": "",
          "code": ".Values.password",
          "element": "<code>.Values.password</code>"
        },
        {
          "language": "",
          "code": "title:\"My WordPress Site\"# Sent to the WordPress templateglobal:app:MyWordPressmysql:max_connections:100# Sent to MySQLpassword:\"secret\"apache:port:8080# Passed to Apache",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "title:\"My WordPress Site\"# Sent to the WordPress templateglobal:app:MyWordPressmysql:max_connections:100# Sent to MySQLpassword:\"secret\"apache:port:8080# Passed to Apache",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">title</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"My WordPr..."
        },
        {
          "language": "",
          "code": "app: MyWordPress",
          "element": "<code>app: MyWordPress</code>"
        },
        {
          "language": "",
          "code": ".Values.global.app",
          "element": "<code>.Values.global.app</code>"
        },
        {
          "language": "",
          "code": "{{ .Values.global.app}}",
          "element": "<code>{{ .Values.global.app}}</code>"
        },
        {
          "language": "",
          "code": "title:\"My WordPress Site\"# Sent to the WordPress templateglobal:app:MyWordPressmysql:global:app:MyWordPressmax_connections:100# Sent to MySQLpassword:\"secret\"apache:global:app:MyWordPressport:8080# Passed to Apache",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "title:\"My WordPress Site\"# Sent to the WordPress templateglobal:app:MyWordPressmysql:global:app:MyWordPressmax_connections:100# Sent to MySQLpassword:\"secret\"apache:global:app:MyWordPressport:8080# Passed to Apache",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">title</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#c30\">\"My WordPr..."
        },
        {
          "language": "",
          "code": "values.schema.json",
          "element": "<code>values.schema.json</code>"
        },
        {
          "language": "",
          "code": "{\"$schema\":\"https://json-schema.org/draft-07/schema#\",\"properties\": {\"image\": {\"description\":\"Container Image\",\"properties\": {\"repo\": {\"type\":\"string\"},\"tag\": {\"type\":\"string\"}},\"type\":\"object\"},\"name\": {\"description\":\"Service name\",\"type\":\"string\"},\"port\": {\"description\":\"Port\",\"minimum\":0,\"type\":\"integer\"},\"protocol\": {\"type\":\"string\"}},\"required\": [\"protocol\",\"port\"],\"title\":\"Values\",\"type\":\"object\"}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex\"><span>{\n</span></span><span style=\"d..."
        },
        {
          "language": "language-json",
          "code": "{\"$schema\":\"https://json-schema.org/draft-07/schema#\",\"properties\": {\"image\": {\"description\":\"Container Image\",\"properties\": {\"repo\": {\"type\":\"string\"},\"tag\": {\"type\":\"string\"}},\"type\":\"object\"},\"name\": {\"description\":\"Service name\",\"type\":\"string\"},\"port\": {\"description\":\"Port\",\"minimum\":0,\"type\":\"integer\"},\"protocol\": {\"type\":\"string\"}},\"required\": [\"protocol\",\"port\"],\"title\":\"Values\",\"type\":\"object\"}",
          "element": "<code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex\"><span>{\n</span></span><span style=\"display:flex\"><span>  <span style=\"color:#309;font-weight:700\">\"$schema\"</span>: <span style=..."
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "helm template",
          "element": "<code>helm template</code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "name:frontendprotocol:httpsport:443",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:frontendprotocol:httpsport:443",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>frontend<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": "name:frontendprotocol:https",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:frontendprotocol:https",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>frontend<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "helm install --set port=443",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "helm install --set port=443",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">helm install --set port=443\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "values.yaml",
          "element": "<code>values.yaml</code>"
        },
        {
          "language": "",
          "code": ".Capabilities",
          "element": "<code>.Capabilities</code>"
        },
        {
          "language": "",
          "code": "crontabs/Chart.yamlcrds/crontab.yamltemplates/mycrontab.yaml",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>crontabs/\n</span></span><span ..."
        },
        {
          "language": "language-text",
          "code": "crontabs/Chart.yamlcrds/crontab.yamltemplates/mycrontab.yaml",
          "element": "<code class=\"language-text\" data-lang=\"text\"><span style=\"display:flex\"><span>crontabs/\n</span></span><span style=\"display:flex\"><span>  Chart.yaml\n</span></span><span style=\"display:flex\"><span>  crd..."
        },
        {
          "language": "",
          "code": "crontab.yaml",
          "element": "<code>crontab.yaml</code>"
        },
        {
          "language": "",
          "code": "kind:CustomResourceDefinitionmetadata:name:crontabs.stable.example.comspec:group:stable.example.comversions:-name:v1served:truestorage:truescope:Namespacednames:plural:crontabssingular:crontabkind:CronTab",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "kind:CustomResourceDefinitionmetadata:name:crontabs.stable.example.comspec:group:stable.example.comversions:-name:v1served:truestorage:truescope:Namespacednames:plural:crontabssingular:crontabkind:CronTab",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">kind</span>:<span style=\"color:#bbb\"> </span>CustomResourceDefinition<span style=..."
        },
        {
          "language": "",
          "code": "mycrontab.yaml",
          "element": "<code>mycrontab.yaml</code>"
        },
        {
          "language": "",
          "code": "apiVersion:stable.example.comkind:CronTabmetadata:name:{{.Values.name }}spec:# ...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:stable.example.comkind:CronTabmetadata:name:{{.Values.name }}spec:# ...",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>stable.example.com<span style=..."
        },
        {
          "language": "",
          "code": "$helm create mychartCreated mychart/",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create mychartCreated mychart/",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create mychart\n</span></span><span style=\"display:flex\"><span..."
        },
        {
          "language": "",
          "code": "$helm package mychartArchived mychart-0.1.-.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm package mychartArchived mychart-0.1.-.tgz",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm package mychart\n</span></span><span style=\"display:flex\"><spa..."
        },
        {
          "language": "",
          "code": "$helm lint mychartNo issues found",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm lint mychartNo issues found",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm lint mychart\n</span></span><span style=\"display:flex\"><span><..."
        },
        {
          "language": "",
          "code": "helm create",
          "element": "<code>helm create</code>"
        },
        {
          "language": "",
          "code": "helm create my-chart --starter starter-namehelm create my-chart -p starter-namehelm create my-chart -p /absolute/path/to/starter-name",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "helm create my-chart --starter starter-namehelm create my-chart -p starter-namehelm create my-chart -p /absolute/path/to/starter-name",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">helm create my-chart --starter starter-name\n</span></span></span><span style=\"display:flex\"..."
        },
        {
          "language": "",
          "code": "$XDG_DATA_HOME/helm/starters",
          "element": "<code>$XDG_DATA_HOME/helm/starters</code>"
        },
        {
          "language": "",
          "code": "<CHARTNAME>",
          "element": "<code>&lt;CHARTNAME&gt;</code>"
        },
        {
          "language": "",
          "code": "<CHARTNAME>",
          "element": "<code>&lt;CHARTNAME&gt;</code>"
        },
        {
          "language": "",
          "code": "$XDG_DATA_HOME/helm/starters",
          "element": "<code>$XDG_DATA_HOME/helm/starters</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Charts",
          "id": ""
        },
        {
          "level": 2,
          "text": "The Chart File Structure",
          "id": "the-chart-file-structure"
        },
        {
          "level": 2,
          "text": "The Chart.yaml File",
          "id": "the-chartyaml-file"
        },
        {
          "level": 2,
          "text": "Chart LICENSE, README and NOTES",
          "id": "chart-license-readme-and-notes"
        },
        {
          "level": 2,
          "text": "Chart Dependencies",
          "id": "chart-dependencies"
        },
        {
          "level": 2,
          "text": "Templates and Values",
          "id": "templates-and-values"
        },
        {
          "level": 2,
          "text": "Custom Resource Definitions (CRDs)",
          "id": "custom-resource-definitions-crds"
        },
        {
          "level": 2,
          "text": "Using Helm to Manage Charts",
          "id": "using-helm-to-manage-charts"
        },
        {
          "level": 2,
          "text": "Chart Repositories",
          "id": "chart-repositories"
        },
        {
          "level": 2,
          "text": "Chart Starter Packs",
          "id": "chart-starter-packs"
        },
        {
          "level": 3,
          "text": "Charts and Versioning",
          "id": "charts-and-versioning"
        },
        {
          "level": 3,
          "text": "TheapiVersionField",
          "id": "the-apiversion-field"
        },
        {
          "level": 3,
          "text": "TheappVersionField",
          "id": "the-appversion-field"
        },
        {
          "level": 3,
          "text": "ThekubeVersionField",
          "id": "the-kubeversion-field"
        },
        {
          "level": 3,
          "text": "Deprecating Charts",
          "id": "deprecating-charts"
        },
        {
          "level": 3,
          "text": "Chart Types",
          "id": "chart-types"
        },
        {
          "level": 3,
          "text": "Managing Dependencies with thedependenciesfield",
          "id": "managing-dependencies-with-the-dependencies-field"
        },
        {
          "level": 3,
          "text": "Managing Dependencies manually via thecharts/directory",
          "id": "managing-dependencies-manually-via-the-charts-directory"
        },
        {
          "level": 3,
          "text": "Operational aspects of using dependencies",
          "id": "operational-aspects-of-using-dependencies"
        },
        {
          "level": 3,
          "text": "Template Files",
          "id": "template-files"
        },
        {
          "level": 3,
          "text": "Predefined Values",
          "id": "predefined-values"
        },
        {
          "level": 3,
          "text": "Values files",
          "id": "values-files"
        },
        {
          "level": 3,
          "text": "Scope, Dependencies, and Values",
          "id": "scope-dependencies-and-values"
        },
        {
          "level": 3,
          "text": "Schema Files",
          "id": "schema-files"
        },
        {
          "level": 3,
          "text": "References",
          "id": "references"
        },
        {
          "level": 3,
          "text": "Limitations on CRDs",
          "id": "limitations-on-crds"
        },
        {
          "level": 4,
          "text": "Alias field in dependencies",
          "id": "alias-field-in-dependencies"
        },
        {
          "level": 4,
          "text": "Tags and Condition fields in dependencies",
          "id": "tags-and-condition-fields-in-dependencies"
        },
        {
          "level": 4,
          "text": "Importing Child Values via dependencies",
          "id": "importing-child-values-via-dependencies"
        },
        {
          "level": 4,
          "text": "Global Values",
          "id": "global-values"
        },
        {
          "level": 5,
          "text": "Using the CLI with Tags and Conditions",
          "id": "using-the-cli-with-tags-and-conditions"
        },
        {
          "level": 5,
          "text": "Tags and Condition Resolution",
          "id": "tags-and-condition-resolution"
        },
        {
          "level": 5,
          "text": "Using the exports format",
          "id": "using-the-exports-format"
        },
        {
          "level": 5,
          "text": "Using the child-parent format",
          "id": "using-the-child-parent-format"
        }
      ],
      "timestamp": 1750732655.3091662
    },
    {
      "url": "https://helm.sh/docs/topics/charts_hooks/",
      "title": "Helm | Chart Hooks",
      "content": "Chart Hooks\nHelm provides a\nhook\nmechanism to allow chart developers to intervene at\ncertain points in a release's life cycle. For example, you can use hooks to:\nLoad a ConfigMap or Secret during install before any other charts are loaded.\nExecute a Job to back up a database before installing a new chart, and then\nexecute a second job after the upgrade in order to restore data.\nRun a Job before deleting a release to gracefully take a service out of\nrotation before removing it.\nHooks work like regular templates, but they have special annotations that cause\nHelm to utilize them differently. In this section, we cover the basic usage\npattern for hooks.\nThe Available Hooks\nThe following hooks are defined:\nAnnotation Value\nDescription\npre-install\nExecutes after templates are rendered, but before any resources are created in Kubernetes\npost-install\nExecutes after all resources are loaded into Kubernetes\npre-delete\nExecutes on a deletion request before any resources are deleted from Kubernetes\npost-delete\nExecutes on a deletion request after all of the release's resources have been deleted\npre-upgrade\nExecutes on an upgrade request after templates are rendered, but before any resources are updated\npost-upgrade\nExecutes on an upgrade request after all resources have been upgraded\npre-rollback\nExecutes on a rollback request after templates are rendered, but before any resources are rolled back\npost-rollback\nExecutes on a rollback request after all resources have been modified\ntest\nExecutes when the Helm test subcommand is invoked (\nview test docs\n)\nNote that the\ncrd-install\nhook has been removed in favor of the\ncrds/\ndirectory in Helm 3.\nHooks and the Release Lifecycle\nHooks allow you, the chart developer, an opportunity to perform operations at\nstrategic points in a release lifecycle. For example, consider the lifecycle for\na\nhelm install\n. By default, the lifecycle looks like this:\nUser runs\nhelm install foo\nThe Helm library install API is called\nAfter some verification, the library renders the\nfoo\ntemplates\nThe library loads the resulting resources into Kubernetes\nThe library returns the release object (and other data) to the client\nThe client exits\nHelm defines two hooks for the\ninstall\nlifecycle:\npre-install\nand\npost-install\n. If the developer of the\nfoo\nchart implements both hooks, the\nlifecycle is altered like this:\nUser runs\nhelm install foo\nThe Helm library install API is called\nCRDs in the\ncrds/\ndirectory are installed\nAfter some verification, the library renders the\nfoo\ntemplates\nThe library prepares to execute the\npre-install\nhooks (loading hook\nresources into Kubernetes)\nThe library sorts hooks by weight (assigning a weight of 0 by default),\nby resource kind and finally by name in ascending order.\nThe library then loads the hook with the lowest weight first (negative to\npositive)\nThe library waits until the hook is \"Ready\" (except for CRDs)\nThe library loads the resulting resources into Kubernetes. Note that if the\n--wait\nflag is set, the library will wait until all resources are in a\nready state and will not run the\npost-install\nhook until they are ready.\nThe library executes the\npost-install\nhook (loading hook resources)\nThe library waits until the hook is \"Ready\"\nThe library returns the release object (and other data) to the client\nThe client exits\nWhat does it mean to wait until a hook is ready? This depends on the resource\ndeclared in the hook. If the resource is a\nJob\nor\nPod\nkind, Helm will wait\nuntil it successfully runs to completion. And if the hook fails, the release\nwill fail. This is a\nblocking operation\n, so the Helm client will pause while\nthe Job is run.\nFor all other kinds, as soon as Kubernetes marks the resource as loaded (added\nor updated), the resource is considered \"Ready\". When many resources are\ndeclared in a hook, the resources are executed serially. If they have hook\nweights (see below), they are executed in weighted order.\nStarting from Helm 3.2.0 hook resources with same weight are installed in the same\norder as normal non-hook resources. Otherwise, ordering is\nnot guaranteed. (In Helm 2.3.0 and after, they are sorted alphabetically. That\nbehavior, though, is not considered binding and could change in the future.) It\nis considered good practice to add a hook weight, and set it to\n0\nif weight is\nnot important.\nHook resources are not managed with corresponding releases\nThe resources that a hook creates are currently not tracked or managed as part\nof the release. Once Helm verifies that the hook has reached its ready state, it\nwill leave the hook resource alone. Garbage collection of hook resources when\nthe corresponding release is deleted may be added to Helm 3 in the future, so\nany hook resources that must never be deleted should be annotated with\nhelm.sh/resource-policy: keep\n.\nPractically speaking, this means that if you create resources in a hook, you\ncannot rely upon\nhelm uninstall\nto remove the resources. To destroy such\nresources, you need to either\nadd a custom\nhelm.sh/hook-delete-policy\nannotation\nto the hook template file, or\nset the time\nto live (TTL) field of a Job\nresource\n.\nWriting a Hook\nHooks are just Kubernetes manifest files with special annotations in the\nmetadata\nsection. Because they are template files, you can use all of the\nnormal template features, including reading\n.Values\n,\n.Release\n, and\n.Template\n.\nFor example, this template, stored in\ntemplates/post-install-job.yaml\n,\ndeclares a job to be run on\npost-install\n:\napiVersion\n:\nbatch/v1\nkind\n:\nJob\nmetadata\n:\nname\n:\n\"{{ .Release.Name }}\"\nlabels\n:\napp.kubernetes.io/managed-by\n:\n{{\n.Release.Service | quote }}\napp.kubernetes.io/instance\n:\n{{\n.Release.Name | quote }}\napp.kubernetes.io/version\n:\n{{\n.Chart.AppVersion }}\nhelm.sh/chart\n:\n\"{{ .Chart.Name }}-{{ .Chart.Version }}\"\nannotations\n:\n# This is what defines this resource as a hook. Without this line, the\n# job is considered part of the release.\n\"helm.sh/hook\":\npost-install\n\"helm.sh/hook-weight\":\n\"-5\"\n\"helm.sh/hook-delete-policy\":\nhook-succeeded\nspec\n:\ntemplate\n:\nmetadata\n:\nname\n:\n\"{{ .Release.Name }}\"\nlabels\n:\napp.kubernetes.io/managed-by\n:\n{{\n.Release.Service | quote }}\napp.kubernetes.io/instance\n:\n{{\n.Release.Name | quote }}\nhelm.sh/chart\n:\n\"{{ .Chart.Name }}-{{ .Chart.Version }}\"\nspec\n:\nrestartPolicy\n:\nNever\ncontainers\n:\n-\nname\n:\npost-install-job\nimage\n:\n\"alpine:3.3\"\ncommand\n:\n[\n\"/bin/sleep\"\n,\n\"{{ default \"\n10\n\" .Values.sleepyTime }}\"\n]\nWhat makes this template a hook is the annotation:\nannotations\n:\n\"helm.sh/hook\":\npost-install\nOne resource can implement multiple hooks:\nannotations\n:\n\"helm.sh/hook\":\npost-install,post-upgrade\nSimilarly, there is no limit to the number of different resources that may\nimplement a given hook. For example, one could declare both a secret and a\nconfig map as a pre-install hook.\nWhen subcharts declare hooks, those are also evaluated. There is no way for a\ntop-level chart to disable the hooks declared by subcharts.\nIt is possible to define a weight for a hook which will help build a\ndeterministic executing order. Weights are defined using the following\nannotation:\nannotations\n:\n\"helm.sh/hook-weight\":\n\"5\"\nHook weights can be positive or negative numbers but must be represented as\nstrings. When Helm starts the execution cycle of hooks of a particular Kind it\nwill sort those hooks in ascending order.\nHook deletion policies\nIt is possible to define policies that determine when to delete corresponding\nhook resources. Hook deletion policies are defined using the following\nannotation:\nannotations\n:\n\"helm.sh/hook-delete-policy\":\nbefore-hook-creation,hook-succeeded\nYou can choose one or more defined annotation values:\nAnnotation Value\nDescription\nbefore-hook-creation\nDelete the previous resource before a new hook is launched (default)\nhook-succeeded\nDelete the resource after the hook is successfully executed\nhook-failed\nDelete the resource if the hook failed during execution\nIf no hook deletion policy annotation is specified, the\nbefore-hook-creation\nbehavior applies by default.\nPrev\n← Charts\nNext\nChart Tests →",
      "code_examples": [
        {
          "language": "",
          "code": "pre-install",
          "element": "<code>pre-install</code>"
        },
        {
          "language": "",
          "code": "post-install",
          "element": "<code>post-install</code>"
        },
        {
          "language": "",
          "code": "post-delete",
          "element": "<code>post-delete</code>"
        },
        {
          "language": "",
          "code": "pre-upgrade",
          "element": "<code>pre-upgrade</code>"
        },
        {
          "language": "",
          "code": "post-upgrade",
          "element": "<code>post-upgrade</code>"
        },
        {
          "language": "",
          "code": "pre-rollback",
          "element": "<code>pre-rollback</code>"
        },
        {
          "language": "",
          "code": "post-rollback",
          "element": "<code>post-rollback</code>"
        },
        {
          "language": "",
          "code": "crd-install",
          "element": "<code>crd-install</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm install foo",
          "element": "<code>helm install foo</code>"
        },
        {
          "language": "",
          "code": "pre-install",
          "element": "<code>pre-install</code>"
        },
        {
          "language": "",
          "code": "post-install",
          "element": "<code>post-install</code>"
        },
        {
          "language": "",
          "code": "helm install foo",
          "element": "<code>helm install foo</code>"
        },
        {
          "language": "",
          "code": "pre-install",
          "element": "<code>pre-install</code>"
        },
        {
          "language": "",
          "code": "post-install",
          "element": "<code>post-install</code>"
        },
        {
          "language": "",
          "code": "post-install",
          "element": "<code>post-install</code>"
        },
        {
          "language": "",
          "code": "helm.sh/resource-policy: keep",
          "element": "<code>helm.sh/resource-policy: keep</code>"
        },
        {
          "language": "",
          "code": "helm uninstall",
          "element": "<code>helm uninstall</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook-delete-policy",
          "element": "<code>helm.sh/hook-delete-policy</code>"
        },
        {
          "language": "",
          "code": "templates/post-install-job.yaml",
          "element": "<code>templates/post-install-job.yaml</code>"
        },
        {
          "language": "",
          "code": "post-install",
          "element": "<code>post-install</code>"
        },
        {
          "language": "",
          "code": "apiVersion:batch/v1kind:Jobmetadata:name:\"{{ .Release.Name }}\"labels:app.kubernetes.io/managed-by:{{.Release.Service | quote }}app.kubernetes.io/instance:{{.Release.Name | quote }}app.kubernetes.io/version:{{.Chart.AppVersion }}helm.sh/chart:\"{{ .Chart.Name }}-{{ .Chart.Version }}\"annotations:# This is what defines this resource as a hook. Without this line, the# job is considered part of the release.\"helm.sh/hook\":post-install\"helm.sh/hook-weight\":\"-5\"\"helm.sh/hook-delete-policy\":hook-succeededspec:template:metadata:name:\"{{ .Release.Name }}\"labels:app.kubernetes.io/managed-by:{{.Release.Service | quote }}app.kubernetes.io/instance:{{.Release.Name | quote }}helm.sh/chart:\"{{ .Chart.Name }}-{{ .Chart.Version }}\"spec:restartPolicy:Nevercontainers:-name:post-install-jobimage:\"alpine:3.3\"command:[\"/bin/sleep\",\"{{ default \"10\" .Values.sleepyTime }}\"]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:batch/v1kind:Jobmetadata:name:\"{{ .Release.Name }}\"labels:app.kubernetes.io/managed-by:{{.Release.Service | quote }}app.kubernetes.io/instance:{{.Release.Name | quote }}app.kubernetes.io/version:{{.Chart.AppVersion }}helm.sh/chart:\"{{ .Chart.Name }}-{{ .Chart.Version }}\"annotations:# This is what defines this resource as a hook. Without this line, the# job is considered part of the release.\"helm.sh/hook\":post-install\"helm.sh/hook-weight\":\"-5\"\"helm.sh/hook-delete-policy\":hook-succeededspec:template:metadata:name:\"{{ .Release.Name }}\"labels:app.kubernetes.io/managed-by:{{.Release.Service | quote }}app.kubernetes.io/instance:{{.Release.Name | quote }}helm.sh/chart:\"{{ .Chart.Name }}-{{ .Chart.Version }}\"spec:restartPolicy:Nevercontainers:-name:post-install-jobimage:\"alpine:3.3\"command:[\"/bin/sleep\",\"{{ default \"10\" .Values.sleepyTime }}\"]",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>batch/v1<span style=\"color:#bb..."
        },
        {
          "language": "",
          "code": "annotations:\"helm.sh/hook\":post-install",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "annotations:\"helm.sh/hook\":post-install",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"di..."
        },
        {
          "language": "",
          "code": "annotations:\"helm.sh/hook\":post-install,post-upgrade",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "annotations:\"helm.sh/hook\":post-install,post-upgrade",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"di..."
        },
        {
          "language": "",
          "code": "annotations:\"helm.sh/hook-weight\":\"5\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "annotations:\"helm.sh/hook-weight\":\"5\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"di..."
        },
        {
          "language": "",
          "code": "annotations:\"helm.sh/hook-delete-policy\":before-hook-creation,hook-succeeded",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "annotations:\"helm.sh/hook-delete-policy\":before-hook-creation,hook-succeeded",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"di..."
        },
        {
          "language": "",
          "code": "before-hook-creation",
          "element": "<code>before-hook-creation</code>"
        },
        {
          "language": "",
          "code": "hook-succeeded",
          "element": "<code>hook-succeeded</code>"
        },
        {
          "language": "",
          "code": "hook-failed",
          "element": "<code>hook-failed</code>"
        },
        {
          "language": "",
          "code": "before-hook-creation",
          "element": "<code>before-hook-creation</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Chart Hooks",
          "id": ""
        },
        {
          "level": 2,
          "text": "The Available Hooks",
          "id": "the-available-hooks"
        },
        {
          "level": 2,
          "text": "Hooks and the Release Lifecycle",
          "id": "hooks-and-the-release-lifecycle"
        },
        {
          "level": 2,
          "text": "Writing a Hook",
          "id": "writing-a-hook"
        },
        {
          "level": 3,
          "text": "Hook resources are not managed with corresponding releases",
          "id": "hook-resources-are-not-managed-with-corresponding-releases"
        },
        {
          "level": 3,
          "text": "Hook deletion policies",
          "id": "hook-deletion-policies"
        }
      ],
      "timestamp": 1750732657.601378
    },
    {
      "url": "https://helm.sh/docs/topics/chart_tests/",
      "title": "Helm | Chart Tests",
      "content": "Chart Tests\nA chart contains a number of Kubernetes resources and components that work\ntogether. As a chart author, you may want to write some tests that validate that\nyour chart works as expected when it is installed. These tests also help the\nchart consumer understand what your chart is supposed to do.\nA\ntest\nin a helm chart lives under the\ntemplates/\ndirectory and is a job\ndefinition that specifies a container with a given command to run. The container\nshould exit successfully (exit 0) for a test to be considered a success. The job\ndefinition must contain the helm test hook annotation:\nhelm.sh/hook: test\n.\nNote that until Helm v3, the job definition needed to contain one of these helm\ntest hook annotations:\nhelm.sh/hook: test-success\nor\nhelm.sh/hook: test-failure\n.\nhelm.sh/hook: test-success\nis still accepted as a backwards-compatible\nalternative to\nhelm.sh/hook: test\n.\nExample tests:\nValidate that your configuration from the values.yaml file was properly\ninjected.\nMake sure your username and password work correctly\nMake sure an incorrect username and password does not work\nAssert that your services are up and correctly load balancing\netc.\nYou can run the pre-defined tests in Helm on a release using the command\nhelm test <RELEASE_NAME>\n. For a chart consumer, this is a great way to check that\ntheir release of a chart (or application) works as expected.\nExample Test\nThe\nhelm create\ncommand will automatically create a number of folders and files. To try the helm test functionality, first create a demo helm chart.\n$\nhelm create demo\nYou will now be able to see the following structure in your demo helm chart.\ndemo/\nChart.yaml\nvalues.yaml\ncharts/\ntemplates/\ntemplates/tests/test-connection.yaml\nIn\ndemo/templates/tests/test-connection.yaml\nyou'll see a test you can try. You can see the helm test pod definition here:\napiVersion\n:\nv1\nkind\n:\nPod\nmetadata\n:\nname\n:\n\"{{ include \"\ndemo.fullname\" . }}-test-connection\"\nlabels\n:\n{{- include \"demo.labels\" . | nindent 4 }}\nannotations\n:\n\"helm.sh/hook\":\ntest\nspec\n:\ncontainers\n:\n-\nname\n:\nwget\nimage\n:\nbusybox\ncommand\n:\n[\n'wget'\n]\nargs\n:\n[\n'{{ include \"demo.fullname\" . }}:{{ .Values.service.port }}'\n]\nrestartPolicy\n:\nNever\nSteps to Run a Test Suite on a Release\nFirst, install the chart on your cluster to create a release. You may have to\nwait for all pods to become active; if you test immediately after this install,\nit is likely to show a transitive failure, and you will want to re-test.\n$\nhelm install demo demo --namespace default\n$\nhelm\ntest\ndemo\nNAME: demo\nLAST DEPLOYED: Mon Feb 14 20:03:16 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE:     demo-test-connection\nLast Started:   Mon Feb 14 20:35:19 2022\nLast Completed: Mon Feb 14 20:35:23 2022\nPhase:          Succeeded\n[...]\nNotes\nYou can define as many tests as you would like in a single yaml file or spread\nacross several yaml files in the\ntemplates/\ndirectory.\nYou are welcome to nest your test suite under a\ntests/\ndirectory like\n<chart-name>/templates/tests/\nfor more isolation.\nA test is a\nHelm hook\n, so annotations like\nhelm.sh/hook-weight\nand\nhelm.sh/hook-delete-policy\nmay be used with test\nresources.\nPrev\n← Chart Hooks\nNext\nLibrary Charts →",
      "code_examples": [
        {
          "language": "",
          "code": "helm.sh/hook: test",
          "element": "<code>helm.sh/hook: test</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook: test-success",
          "element": "<code>helm.sh/hook: test-success</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook: test-failure",
          "element": "<code>helm.sh/hook: test-failure</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook: test-success",
          "element": "<code>helm.sh/hook: test-success</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook: test",
          "element": "<code>helm.sh/hook: test</code>"
        },
        {
          "language": "",
          "code": "helm test <RELEASE_NAME>",
          "element": "<code>helm test &lt;RELEASE_NAME&gt;</code>"
        },
        {
          "language": "",
          "code": "$helm create demo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create demo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create demo\n</span></span></code>"
        },
        {
          "language": "",
          "code": "demo/Chart.yamlvalues.yamlcharts/templates/templates/tests/test-connection.yaml",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>demo/\n</span></span><s..."
        },
        {
          "language": "language-fallback",
          "code": "demo/Chart.yamlvalues.yamlcharts/templates/templates/tests/test-connection.yaml",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>demo/\n</span></span><span style=\"display:flex\"><span>  Chart.yaml\n</span></span><span style=\"display:flex\"><span> ..."
        },
        {
          "language": "",
          "code": "demo/templates/tests/test-connection.yaml",
          "element": "<code>demo/templates/tests/test-connection.yaml</code>"
        },
        {
          "language": "",
          "code": "apiVersion:v1kind:Podmetadata:name:\"{{ include \"demo.fullname\" . }}-test-connection\"labels:{{- include \"demo.labels\" . | nindent 4 }}annotations:\"helm.sh/hook\":testspec:containers:-name:wgetimage:busyboxcommand:['wget']args:['{{ include \"demo.fullname\" . }}:{{ .Values.service.port }}']restartPolicy:Never",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v1kind:Podmetadata:name:\"{{ include \"demo.fullname\" . }}-test-connection\"labels:{{- include \"demo.labels\" . | nindent 4 }}annotations:\"helm.sh/hook\":testspec:containers:-name:wgetimage:busyboxcommand:['wget']args:['{{ include \"demo.fullname\" . }}:{{ .Values.service.port }}']restartPolicy:Never",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "$helm install demo demo --namespace default$helmtestdemoNAME: demoLAST DEPLOYED: Mon Feb 14 20:03:16 2022NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE:     demo-test-connectionLast Started:   Mon Feb 14 20:35:19 2022Last Completed: Mon Feb 14 20:35:23 2022Phase:          Succeeded[...]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install demo demo --namespace default$helmtestdemoNAME: demoLAST DEPLOYED: Mon Feb 14 20:03:16 2022NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE:     demo-test-connectionLast Started:   Mon Feb 14 20:35:19 2022Last Completed: Mon Feb 14 20:35:23 2022Phase:          Succeeded[...]",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install demo demo --namespace default\n</span></span><span sty..."
        },
        {
          "language": "",
          "code": "<chart-name>/templates/tests/",
          "element": "<code>&lt;chart-name&gt;/templates/tests/</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook-weight",
          "element": "<code>helm.sh/hook-weight</code>"
        },
        {
          "language": "",
          "code": "helm.sh/hook-delete-policy",
          "element": "<code>helm.sh/hook-delete-policy</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Chart Tests",
          "id": ""
        },
        {
          "level": 2,
          "text": "Example Test",
          "id": "example-test"
        },
        {
          "level": 2,
          "text": "Steps to Run a Test Suite on a Release",
          "id": "steps-to-run-a-test-suite-on-a-release"
        },
        {
          "level": 2,
          "text": "Notes",
          "id": "notes"
        }
      ],
      "timestamp": 1750732660.242832
    },
    {
      "url": "https://helm.sh/docs/topics/library_charts/",
      "title": "Helm | Library Charts",
      "content": "Library Charts\nA library chart is a type of\nHelm chart\nthat defines chart primitives or definitions which can be shared by Helm\ntemplates in other charts. This allows users to share snippets of code that can\nbe re-used across charts, avoiding repetition and keeping charts\nDRY\n.\nThe library chart was introduced in Helm 3 to formally recognize common or\nhelper charts that have been used by chart maintainers since Helm 2. By\nincluding it as a chart type, it provides:\nA means to explicitly distinguish between common and application charts\nLogic to prevent installation of a common chart\nNo rendering of templates in a common chart which may contain release\nartifacts\nAllow for dependent charts to use the importer's context\nA chart maintainer can define a common chart as a library chart and now be\nconfident that Helm will handle the chart in a standard consistent fashion. It\nalso means that definitions in an application chart can be shared by changing\nthe chart type.\nCreate a Simple Library Chart\nAs mentioned previously, a library chart is a type of\nHelm chart\n. This means that you can start off by creating a\nscaffold chart:\n$\nhelm create mylibchart\nCreating mylibchart\nYou will first remove all the files in\ntemplates\ndirectory as we will create\nour own templates definitions in this example.\n$\nrm -rf mylibchart/templates/*\nThe values file will not be required either.\n$\nrm -f mylibchart/values.yaml\nBefore we jump into creating common code, lets do a quick review of some\nrelevant Helm concepts. A\nnamed template\n(sometimes called a partial\nor a subtemplate) is simply a template defined inside of a file, and given a\nname. In the\ntemplates/\ndirectory, any file that begins with an underscore(_)\nis not expected to output a Kubernetes manifest file. So by convention, helper\ntemplates and partials are placed in a\n_*.tpl\nor\n_*.yaml\nfiles.\nIn this example, we will code a common ConfigMap which creates an empty\nConfigMap resource. We will define the common ConfigMap in file\nmylibchart/templates/_configmap.yaml\nas follows:\n{{- define \"mylibchart.configmap.tpl\" -}}\napiVersion\n:\nv1\nkind\n:\nConfigMap\nmetadata\n:\nname\n:\n{{\n.Release.Name | printf \"%s-%s\" .Chart.Name }}\ndata\n:\n{}\n{{- end -}}\n{{- define \"mylibchart.configmap\" -}}\n{{- include \"mylibchart.util.merge\" (append . \"mylibchart.configmap.tpl\") -}}\n{{- end -}}\nThe ConfigMap construct is defined in named template\nmylibchart.configmap.tpl\n.\nIt is a simple ConfigMap with an empty resource,\ndata\n. Within this file there\nis another named template called\nmylibchart.configmap\n. This named template\nincludes another named template\nmylibchart.util.merge\nwhich will take 2 named\ntemplates as arguments, the template calling\nmylibchart.configmap\nand\nmylibchart.configmap.tpl\n.\nThe helper function\nmylibchart.util.merge\nis a named template in\nmylibchart/templates/_util.yaml\n. It is a handy util from\nThe Common Helm\nHelper Chart\nbecause it merges the 2 templates\nand overrides any common parts in both:\n{{- /*\nmylibchart.util.merge will merge two YAML templates and output the result.\nThis takes an array of three values\n:\n- the top context\n- the template name of the overrides (destination)\n- the template name of the base (source)\n*/}}\n{{- define \"mylibchart.util.merge\" -}}\n{{- $top := first . -}}\n{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}\n{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}\n{{- toYaml (merge $overrides $tpl) -}}\n{{- end -}}\nThis is important when a chart wants to use common code that it needs to\ncustomize with its configuration.\nFinally, lets change the chart type to\nlibrary\n. This requires editing\nmylibchart/Chart.yaml\nas follows:\napiVersion\n:\nv2\nname\n:\nmylibchart\ndescription\n:\nA Helm chart for Kubernetes\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\n# type: application\ntype\n:\nlibrary\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\nversion\n:\n0.1.0\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application and it is recommended to use it with quotes.\nappVersion\n:\n\"1.16.0\"\nThe library chart is now ready to be shared and its ConfigMap definition to be\nre-used.\nBefore moving on, it is worth checking if Helm recognizes the chart as a library\nchart:\n$\nhelm install mylibchart mylibchart/\nError: library charts are not installable\nUse the Simple Library Chart\nIt is time to use the library chart. This means creating a scaffold chart again:\n$\nhelm create mychart\nCreating mychart\nLets clean out the template files again as we want to create a ConfigMap only:\n$\nrm -rf mychart/templates/*\nWhen we want to create a simple ConfigMap in a Helm template, it could look\nsimilar to the following:\napiVersion\n:\nv1\nkind\n:\nConfigMap\nmetadata\n:\nname\n:\n{{\n.Release.Name | printf \"%s-%s\" .Chart.Name }}\ndata\n:\nmyvalue\n:\n\"Hello World\"\nWe are however going to re-use the common code already created in\nmylibchart\n.\nThe ConfigMap can be created in the file\nmychart/templates/configmap.yaml\nas\nfollows:\n{{- include \"mylibchart.configmap\" (list . \"mychart.configmap\") -}}\n{{- define \"mychart.configmap\" -}}\ndata\n:\nmyvalue\n:\n\"Hello World\"\n{{- end -}}\nYou can see that it simplifies the work we have to do by inheriting the common\nConfigMap definition which adds standard properties for ConfigMap. In our\ntemplate we add the configuration, in this case the data key\nmyvalue\nand its\nvalue. The configuration override the empty resource of the common ConfigMap.\nThis is feasible because of the helper function\nmylibchart.util.merge\nwe\nmentioned in the previous section.\nTo be able to use the common code, we need to add\nmylibchart\nas a dependency.\nAdd the following to the end of the file\nmychart/Chart.yaml\n:\n# My common code in my library chart\ndependencies\n:\n-\nname\n:\nmylibchart\nversion\n:\n0.1.0\nrepository\n:\nfile://../mylibchart\nThis includes the library chart as a dynamic dependency from the filesystem\nwhich is at the same parent path as our application chart. As we are including\nthe library chart as a dynamic dependency, we need to run\nhelm dependency update\n. It will copy the library chart into your\ncharts/\ndirectory.\n$\nhelm dependency update mychart/\nHang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"stable\" chart repository\nUpdate Complete. ⎈Happy Helming!⎈\nSaving 1 charts\nDeleting outdated charts\nWe are now ready to deploy our chart. Before installing, it is worth checking\nthe rendered template first.\n$\nhelm install mydemo mychart/ --debug --dry-run\ninstall.go:159: [debug] Original chart version: \"\"\ninstall.go:176: [debug] CHART PATH: /root/test/helm-charts/mychart\nNAME: mydemo\nLAST DEPLOYED: Tue Mar  3 17:48:47 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\nCOMPUTED VALUES:\naffinity: {}\nfullnameOverride: \"\"\nimage:\npullPolicy: IfNotPresent\nrepository: nginx\nimagePullSecrets: []\ningress:\nannotations: {}\nenabled: false\nhosts:\n- host: chart-example.local\npaths: []\ntls: []\nmylibchart:\nglobal: {}\nnameOverride: \"\"\nnodeSelector: {}\npodSecurityContext: {}\nreplicaCount: 1\nresources: {}\nsecurityContext: {}\nservice:\nport: 80\ntype: ClusterIP\nserviceAccount:\nannotations: {}\ncreate: true\nname: null\ntolerations: []\nHOOKS:\nMANIFEST:\n---\n#\nSource: mychart/templates/configmap.yaml\napiVersion: v1\ndata:\nmyvalue: Hello World\nkind: ConfigMap\nmetadata:\nlabels:\napp: mychart\nchart: mychart-0.1.0\nrelease: mydemo\nname: mychart-mydemo\nThis looks like the ConfigMap we want with data override of\nmyvalue: Hello World\n. Lets install it:\n$\nhelm install mydemo mychart/\nNAME: mydemo\nLAST DEPLOYED: Tue Mar  3 17:52:40 2020\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nWe can retrieve the release and see that the actual template was loaded.\n$\nhelm get manifest mydemo\n---\n#\nSource: mychart/templates/configmap.yaml\napiVersion: v1\ndata:\nmyvalue: Hello World\nkind: ConfigMap\nmetadata:\nlabels:\napp: mychart\nchart: mychart-0.1.0\nrelease: mydemo\nname: mychart-mydemo\nLibrary Chart Benefits\nBecause of their inability to act as standalone charts, library charts can leverage the following functionality:\nThe\n.Files\nobject references the file paths on the parent chart, rather than the path local to the library chart\nThe\n.Values\nobject is the same as the parent chart, in contrast to application\nsubcharts\nwhich receive the section of values configured under their header in the parent.\nThe Common Helm Helper Chart\nNote: The Common Helm Helper Chart repo on Github is no longer actively maintained, and the repo has been deprecated and archived.\nThis\nchart\nwas\nthe original pattern for common charts. It provides utilities that reflect best\npractices of Kubernetes chart development. Best of all it can be used off the\nbat by you when developing your charts to give you handy shared code.\nHere is a quick way to use it. For more details, have a look at the\nREADME\n.\nCreate a scaffold chart again:\n$\nhelm create demo\nCreating demo\nLets use the common code from the helper chart. First, edit deployment\ndemo/templates/deployment.yaml\nas follows:\n{{- template \"common.deployment\" (list . \"demo.deployment\") -}}\n{{- define \"demo.deployment\" -}}\n## Define overrides for your Deployment resource here, e.g.\napiVersion\n:\napps/v1\nspec\n:\nreplicas\n:\n{{\n.Values.replicaCount }}\nselector\n:\nmatchLabels\n:\n{{- include \"demo.selectorLabels\" . | nindent 6 }}\ntemplate\n:\nmetadata\n:\nlabels\n:\n{{- include \"demo.selectorLabels\" . | nindent 8 }}\n{{- end -}}\nAnd now the service file,\ndemo/templates/service.yaml\nas follows:\n{{- template \"common.service\" (list . \"demo.service\") -}}\n{{- define \"demo.service\" -}}\n## Define overrides for your Service resource here, e.g.\n# metadata:\n#   labels:\n#     custom: label\n# spec:\n#   ports:\n#   - port: 8080\n{{- end -}}\nThese templates show how inheriting the common code from the helper chart\nsimplifies your coding down to your configuration or customization of the\nresources.\nTo be able to use the common code, we need to add\ncommon\nas a dependency. Add\nthe following to the end of the file\ndemo/Chart.yaml\n:\ndependencies\n:\n-\nname\n:\ncommon\nversion\n:\n\"^0.0.5\"\nrepository\n:\n\"https://charts.helm.sh/incubator/\"\nNote: You will need to add the\nincubator\nrepo to the Helm repository list\n(\nhelm repo add\n).\nAs we are including the chart as a dynamic dependency, we need to run\nhelm dependency update\n. It will copy the helper chart into your\ncharts/\ndirectory.\nAs helper chart is using some Helm 2 constructs, you will need to add the\nfollowing to\ndemo/values.yaml\nto enable the\nnginx\nimage to be loaded as this\nwas updated in Helm 3 scaffold chart:\nimage\n:\ntag\n:\n1.16.0\nYou can test that the chart templates are correct prior to deploying using the\nhelm lint\nand\nhelm template\ncommands.\nIf it's good to go, deploy away using\nhelm install\n!\nPrev\n← Chart Tests\nNext\nHelm Provenance and Integrity →",
      "code_examples": [
        {
          "language": "",
          "code": "$helm create mylibchartCreating mylibchart",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create mylibchartCreating mylibchart",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create mylibchart\n</span></span><span style=\"display:flex\"><s..."
        },
        {
          "language": "",
          "code": "$rm -rf mylibchart/templates/*",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$rm -rf mylibchart/templates/*",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> rm -rf mylibchart/templates/*\n</span></span></code>"
        },
        {
          "language": "",
          "code": "$rm -f mylibchart/values.yaml",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$rm -f mylibchart/values.yaml",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> rm -f mylibchart/values.yaml\n</span></span></code>"
        },
        {
          "language": "",
          "code": "mylibchart/templates/_configmap.yaml",
          "element": "<code>mylibchart/templates/_configmap.yaml</code>"
        },
        {
          "language": "",
          "code": "{{- define \"mylibchart.configmap.tpl\" -}}apiVersion:v1kind:ConfigMapmetadata:name:{{.Release.Name | printf \"%s-%s\" .Chart.Name }}data:{}{{- end -}}{{- define \"mylibchart.configmap\" -}}{{- include \"mylibchart.util.merge\" (append . \"mylibchart.configmap.tpl\") -}}{{- end -}}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- define \"mylibchart.configm..."
        },
        {
          "language": "language-yaml",
          "code": "{{- define \"mylibchart.configmap.tpl\" -}}apiVersion:v1kind:ConfigMapmetadata:name:{{.Release.Name | printf \"%s-%s\" .Chart.Name }}data:{}{{- end -}}{{- define \"mylibchart.configmap\" -}}{{- include \"mylibchart.util.merge\" (append . \"mylibchart.configmap.tpl\") -}}{{- end -}}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- define \"mylibchart.configmap.tpl\" -}}<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex\"><span><..."
        },
        {
          "language": "",
          "code": "mylibchart.configmap.tpl",
          "element": "<code>mylibchart.configmap.tpl</code>"
        },
        {
          "language": "",
          "code": "mylibchart.configmap",
          "element": "<code>mylibchart.configmap</code>"
        },
        {
          "language": "",
          "code": "mylibchart.util.merge",
          "element": "<code>mylibchart.util.merge</code>"
        },
        {
          "language": "",
          "code": "mylibchart.configmap",
          "element": "<code>mylibchart.configmap</code>"
        },
        {
          "language": "",
          "code": "mylibchart.configmap.tpl",
          "element": "<code>mylibchart.configmap.tpl</code>"
        },
        {
          "language": "",
          "code": "mylibchart.util.merge",
          "element": "<code>mylibchart.util.merge</code>"
        },
        {
          "language": "",
          "code": "mylibchart/templates/_util.yaml",
          "element": "<code>mylibchart/templates/_util.yaml</code>"
        },
        {
          "language": "",
          "code": "{{- /*mylibchart.util.merge will merge two YAML templates and output the result.This takes an array of three values:- the top context- the template name of the overrides (destination)- the template name of the base (source)*/}}{{- define \"mylibchart.util.merge\" -}}{{- $top := first . -}}{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}{{- toYaml (merge $overrides $tpl) -}}{{- end -}}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- /*<span style=\"color:#bbb\"..."
        },
        {
          "language": "language-yaml",
          "code": "{{- /*mylibchart.util.merge will merge two YAML templates and output the result.This takes an array of three values:- the top context- the template name of the overrides (destination)- the template name of the base (source)*/}}{{- define \"mylibchart.util.merge\" -}}{{- $top := first . -}}{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}{{- toYaml (merge $overrides $tpl) -}}{{- end -}}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- /*<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex\"><span><span style=\"color:#bbb\"></span>myli..."
        },
        {
          "language": "",
          "code": "mylibchart/Chart.yaml",
          "element": "<code>mylibchart/Chart.yaml</code>"
        },
        {
          "language": "",
          "code": "apiVersion:v2name:mylibchartdescription:A Helm chart for Kubernetes# A chart can be either an 'application' or a 'library' chart.## Application charts are a collection of templates that can be packaged into versioned archives# to be deployed.## Library charts provide useful utilities or functions for the chart developer. They're included as# a dependency of application charts to inject those utilities and functions into the rendering# pipeline. Library charts do not define any templates and therefore cannot be deployed.# type: applicationtype:library# This is the chart version. This version number should be incremented each time you make changes# to the chart and its templates, including the app version.version:0.1.0# This is the version number of the application being deployed. This version number should be# incremented each time you make changes to the application and it is recommended to use it with quotes.appVersion:\"1.16.0\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v2name:mylibchartdescription:A Helm chart for Kubernetes# A chart can be either an 'application' or a 'library' chart.## Application charts are a collection of templates that can be packaged into versioned archives# to be deployed.## Library charts provide useful utilities or functions for the chart developer. They're included as# a dependency of application charts to inject those utilities and functions into the rendering# pipeline. Library charts do not define any templates and therefore cannot be deployed.# type: applicationtype:library# This is the chart version. This version number should be incremented each time you make changes# to the chart and its templates, including the app version.version:0.1.0# This is the version number of the application being deployed. This version number should be# incremented each time you make changes to the application and it is recommended to use it with quotes.appVersion:\"1.16.0\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v2<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "$helm install mylibchart mylibchart/Error: library charts are not installable",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install mylibchart mylibchart/Error: library charts are not installable",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install mylibchart mylibchart/\n</span></span><span style=\"dis..."
        },
        {
          "language": "",
          "code": "$helm create mychartCreating mychart",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create mychartCreating mychart",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create mychart\n</span></span><span style=\"display:flex\"><span..."
        },
        {
          "language": "",
          "code": "$rm -rf mychart/templates/*",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$rm -rf mychart/templates/*",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> rm -rf mychart/templates/*\n</span></span></code>"
        },
        {
          "language": "",
          "code": "apiVersion:v1kind:ConfigMapmetadata:name:{{.Release.Name | printf \"%s-%s\" .Chart.Name }}data:myvalue:\"Hello World\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v1kind:ConfigMapmetadata:name:{{.Release.Name | printf \"%s-%s\" .Chart.Name }}data:myvalue:\"Hello World\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "mychart/templates/configmap.yaml",
          "element": "<code>mychart/templates/configmap.yaml</code>"
        },
        {
          "language": "",
          "code": "{{- include \"mylibchart.configmap\" (list . \"mychart.configmap\") -}}{{- define \"mychart.configmap\" -}}data:myvalue:\"Hello World\"{{- end -}}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- include \"mylibchart.config..."
        },
        {
          "language": "language-yaml",
          "code": "{{- include \"mylibchart.configmap\" (list . \"mychart.configmap\") -}}{{- define \"mychart.configmap\" -}}data:myvalue:\"Hello World\"{{- end -}}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- include \"mylibchart.configmap\" (list . \"mychart.configmap\") -}}<span style=\"color:#bbb\">\n</span></span></span><span st..."
        },
        {
          "language": "",
          "code": "mylibchart.util.merge",
          "element": "<code>mylibchart.util.merge</code>"
        },
        {
          "language": "",
          "code": "mychart/Chart.yaml",
          "element": "<code>mychart/Chart.yaml</code>"
        },
        {
          "language": "",
          "code": "# My common code in my library chartdependencies:-name:mylibchartversion:0.1.0repository:file://../mylibchart",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-s..."
        },
        {
          "language": "language-yaml",
          "code": "# My common code in my library chartdependencies:-name:mylibchartversion:0.1.0repository:file://../mylibchart",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#09f;font-style:italic\"># My common code in my library chart</span><span style=\"color:#bbb\">\n</span></s..."
        },
        {
          "language": "",
          "code": "helm dependency update",
          "element": "<code>helm dependency update</code>"
        },
        {
          "language": "",
          "code": "$helm dependency update mychart/Hang tight while we grab the latest from your chart repositories......Successfully got an update from the \"stable\" chart repositoryUpdate Complete. ⎈Happy Helming!⎈Saving 1 chartsDeleting outdated charts",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm dependency update mychart/Hang tight while we grab the latest from your chart repositories......Successfully got an update from the \"stable\" chart repositoryUpdate Complete. ⎈Happy Helming!⎈Saving 1 chartsDeleting outdated charts",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm dependency update mychart/\n</span></span><span style=\"display..."
        },
        {
          "language": "",
          "code": "$helm install mydemo mychart/ --debug --dry-runinstall.go:159: [debug] Original chart version: \"\"install.go:176: [debug] CHART PATH: /root/test/helm-charts/mychartNAME: mydemoLAST DEPLOYED: Tue Mar  3 17:48:47 2020NAMESPACE: defaultSTATUS: pending-installREVISION: 1TEST SUITE: NoneUSER-SUPPLIED VALUES:{}COMPUTED VALUES:affinity: {}fullnameOverride: \"\"image:pullPolicy: IfNotPresentrepository: nginximagePullSecrets: []ingress:annotations: {}enabled: falsehosts:- host: chart-example.localpaths: []tls: []mylibchart:global: {}nameOverride: \"\"nodeSelector: {}podSecurityContext: {}replicaCount: 1resources: {}securityContext: {}service:port: 80type: ClusterIPserviceAccount:annotations: {}create: truename: nulltolerations: []HOOKS:MANIFEST:---#Source: mychart/templates/configmap.yamlapiVersion: v1data:myvalue: Hello Worldkind: ConfigMapmetadata:labels:app: mychartchart: mychart-0.1.0release: mydemoname: mychart-mydemo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install mydemo mychart/ --debug --dry-runinstall.go:159: [debug] Original chart version: \"\"install.go:176: [debug] CHART PATH: /root/test/helm-charts/mychartNAME: mydemoLAST DEPLOYED: Tue Mar  3 17:48:47 2020NAMESPACE: defaultSTATUS: pending-installREVISION: 1TEST SUITE: NoneUSER-SUPPLIED VALUES:{}COMPUTED VALUES:affinity: {}fullnameOverride: \"\"image:pullPolicy: IfNotPresentrepository: nginximagePullSecrets: []ingress:annotations: {}enabled: falsehosts:- host: chart-example.localpaths: []tls: []mylibchart:global: {}nameOverride: \"\"nodeSelector: {}podSecurityContext: {}replicaCount: 1resources: {}securityContext: {}service:port: 80type: ClusterIPserviceAccount:annotations: {}create: truename: nulltolerations: []HOOKS:MANIFEST:---#Source: mychart/templates/configmap.yamlapiVersion: v1data:myvalue: Hello Worldkind: ConfigMapmetadata:labels:app: mychartchart: mychart-0.1.0release: mydemoname: mychart-mydemo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install mydemo mychart/ --debug --dry-run\n</span></span><span..."
        },
        {
          "language": "",
          "code": "myvalue: Hello World",
          "element": "<code>myvalue: Hello World</code>"
        },
        {
          "language": "",
          "code": "$helm install mydemo mychart/NAME: mydemoLAST DEPLOYED: Tue Mar  3 17:52:40 2020NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE: None",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install mydemo mychart/NAME: mydemoLAST DEPLOYED: Tue Mar  3 17:52:40 2020NAMESPACE: defaultSTATUS: deployedREVISION: 1TEST SUITE: None",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install mydemo mychart/\n</span></span><span style=\"display:fl..."
        },
        {
          "language": "",
          "code": "$helm get manifest mydemo---#Source: mychart/templates/configmap.yamlapiVersion: v1data:myvalue: Hello Worldkind: ConfigMapmetadata:labels:app: mychartchart: mychart-0.1.0release: mydemoname: mychart-mydemo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm get manifest mydemo---#Source: mychart/templates/configmap.yamlapiVersion: v1data:myvalue: Hello Worldkind: ConfigMapmetadata:labels:app: mychartchart: mychart-0.1.0release: mydemoname: mychart-mydemo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm get manifest mydemo\n</span></span><span style=\"display:flex\">..."
        },
        {
          "language": "",
          "code": "Note: The Common Helm Helper Chart repo on Github is no longer actively maintained, and the repo has been deprecated and archived.",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-markdown\" data-lang=\"markdown\"><span style=\"display:flex\"><span>Note: The Common Helm ..."
        },
        {
          "language": "language-markdown",
          "code": "Note: The Common Helm Helper Chart repo on Github is no longer actively maintained, and the repo has been deprecated and archived.",
          "element": "<code class=\"language-markdown\" data-lang=\"markdown\"><span style=\"display:flex\"><span>Note: The Common Helm Helper Chart repo on Github is no longer actively maintained, and the repo has been deprecat..."
        },
        {
          "language": "",
          "code": "$helm create demoCreating demo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create demoCreating demo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create demo\n</span></span><span style=\"display:flex\"><span><s..."
        },
        {
          "language": "",
          "code": "demo/templates/deployment.yaml",
          "element": "<code>demo/templates/deployment.yaml</code>"
        },
        {
          "language": "",
          "code": "{{- template \"common.deployment\" (list . \"demo.deployment\") -}}{{- define \"demo.deployment\" -}}## Define overrides for your Deployment resource here, e.g.apiVersion:apps/v1spec:replicas:{{.Values.replicaCount }}selector:matchLabels:{{- include \"demo.selectorLabels\" . | nindent 6 }}template:metadata:labels:{{- include \"demo.selectorLabels\" . | nindent 8 }}{{- end -}}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- template \"common.deploymen..."
        },
        {
          "language": "language-yaml",
          "code": "{{- template \"common.deployment\" (list . \"demo.deployment\") -}}{{- define \"demo.deployment\" -}}## Define overrides for your Deployment resource here, e.g.apiVersion:apps/v1spec:replicas:{{.Values.replicaCount }}selector:matchLabels:{{- include \"demo.selectorLabels\" . | nindent 6 }}template:metadata:labels:{{- include \"demo.selectorLabels\" . | nindent 8 }}{{- end -}}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- template \"common.deployment\" (list . \"demo.deployment\") -}}<span style=\"color:#bbb\">\n</span></span></span><span style=..."
        },
        {
          "language": "",
          "code": "demo/templates/service.yaml",
          "element": "<code>demo/templates/service.yaml</code>"
        },
        {
          "language": "",
          "code": "{{- template \"common.service\" (list . \"demo.service\") -}}{{- define \"demo.service\" -}}## Define overrides for your Service resource here, e.g.# metadata:#   labels:#     custom: label# spec:#   ports:#   - port: 8080{{- end -}}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- template \"common.service\" ..."
        },
        {
          "language": "language-yaml",
          "code": "{{- template \"common.service\" (list . \"demo.service\") -}}{{- define \"demo.service\" -}}## Define overrides for your Service resource here, e.g.# metadata:#   labels:#     custom: label# spec:#   ports:#   - port: 8080{{- end -}}",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span>{{- template \"common.service\" (list . \"demo.service\") -}}<span style=\"color:#bbb\">\n</span></span></span><span style=\"displ..."
        },
        {
          "language": "",
          "code": "demo/Chart.yaml",
          "element": "<code>demo/Chart.yaml</code>"
        },
        {
          "language": "",
          "code": "dependencies:-name:commonversion:\"^0.0.5\"repository:\"https://charts.helm.sh/incubator/\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "dependencies:-name:commonversion:\"^0.0.5\"repository:\"https://charts.helm.sh/incubator/\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">dependencies</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"d..."
        },
        {
          "language": "",
          "code": "helm repo add",
          "element": "<code>helm repo add</code>"
        },
        {
          "language": "",
          "code": "helm dependency update",
          "element": "<code>helm dependency update</code>"
        },
        {
          "language": "",
          "code": "demo/values.yaml",
          "element": "<code>demo/values.yaml</code>"
        },
        {
          "language": "",
          "code": "image:tag:1.16.0",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "image:tag:1.16.0",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">image</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:..."
        },
        {
          "language": "",
          "code": "helm template",
          "element": "<code>helm template</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Library Charts",
          "id": ""
        },
        {
          "level": 2,
          "text": "Create a Simple Library Chart",
          "id": "create-a-simple-library-chart"
        },
        {
          "level": 2,
          "text": "Use the Simple Library Chart",
          "id": "use-the-simple-library-chart"
        },
        {
          "level": 2,
          "text": "Library Chart Benefits",
          "id": "library-chart-benefits"
        },
        {
          "level": 2,
          "text": "The Common Helm Helper Chart",
          "id": "the-common-helm-helper-chart"
        }
      ],
      "timestamp": 1750732662.943712
    },
    {
      "url": "https://helm.sh/docs/topics/provenance/",
      "title": "Helm | Helm Provenance and Integrity",
      "content": "Helm Provenance and Integrity\nHelm has provenance tools which help chart users verify the integrity and origin\nof a package. Using industry-standard tools based on PKI, GnuPG, and\nwell-respected package managers, Helm can generate and verify signature files.\nOverview\nIntegrity is established by comparing a chart to a provenance record. Provenance\nrecords are stored in\nprovenance files\n, which are stored alongside a packaged\nchart. For example, if a chart is named\nmyapp-1.2.3.tgz\n, its provenance file\nwill be\nmyapp-1.2.3.tgz.prov\n.\nProvenance files are generated at packaging time (\nhelm package --sign ...\n),\nand can be checked by multiple commands, notably\nhelm install --verify\n.\nThe Workflow\nThis section describes a potential workflow for using provenance data\neffectively.\nPrerequisites:\nA valid PGP keypair in a binary (not ASCII-armored) format\nThe\nhelm\ncommand line tool\nGnuPG command line tools (optional)\nKeybase command line tools (optional)\nNOTE:\nIf your PGP private key has a passphrase, you will be prompted to\nenter that passphrase for any commands that support the\n--sign\noption.\nCreating a new chart is the same as before:\n$\nhelm create mychart\nCreating mychart\nOnce ready to package, add the\n--sign\nflag to\nhelm package\n. Also, specify\nthe name under which the signing key is known and the keyring containing the\ncorresponding private key:\n$\nhelm package --sign --key\n'John Smith'\n--keyring path/to/keyring.secret mychart\nNote:\nThe value of the\n--key\nargument must be a substring of the desired\nkey's\nuid\n(in the output of\ngpg --list-keys\n), for example the name or email.\nThe fingerprint\ncannot\nbe used.\nTIP:\nfor GnuPG users, your secret keyring is in\n~/.gnupg/secring.gpg\n. You\ncan use\ngpg --list-secret-keys\nto list the keys you have.\nWarning:\nthe GnuPG v2 store your secret keyring using a new format\nkbx\non\nthe default location\n~/.gnupg/pubring.kbx\n. Please use the following command\nto convert your keyring to the legacy gpg format:\n$\ngpg --export >~/.gnupg/pubring.gpg\n$\ngpg --export-secret-keys >~/.gnupg/secring.gpg\nAt this point, you should see both\nmychart-0.1.0.tgz\nand\nmychart-0.1.0.tgz.prov\n. Both files should eventually be uploaded to your\ndesired chart repository.\nYou can verify a chart using\nhelm verify\n:\n$\nhelm verify mychart-0.1.0.tgz\nA failed verification looks like this:\n$\nhelm verify topchart-0.1.0.tgz\nError: sha256 sum does not match for topchart-0.1.0.tgz: \"sha256:1939fbf7c1023d2f6b865d137bbb600e0c42061c3235528b1e8c82f4450c12a7\" != \"sha256:5a391a90de56778dd3274e47d789a2c84e0e106e1a37ef8cfa51fd60ac9e623a\"\nTo verify during an install, use the\n--verify\nflag.\n$\nhelm install --generate-name --verify mychart-0.1.0.tgz\nIf the keyring containing the public key associated with the signed chart is not\nin the default location, you may need to point to the keyring with\n--keyring PATH\nas in the\nhelm package\nexample.\nIf verification fails, the install will be aborted before the chart is even\nrendered.\nUsing Keybase.io credentials\nThe\nKeybase.io\nservice makes it easy to establish a chain\nof trust for a cryptographic identity. Keybase credentials can be used to sign\ncharts.\nPrerequisites:\nA configured Keybase.io account\nGnuPG installed locally\nThe\nkeybase\nCLI installed locally\nSigning packages\nThe first step is to import your keybase keys into your local GnuPG keyring:\n$\nkeybase pgp\nexport\n-s | gpg --import\nThis will convert your Keybase key into the OpenPGP format, and then import it\nlocally into your\n~/.gnupg/secring.gpg\nfile.\nYou can double check by running\ngpg --list-secret-keys\n.\n$\ngpg --list-secret-keys\n/Users/mattbutcher/.gnupg/secring.gpg\n-------------------------------------\nsec   2048R/1FC18762 2016-07-25\nuid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>\nssb   2048R/D125E546 2016-07-25\nNote that your secret key will have an identifier string:\ntechnosophos (keybase.io/technosophos) <technosophos@keybase.io>\nThat is the full name of your key.\nNext, you can package and sign a chart with\nhelm package\n. Make sure you use at\nleast part of that name string in\n--key\n.\n$\nhelm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart\nAs a result, the\npackage\ncommand should produce both a\n.tgz\nfile and a\n.tgz.prov\nfile.\nVerifying packages\nYou can also use a similar technique to verify a chart signed by someone else's\nKeybase key. Say you want to verify a package signed by\nkeybase.io/technosophos\n. To do this, use the\nkeybase\ntool:\n$\nkeybase follow technosophos\n$\nkeybase pgp pull\nThe first command above tracks the user\ntechnosophos\n. Next\nkeybase pgp pull\ndownloads the OpenPGP keys of all of the accounts you follow, placing them in\nyour GnuPG keyring (\n~/.gnupg/pubring.gpg\n).\nAt this point, you can now use\nhelm verify\nor any of the commands with a\n--verify\nflag:\n$\nhelm verify somechart-1.2.3.tgz\nReasons a chart may not verify\nThese are common reasons for failure.\nThe\n.prov\nfile is missing or corrupt. This indicates that something is\nmisconfigured or that the original maintainer did not create a provenance\nfile.\nThe key used to sign the file is not in your keyring. This indicate that the\nentity who signed the chart is not someone you've already signaled that you\ntrust.\nThe verification of the\n.prov\nfile failed. This indicates that something is\nwrong with either the chart or the provenance data.\nThe file hashes in the provenance file do not match the hash of the archive\nfile. This indicates that the archive has been tampered with.\nIf a verification fails, there is reason to distrust the package.\nThe Provenance File\nThe provenance file contains a chart’s YAML file plus several pieces of\nverification information. Provenance files are designed to be automatically\ngenerated.\nThe following pieces of provenance data are added:\nThe chart file (\nChart.yaml\n) is included to give both humans and tools an\neasy view into the contents of the chart.\nThe signature (SHA256, just like Docker) of the chart package (the\n.tgz\nfile) is included, and may be used to verify the integrity of the chart\npackage.\nThe entire body is signed using the algorithm used by OpenPGP (see\nKeybase.io\nfor an emerging way of making crypto\nsigning and verification easy).\nThe combination of this gives users the following assurances:\nThe package itself has not been tampered with (checksum package\n.tgz\n).\nThe entity who released this package is known (via the GnuPG/PGP signature).\nThe format of the file looks something like this:\nHash: SHA512\napiVersion: v2\nappVersion: \"1.16.0\"\ndescription: Sample chart\nname: mychart\ntype: application\nversion: 0.1.0\n...\nfiles:\nmychart-0.1.0.tgz: sha256:d31d2f08b885ec696c37c7f7ef106709aaf5e8575b6d3dc5d52112ed29a9cb92\n-----BEGIN PGP SIGNATURE-----\nwsBcBAEBCgAQBQJdy0ReCRCEO7+YH8GHYgAAfhUIADx3pHHLLINv0MFkiEYpX/Kd\nnvHFBNps7hXqSocsg0a9Fi1LRAc3OpVh3knjPfHNGOy8+xOdhbqpdnB+5ty8YopI\nmYMWp6cP/Mwpkt7/gP1ecWFMevicbaFH5AmJCBihBaKJE4R1IX49/wTIaLKiWkv2\ncR64bmZruQPSW83UTNULtdD7kuTZXeAdTMjAK0NECsCz9/eK5AFggP4CDf7r2zNi\nhZsNrzloIlBZlGGns6mUOTO42J/+JojnOLIhI3Psd0HBD2bTlsm/rSfty4yZUs7D\nqtgooNdohoyGSzR5oapd7fEvauRQswJxOA0m0V+u9/eyLR0+JcYB8Udi1prnWf8=\n=aHfz\n-----END PGP SIGNATURE-----\nNote that the YAML section contains two documents (separated by\n...\\n\n). The\nfirst file is the content of\nChart.yaml\n. The second is the checksums, a map of\nfilenames to SHA-256 digests of that file's content at packaging time.\nThe signature block is a standard PGP signature, which provides\ntamper\nresistance\n.\nChart Repositories\nChart repositories serve as a centralized collection of Helm charts.\nChart repositories must make it possible to serve provenance files over HTTP via\na specific request, and must make them available at the same URI path as the\nchart.\nFor example, if the base URL for a package is\nhttps://example.com/charts/mychart-1.2.3.tgz\n, the provenance file, if it\nexists, MUST be accessible at\nhttps://example.com/charts/mychart-1.2.3.tgz.prov\n.\nFrom the end user's perspective,\nhelm install --verify myrepo/mychart-1.2.3\nshould result in the download of both the chart and the provenance file with no\nadditional user configuration or action.\nSignatures in OCI-based registries\nWhen publishing charts to an\nOCI-based registry\n, the\nhelm-sigstore\nplugin\ncan be used\nto publish provenance to\nsigstore\n.\nAs described in the\ndocumentation\n, the\nprocess of creating provenance and signing with a GPG key are common, but the\nhelm sigstore upload\ncommand can be used to publish the provenance to an\nimmutable transparency log.\nEstablishing Authority and Authenticity\nWhen dealing with chain-of-trust systems, it is important to be able to\nestablish the authority of a signer. Or, to put this plainly, the system above\nhinges on the fact that you trust the person who signed the chart. That, in\nturn, means you need to trust the public key of the signer.\nOne of the design decisions with Helm has been that the Helm project would not\ninsert itself into the chain of trust as a necessary party. We don't want to be\n\"the certificate authority\" for all chart signers. Instead, we strongly favor a\ndecentralized model, which is part of the reason we chose OpenPGP as our\nfoundational technology. So when it comes to establishing authority, we have\nleft this step more-or-less undefined in Helm 2 (a decision carried forward in\nHelm 3).\nHowever, we have some pointers and recommendations for those interested in using\nthe provenance system:\nThe\nKeybase\nplatform provides a public centralized\nrepository for trust information.\nYou can use Keybase to store your keys or to get the public keys of others.\nKeybase also has fabulous documentation available\nWhile we haven't tested it, Keybase's \"secure website\" feature could be used\nto serve Helm charts.\nThe basic idea is that an official \"chart reviewer\" signs charts with her or\nhis key, and the resulting provenance file is then uploaded to the chart\nrepository.\nThere has been some work on the idea that a list of valid signing keys may\nbe included in the\nindex.yaml\nfile of a repository.\nPrev\n← Library Charts\nNext\nThe Chart Repository Guide →",
      "code_examples": [
        {
          "language": "",
          "code": "myapp-1.2.3.tgz",
          "element": "<code>myapp-1.2.3.tgz</code>"
        },
        {
          "language": "",
          "code": "myapp-1.2.3.tgz.prov",
          "element": "<code>myapp-1.2.3.tgz.prov</code>"
        },
        {
          "language": "",
          "code": "helm package --sign ...",
          "element": "<code>helm package --sign ...</code>"
        },
        {
          "language": "",
          "code": "helm install --verify",
          "element": "<code>helm install --verify</code>"
        },
        {
          "language": "",
          "code": "$helm create mychartCreating mychart",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm create mychartCreating mychart",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm create mychart\n</span></span><span style=\"display:flex\"><span..."
        },
        {
          "language": "",
          "code": "helm package",
          "element": "<code>helm package</code>"
        },
        {
          "language": "",
          "code": "$helm package --sign --key'John Smith'--keyring path/to/keyring.secret mychart",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm package --sign --key'John Smith'--keyring path/to/keyring.secret mychart",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm package --sign --key <span style=\"color:#c30\">'John Smith'</s..."
        },
        {
          "language": "",
          "code": "gpg --list-keys",
          "element": "<code>gpg --list-keys</code>"
        },
        {
          "language": "",
          "code": "~/.gnupg/secring.gpg",
          "element": "<code>~/.gnupg/secring.gpg</code>"
        },
        {
          "language": "",
          "code": "gpg --list-secret-keys",
          "element": "<code>gpg --list-secret-keys</code>"
        },
        {
          "language": "",
          "code": "~/.gnupg/pubring.kbx",
          "element": "<code>~/.gnupg/pubring.kbx</code>"
        },
        {
          "language": "",
          "code": "$gpg --export >~/.gnupg/pubring.gpg$gpg --export-secret-keys >~/.gnupg/secring.gpg",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$gpg --export >~/.gnupg/pubring.gpg$gpg --export-secret-keys >~/.gnupg/secring.gpg",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> gpg --export &gt;~/.gnupg/pubring.gpg\n</span></span><span style=\"d..."
        },
        {
          "language": "",
          "code": "mychart-0.1.0.tgz",
          "element": "<code>mychart-0.1.0.tgz</code>"
        },
        {
          "language": "",
          "code": "mychart-0.1.0.tgz.prov",
          "element": "<code>mychart-0.1.0.tgz.prov</code>"
        },
        {
          "language": "",
          "code": "helm verify",
          "element": "<code>helm verify</code>"
        },
        {
          "language": "",
          "code": "$helm verify mychart-0.1.0.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm verify mychart-0.1.0.tgz",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm verify mychart-0.1.0.tgz\n</span></span></code>"
        },
        {
          "language": "",
          "code": "$helm verify topchart-0.1.0.tgzError: sha256 sum does not match for topchart-0.1.0.tgz: \"sha256:1939fbf7c1023d2f6b865d137bbb600e0c42061c3235528b1e8c82f4450c12a7\" != \"sha256:5a391a90de56778dd3274e47d789a2c84e0e106e1a37ef8cfa51fd60ac9e623a\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm verify topchart-0.1.0.tgzError: sha256 sum does not match for topchart-0.1.0.tgz: \"sha256:1939fbf7c1023d2f6b865d137bbb600e0c42061c3235528b1e8c82f4450c12a7\" != \"sha256:5a391a90de56778dd3274e47d789a2c84e0e106e1a37ef8cfa51fd60ac9e623a\"",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm verify topchart-0.1.0.tgz\n</span></span><span style=\"display:..."
        },
        {
          "language": "",
          "code": "$helm install --generate-name --verify mychart-0.1.0.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm install --generate-name --verify mychart-0.1.0.tgz",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm install --generate-name --verify mychart-0.1.0.tgz\n</span></s..."
        },
        {
          "language": "",
          "code": "--keyring PATH",
          "element": "<code>--keyring PATH</code>"
        },
        {
          "language": "",
          "code": "helm package",
          "element": "<code>helm package</code>"
        },
        {
          "language": "",
          "code": "$keybase pgpexport-s | gpg --import",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$keybase pgpexport-s | gpg --import",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> keybase pgp <span style=\"color:#366\">export</span> -s | gpg --impo..."
        },
        {
          "language": "",
          "code": "~/.gnupg/secring.gpg",
          "element": "<code>~/.gnupg/secring.gpg</code>"
        },
        {
          "language": "",
          "code": "gpg --list-secret-keys",
          "element": "<code>gpg --list-secret-keys</code>"
        },
        {
          "language": "",
          "code": "$gpg --list-secret-keys/Users/mattbutcher/.gnupg/secring.gpg-------------------------------------sec   2048R/1FC18762 2016-07-25uid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>ssb   2048R/D125E546 2016-07-25",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$gpg --list-secret-keys/Users/mattbutcher/.gnupg/secring.gpg-------------------------------------sec   2048R/1FC18762 2016-07-25uid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>ssb   2048R/D125E546 2016-07-25",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> gpg --list-secret-keys\n</span></span><span style=\"display:flex\"><s..."
        },
        {
          "language": "",
          "code": "technosophos (keybase.io/technosophos) <technosophos@keybase.io>",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>technosophos (keybase...."
        },
        {
          "language": "language-fallback",
          "code": "technosophos (keybase.io/technosophos) <technosophos@keybase.io>",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>technosophos (keybase.io/technosophos) &lt;technosophos@keybase.io&gt;\n</span></span></code>"
        },
        {
          "language": "",
          "code": "helm package",
          "element": "<code>helm package</code>"
        },
        {
          "language": "",
          "code": "$helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm package --sign --key technosophos --keyring ~/.gnupg/secring...."
        },
        {
          "language": "",
          "code": "keybase.io/technosophos",
          "element": "<code>keybase.io/technosophos</code>"
        },
        {
          "language": "",
          "code": "$keybase follow technosophos$keybase pgp pull",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$keybase follow technosophos$keybase pgp pull",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> keybase follow technosophos\n</span></span><span style=\"display:fle..."
        },
        {
          "language": "",
          "code": "technosophos",
          "element": "<code>technosophos</code>"
        },
        {
          "language": "",
          "code": "keybase pgp pull",
          "element": "<code>keybase pgp pull</code>"
        },
        {
          "language": "",
          "code": "~/.gnupg/pubring.gpg",
          "element": "<code>~/.gnupg/pubring.gpg</code>"
        },
        {
          "language": "",
          "code": "helm verify",
          "element": "<code>helm verify</code>"
        },
        {
          "language": "",
          "code": "$helm verify somechart-1.2.3.tgz",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm verify somechart-1.2.3.tgz",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm verify somechart-1.2.3.tgz\n</span></span></code>"
        },
        {
          "language": "",
          "code": "Hash: SHA512apiVersion: v2appVersion: \"1.16.0\"description: Sample chartname: mycharttype: applicationversion: 0.1.0...files:mychart-0.1.0.tgz: sha256:d31d2f08b885ec696c37c7f7ef106709aaf5e8575b6d3dc5d52112ed29a9cb92-----BEGIN PGP SIGNATURE-----wsBcBAEBCgAQBQJdy0ReCRCEO7+YH8GHYgAAfhUIADx3pHHLLINv0MFkiEYpX/KdnvHFBNps7hXqSocsg0a9Fi1LRAc3OpVh3knjPfHNGOy8+xOdhbqpdnB+5ty8YopImYMWp6cP/Mwpkt7/gP1ecWFMevicbaFH5AmJCBihBaKJE4R1IX49/wTIaLKiWkv2cR64bmZruQPSW83UTNULtdD7kuTZXeAdTMjAK0NECsCz9/eK5AFggP4CDf7r2zNihZsNrzloIlBZlGGns6mUOTO42J/+JojnOLIhI3Psd0HBD2bTlsm/rSfty4yZUs7DqtgooNdohoyGSzR5oapd7fEvauRQswJxOA0m0V+u9/eyLR0+JcYB8Udi1prnWf8==aHfz-----END PGP SIGNATURE-----",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>Hash: SHA512\n</span></..."
        },
        {
          "language": "language-fallback",
          "code": "Hash: SHA512apiVersion: v2appVersion: \"1.16.0\"description: Sample chartname: mycharttype: applicationversion: 0.1.0...files:mychart-0.1.0.tgz: sha256:d31d2f08b885ec696c37c7f7ef106709aaf5e8575b6d3dc5d52112ed29a9cb92-----BEGIN PGP SIGNATURE-----wsBcBAEBCgAQBQJdy0ReCRCEO7+YH8GHYgAAfhUIADx3pHHLLINv0MFkiEYpX/KdnvHFBNps7hXqSocsg0a9Fi1LRAc3OpVh3knjPfHNGOy8+xOdhbqpdnB+5ty8YopImYMWp6cP/Mwpkt7/gP1ecWFMevicbaFH5AmJCBihBaKJE4R1IX49/wTIaLKiWkv2cR64bmZruQPSW83UTNULtdD7kuTZXeAdTMjAK0NECsCz9/eK5AFggP4CDf7r2zNihZsNrzloIlBZlGGns6mUOTO42J/+JojnOLIhI3Psd0HBD2bTlsm/rSfty4yZUs7DqtgooNdohoyGSzR5oapd7fEvauRQswJxOA0m0V+u9/eyLR0+JcYB8Udi1prnWf8==aHfz-----END PGP SIGNATURE-----",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>Hash: SHA512\n</span></span><span style=\"display:flex\"><span>\n</span></span><span style=\"display:flex\"><span>apiVer..."
        },
        {
          "language": "",
          "code": "https://example.com/charts/mychart-1.2.3.tgz",
          "element": "<code>https://example.com/charts/mychart-1.2.3.tgz</code>"
        },
        {
          "language": "",
          "code": "https://example.com/charts/mychart-1.2.3.tgz.prov",
          "element": "<code>https://example.com/charts/mychart-1.2.3.tgz.prov</code>"
        },
        {
          "language": "",
          "code": "helm install --verify myrepo/mychart-1.2.3",
          "element": "<code>helm install --verify myrepo/mychart-1.2.3</code>"
        },
        {
          "language": "",
          "code": "helm-sigstore",
          "element": "<code>helm-sigstore</code>"
        },
        {
          "language": "",
          "code": "helm sigstore upload",
          "element": "<code>helm sigstore upload</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Helm Provenance and Integrity",
          "id": ""
        },
        {
          "level": 2,
          "text": "Overview",
          "id": "overview"
        },
        {
          "level": 2,
          "text": "The Workflow",
          "id": "the-workflow"
        },
        {
          "level": 2,
          "text": "The Provenance File",
          "id": "the-provenance-file"
        },
        {
          "level": 2,
          "text": "Chart Repositories",
          "id": "chart-repositories"
        },
        {
          "level": 2,
          "text": "Establishing Authority and Authenticity",
          "id": "establishing-authority-and-authenticity"
        },
        {
          "level": 3,
          "text": "Using Keybase.io credentials",
          "id": "using-keybaseio-credentials"
        },
        {
          "level": 3,
          "text": "Reasons a chart may not verify",
          "id": "reasons-a-chart-may-not-verify"
        },
        {
          "level": 3,
          "text": "Signatures in OCI-based registries",
          "id": "signatures-in-oci-based-registries"
        },
        {
          "level": 4,
          "text": "Signing packages",
          "id": "signing-packages"
        },
        {
          "level": 4,
          "text": "Verifying packages",
          "id": "verifying-packages"
        }
      ],
      "timestamp": 1750732665.415066
    },
    {
      "url": "https://helm.sh/docs/topics/chart_repository/",
      "title": "Helm | The Chart Repository Guide",
      "content": "The Chart Repository Guide\nThis section explains how to create and work with Helm chart repositories. At a\nhigh level, a chart repository is a location where packaged charts can be stored\nand shared.\nThe distributed community Helm chart repository is located at\nArtifact Hub\nand welcomes\nparticipation. But Helm also makes it possible to create and run your own chart\nrepository. This guide explains how to do so. If you are considering creating a\nchart repository, you may want to consider using an\nOCI registry\ninstead.\nPrerequisites\nGo through the\nQuickstart\nGuide\nRead through the\nCharts\ndocument\nCreate a chart repository\nA\nchart repository\nis an HTTP server that houses an\nindex.yaml\nfile and\noptionally some packaged charts. When you're ready to share your charts, the\npreferred way to do so is by uploading them to a chart repository.\nAs of Helm 2.2.0, client-side SSL auth to a repository is supported. Other\nauthentication protocols may be available as plugins.\nBecause a chart repository can be any HTTP server that can serve YAML and tar\nfiles and can answer GET requests, you have a plethora of options when it comes\ndown to hosting your own chart repository. For example, you can use a Google\nCloud Storage (GCS) bucket, Amazon S3 bucket, GitHub Pages, or even create your\nown web server.\nThe chart repository structure\nA chart repository consists of packaged charts and a special file called\nindex.yaml\nwhich contains an index of all of the charts in the repository.\nFrequently, the charts that\nindex.yaml\ndescribes are also hosted on the same\nserver, as are the\nprovenance files\n.\nFor example, the layout of the repository\nhttps://example.com/charts\nmight\nlook like this:\ncharts/\n|\n|- index.yaml\n|\n|- alpine-0.1.2.tgz\n|\n|- alpine-0.1.2.tgz.prov\nIn this case, the index file would contain information about one chart, the\nAlpine chart, and provide the download URL\nhttps://example.com/charts/alpine-0.1.2.tgz\nfor that chart.\nIt is not required that a chart package be located on the same server as the\nindex.yaml\nfile. However, doing so is often the easiest.\nThe index file\nThe index file is a yaml file called\nindex.yaml\n. It contains some metadata\nabout the package, including the contents of a chart's\nChart.yaml\nfile. A\nvalid chart repository must have an index file. The index file contains\ninformation about each chart in the chart repository. The\nhelm repo index\ncommand will generate an index file based on a given local directory that\ncontains packaged charts.\nThis is an example of an index file:\napiVersion\n:\nv1\nentries\n:\nalpine\n:\n-\ncreated\n:\n2016-10-06T16:23:20.499814565\n-06\n:\n00\ndescription\n:\nDeploy a basic Alpine Linux pod\ndigest\n:\n99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cd\nhome\n:\nhttps://helm.sh/helm\nname\n:\nalpine\nsources\n:\n- https://github.com/helm/helm\nurls\n:\n- https://technosophos.github.io/tscharts/alpine-0.2.0.tgz\nversion\n:\n0.2.0\n-\ncreated\n:\n2016-10-06T16:23:20.499543808\n-06\n:\n00\ndescription\n:\nDeploy a basic Alpine Linux pod\ndigest\n:\n515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727\nhome\n:\nhttps://helm.sh/helm\nname\n:\nalpine\nsources\n:\n- https://github.com/helm/helm\nurls\n:\n- https://technosophos.github.io/tscharts/alpine-0.1.0.tgz\nversion\n:\n0.1.0\nnginx\n:\n-\ncreated\n:\n2016-10-06T16:23:20.499543808\n-06\n:\n00\ndescription\n:\nCreate a basic nginx HTTP server\ndigest\n:\naaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffff\nhome\n:\nhttps://helm.sh/helm\nname\n:\nnginx\nsources\n:\n- https://github.com/helm/charts\nurls\n:\n- https://technosophos.github.io/tscharts/nginx-1.1.0.tgz\nversion\n:\n1.1.0\ngenerated\n:\n2016-10-06T16:23:20.499029981\n-06\n:\n00\nHosting Chart Repositories\nThis part shows several ways to serve a chart repository.\nGoogle Cloud Storage\nThe first step is to\ncreate your GCS bucket\n. We'll call ours\nfantastic-charts\n.\nNext, make your bucket public by\nediting the bucket permissions\n.\nInsert this line item to\nmake your bucket public\n:\nCongratulations, now you have an empty GCS bucket ready to serve charts!\nYou may upload your chart repository using the Google Cloud Storage command\nline tool, or using the GCS web UI. A public GCS bucket can be accessed via\nsimple HTTPS at this address:\nhttps://bucket-name.storage.googleapis.com/\n.\nCloudsmith\nYou can also set up chart repositories using Cloudsmith. Read more about\nchart repositories with Cloudsmith\nhere\nJFrog Artifactory\nSimilarly, you can also set up chart repositories using JFrog Artifactory. Read more about\nchart repositories with JFrog Artifactory\nhere\nGitHub Pages example\nIn a similar way you can create charts repository using GitHub Pages.\nGitHub allows you to serve static web pages in two different ways:\nBy configuring a project to serve the contents of its\ndocs/\ndirectory\nBy configuring a project to serve a particular branch\nWe'll take the second approach, though the first is just as easy.\nThe first step will be to\ncreate your gh-pages branch\n. You can do that\nlocally as.\n$\ngit checkout -b gh-pages\nOr via web browser using\nBranch\nbutton on your GitHub repository:\nNext, you'll want to make sure your\ngh-pages branch\nis set as GitHub Pages,\nclick on your repo\nSettings\nand scroll down to\nGitHub pages\nsection and\nset as per below:\nBy default\nSource\nusually gets set to\ngh-pages branch\n. If this is not\nset by default, then select it.\nYou can use a\ncustom domain\nthere if you wish so.\nAnd check that\nEnforce HTTPS\nis ticked, so the\nHTTPS\nwill be used when\ncharts are served.\nIn such setup you can use your default branch to store your charts code, and\ngh-pages branch\nas charts repository, e.g.:\nhttps://USERNAME.github.io/REPONAME\n. The demonstration\nTS\nCharts\nrepository is accessible at\nhttps://technosophos.github.io/tscharts/\n.\nIf you have decided to use GitHub pages to host the chart repository, check out\nChart Releaser Action\n.\nChart Releaser Action is a GitHub Action workflow to turn a GitHub project into\na self-hosted Helm chart repo, using\nhelm/chart-releaser\nCLI tool.\nOrdinary web servers\nTo configure an ordinary web server to serve Helm charts, you merely need to do\nthe following:\nPut your index and charts in a directory that the server can serve\nMake sure the\nindex.yaml\nfile can be accessed with no authentication\nrequirement\nMake sure\nyaml\nfiles are served with the correct content type (\ntext/yaml\nor\ntext/x-yaml\n)\nFor example, if you want to serve your charts out of\n$WEBROOT/charts\n, make\nsure there is a\ncharts/\ndirectory in your web root, and put the index file and\ncharts inside of that folder.\nChartMuseum Repository Server\nChartMuseum is an open-source Helm Chart Repository server written in Go\n(Golang), with support for cloud storage backends, including\nGoogle Cloud\nStorage\n,\nAmazon\nS3\n,\nMicrosoft Azure Blob\nStorage\n,\nAlibaba\nCloud OSS Storage\n,\nOpenstack Object\nStorage\n,\nOracle Cloud\nInfrastructure Object Storage\n,\nBaidu Cloud\nBOS Storage\n,\nTencent Cloud Object\nStorage\n,\nDigitalOcean\nSpaces\n,\nMinio\n, and\netcd\n.\nYou can also use the\nChartMuseum\nserver to host a chart repository from a local file system.\nGitLab Package Registry\nWith GitLab you can publish Helm charts in your project’s Package Registry.\nRead more about setting up a helm package repository with GitLab\nhere\n.\nManaging Chart Repositories\nNow that you have a chart repository, the last part of this guide explains how\nto maintain charts in that repository.\nStore charts in your chart repository\nNow that you have a chart repository, let's upload a chart and an index file to\nthe repository. Charts in a chart repository must be packaged (\nhelm package chart-name/\n) and versioned correctly (following\nSemVer 2\nguidelines).\nThese next steps compose an example workflow, but you are welcome to use\nwhatever workflow you fancy for storing and updating charts in your chart\nrepository.\nOnce you have a packaged chart ready, create a new directory, and move your\npackaged chart to that directory.\n$\nhelm package docs/examples/alpine/\n$\nmkdir fantastic-charts\n$\nmv alpine-0.1.0.tgz fantastic-charts/\n$\nhelm repo index fantastic-charts --url https://fantastic-charts.storage.googleapis.com\nThe last command takes the path of the local directory that you just created and\nthe URL of your remote chart repository and composes an\nindex.yaml\nfile inside\nthe given directory path.\nNow you can upload the chart and the index file to your chart repository using a\nsync tool or manually. If you're using Google Cloud Storage, check out this\nexample workflow\nusing the gsutil client. For GitHub, you can simply put the charts in the\nappropriate destination branch.\nAdd new charts to an existing repository\nEach time you want to add a new chart to your repository, you must regenerate\nthe index. The\nhelm repo index\ncommand will completely rebuild the\nindex.yaml\nfile from scratch, including only the charts that it finds locally.\nHowever, you can use the\n--merge\nflag to incrementally add new charts to an\nexisting\nindex.yaml\nfile (a great option when working with a remote repository\nlike GCS). Run\nhelm repo index --help\nto learn more,\nMake sure that you upload both the revised\nindex.yaml\nfile and the chart. And\nif you generated a provenance file, upload that too.\nShare your charts with others\nWhen you're ready to share your charts, simply let someone know what the URL of\nyour repository is.\nFrom there, they will add the repository to their helm client via the\nhelm repo add [NAME] [URL]\ncommand with any name they would like to use to reference the\nrepository.\n$\nhelm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com\n$\nhelm repo list\nfantastic-charts    https://fantastic-charts.storage.googleapis.com\nIf the charts are backed by HTTP basic authentication, you can also supply the\nusername and password here:\n$\nhelm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com --username my-username --password my-password\n$\nhelm repo list\nfantastic-charts    https://fantastic-charts.storage.googleapis.com\nNote:\nA repository will not be added if it does not contain a valid\nindex.yaml\n.\nNote:\nIf your helm repository is e.g. using a self signed\ncertificate, you can use\nhelm repo add --insecure-skip-tls-verify ...\nin order\nto skip the CA verification.\nAfter that, your users will be able to search through your charts. After you've\nupdated the repository, they can use the\nhelm repo update\ncommand to get the\nlatest chart information.\nUnder the hood, the\nhelm repo add\nand\nhelm repo update\ncommands are\nfetching the index.yaml file and storing them in the\n$XDG_CACHE_HOME/helm/repository/cache/\ndirectory. This is where the\nhelm search\nfunction finds information about charts.\nPrev\n← Helm Provenance and Integrity\nNext\nUse OCI-based registries →",
      "code_examples": [
        {
          "language": "",
          "code": "https://example.com/charts",
          "element": "<code>https://example.com/charts</code>"
        },
        {
          "language": "",
          "code": "charts/||- index.yaml||- alpine-0.1.2.tgz||- alpine-0.1.2.tgz.prov",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>charts/\n</span></span>..."
        },
        {
          "language": "language-fallback",
          "code": "charts/||- index.yaml||- alpine-0.1.2.tgz||- alpine-0.1.2.tgz.prov",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>charts/\n</span></span><span style=\"display:flex\"><span>  |\n</span></span><span style=\"display:flex\"><span>  |- ind..."
        },
        {
          "language": "",
          "code": "https://example.com/charts/alpine-0.1.2.tgz",
          "element": "<code>https://example.com/charts/alpine-0.1.2.tgz</code>"
        },
        {
          "language": "",
          "code": "helm repo index",
          "element": "<code>helm repo index</code>"
        },
        {
          "language": "",
          "code": "apiVersion:v1entries:alpine:-created:2016-10-06T16:23:20.499814565-06:00description:Deploy a basic Alpine Linux poddigest:99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cdhome:https://helm.sh/helmname:alpinesources:- https://github.com/helm/helmurls:- https://technosophos.github.io/tscharts/alpine-0.2.0.tgzversion:0.2.0-created:2016-10-06T16:23:20.499543808-06:00description:Deploy a basic Alpine Linux poddigest:515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727home:https://helm.sh/helmname:alpinesources:- https://github.com/helm/helmurls:- https://technosophos.github.io/tscharts/alpine-0.1.0.tgzversion:0.1.0nginx:-created:2016-10-06T16:23:20.499543808-06:00description:Create a basic nginx HTTP serverdigest:aaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffffhome:https://helm.sh/helmname:nginxsources:- https://github.com/helm/chartsurls:- https://technosophos.github.io/tscharts/nginx-1.1.0.tgzversion:1.1.0generated:2016-10-06T16:23:20.499029981-06:00",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:v1entries:alpine:-created:2016-10-06T16:23:20.499814565-06:00description:Deploy a basic Alpine Linux poddigest:99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cdhome:https://helm.sh/helmname:alpinesources:- https://github.com/helm/helmurls:- https://technosophos.github.io/tscharts/alpine-0.2.0.tgzversion:0.2.0-created:2016-10-06T16:23:20.499543808-06:00description:Deploy a basic Alpine Linux poddigest:515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727home:https://helm.sh/helmname:alpinesources:- https://github.com/helm/helmurls:- https://technosophos.github.io/tscharts/alpine-0.1.0.tgzversion:0.1.0nginx:-created:2016-10-06T16:23:20.499543808-06:00description:Create a basic nginx HTTP serverdigest:aaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffffhome:https://helm.sh/helmname:nginxsources:- https://github.com/helm/chartsurls:- https://technosophos.github.io/tscharts/nginx-1.1.0.tgzversion:1.1.0generated:2016-10-06T16:23:20.499029981-06:00",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "fantastic-charts",
          "element": "<code>fantastic-charts</code>"
        },
        {
          "language": "",
          "code": "https://bucket-name.storage.googleapis.com/",
          "element": "<code>https://bucket-name.storage.googleapis.com/</code>"
        },
        {
          "language": "",
          "code": "$git checkout -b gh-pages",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$git checkout -b gh-pages",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> git checkout -b gh-pages\n</span></span></code>"
        },
        {
          "language": "",
          "code": "https://USERNAME.github.io/REPONAME",
          "element": "<code>https://USERNAME.github.io/REPONAME</code>"
        },
        {
          "language": "",
          "code": "https://technosophos.github.io/tscharts/",
          "element": "<code>https://technosophos.github.io/tscharts/</code>"
        },
        {
          "language": "",
          "code": "text/x-yaml",
          "element": "<code>text/x-yaml</code>"
        },
        {
          "language": "",
          "code": "$WEBROOT/charts",
          "element": "<code>$WEBROOT/charts</code>"
        },
        {
          "language": "",
          "code": "helm package chart-name/",
          "element": "<code>helm package chart-name/</code>"
        },
        {
          "language": "",
          "code": "$helm package docs/examples/alpine/$mkdir fantastic-charts$mv alpine-0.1.0.tgz fantastic-charts/$helm repo index fantastic-charts --url https://fantastic-charts.storage.googleapis.com",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm package docs/examples/alpine/$mkdir fantastic-charts$mv alpine-0.1.0.tgz fantastic-charts/$helm repo index fantastic-charts --url https://fantastic-charts.storage.googleapis.com",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm package docs/examples/alpine/\n</span></span><span style=\"disp..."
        },
        {
          "language": "",
          "code": "helm repo index",
          "element": "<code>helm repo index</code>"
        },
        {
          "language": "",
          "code": "helm repo index --help",
          "element": "<code>helm repo index --help</code>"
        },
        {
          "language": "",
          "code": "helm repo add [NAME] [URL]",
          "element": "<code>helm repo add [NAME] [URL]</code>"
        },
        {
          "language": "",
          "code": "$helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com$helm repo listfantastic-charts    https://fantastic-charts.storage.googleapis.com",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com$helm repo listfantastic-charts    https://fantastic-charts.storage.googleapis.com",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add fantastic-charts https://fantastic-charts.storage.go..."
        },
        {
          "language": "",
          "code": "$helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com --username my-username --password my-password$helm repo listfantastic-charts    https://fantastic-charts.storage.googleapis.com",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com --username my-username --password my-password$helm repo listfantastic-charts    https://fantastic-charts.storage.googleapis.com",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm repo add fantastic-charts https://fantastic-charts.storage.go..."
        },
        {
          "language": "",
          "code": "helm repo add --insecure-skip-tls-verify ...",
          "element": "<code>helm repo add --insecure-skip-tls-verify ...</code>"
        },
        {
          "language": "",
          "code": "helm repo update",
          "element": "<code>helm repo update</code>"
        },
        {
          "language": "",
          "code": "helm repo add",
          "element": "<code>helm repo add</code>"
        },
        {
          "language": "",
          "code": "helm repo update",
          "element": "<code>helm repo update</code>"
        },
        {
          "language": "",
          "code": "$XDG_CACHE_HOME/helm/repository/cache/",
          "element": "<code>$XDG_CACHE_HOME/helm/repository/cache/</code>"
        },
        {
          "language": "",
          "code": "helm search",
          "element": "<code>helm search</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "The Chart Repository Guide",
          "id": ""
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Create a chart repository",
          "id": "create-a-chart-repository"
        },
        {
          "level": 2,
          "text": "Hosting Chart Repositories",
          "id": "hosting-chart-repositories"
        },
        {
          "level": 2,
          "text": "Managing Chart Repositories",
          "id": "managing-chart-repositories"
        },
        {
          "level": 3,
          "text": "The chart repository structure",
          "id": "the-chart-repository-structure"
        },
        {
          "level": 3,
          "text": "The index file",
          "id": "the-index-file"
        },
        {
          "level": 3,
          "text": "Google Cloud Storage",
          "id": "google-cloud-storage"
        },
        {
          "level": 3,
          "text": "Cloudsmith",
          "id": "cloudsmith"
        },
        {
          "level": 3,
          "text": "JFrog Artifactory",
          "id": "jfrog-artifactory"
        },
        {
          "level": 3,
          "text": "GitHub Pages example",
          "id": "github-pages-example"
        },
        {
          "level": 3,
          "text": "Ordinary web servers",
          "id": "ordinary-web-servers"
        },
        {
          "level": 3,
          "text": "ChartMuseum Repository Server",
          "id": "chartmuseum-repository-server"
        },
        {
          "level": 3,
          "text": "GitLab Package Registry",
          "id": "gitlab-package-registry"
        },
        {
          "level": 3,
          "text": "Store charts in your chart repository",
          "id": "store-charts-in-your-chart-repository"
        },
        {
          "level": 3,
          "text": "Add new charts to an existing repository",
          "id": "add-new-charts-to-an-existing-repository"
        },
        {
          "level": 3,
          "text": "Share your charts with others",
          "id": "share-your-charts-with-others"
        }
      ],
      "timestamp": 1750732668.153048
    },
    {
      "url": "https://helm.sh/docs/topics/registries/",
      "title": "Helm | Use OCI-based registries",
      "content": "Use OCI-based registries\nBeginning in Helm 3, you can use container registries with\nOCI\nsupport to store and share chart packages. Beginning in Helm v3.8.0, OCI support is enabled by default.\nOCI support prior to v3.8.0\nOCI support graduated from experimental to general availability with Helm v3.8.0. In prior versions of Helm, OCI support behaved differently. If you were using OCI support prior to Helm v3.8.0, its important to understand what has changed with different versions of Helm.\nEnabling OCI support prior to v3.8.0\nPrior to Helm v3.8.0, OCI support is\nexperimental\nand must be enabled.\nTo enable OCI experimental support for Helm versions prior to v3.8.0, set\nHELM_EXPERIMENTAL_OCI\nin your environment. For example:\nexport HELM_EXPERIMENTAL_OCI=1\nOCI feature deprecation and behavior changes with v3.8.0\nThe release of\nHelm v3.8.0\n, the following features and behaviors are different from previous versions of Helm:\nWhen setting a chart in the dependencies as OCI, the version can be set to a range like other dependencies.\nSemVer tags that include build information can be pushed and used. OCI registries don't support\n+\nas a tag character. Helm translates the\n+\nto\n_\nwhen stored as a tag.\nThe\nhelm registry login\ncommand now follows the same structure as the Docker CLI for storing credentials. The same location for registry configuration can be passed to both Helm and the Docker CLI.\nOCI feature deprecation and behavior changes with v3.7.0\nThe release of\nHelm v3.7.0\nincluded the implementation of\nHIP 6\nfor OCI support. As a result, the following features and behaviors are different from previous versions of Helm:\nThe\nhelm chart\nsubcommand has been removed.\nThe chart cache has been removed (no\nhelm chart list\netc.).\nOCI registry references are now always prefixed with\noci://\n.\nThe basename of the registry reference must\nalways\nmatch the chart's name.\nThe tag of the registry reference must\nalways\nmatch the chart's semantic version (i.e. no\nlatest\ntags).\nThe chart layer media type was switched from\napplication/tar+gzip\nto\napplication/vnd.cncf.helm.chart.content.v1.tar+gzip\n.\nUsing an OCI-based registry\nHelm repositories in OCI-based registries\nA\nHelm repository\nis a way to house and distribute packaged Helm charts. An OCI-based registry can contain zero or more Helm repositories and each of those repositories can contain zero or more packaged Helm charts.\nUse hosted registries\nThere are several hosted container registries with OCI support that you can use for your Helm charts. For example:\nAmazon ECR\nAzure Container Registry\nCloudsmith\nDocker Hub\nGoogle Artifact Registry\nHarbor\nIBM Cloud Container Registry\nJFrog Artifactory\nFollow the hosted container registry provider's documentation to create and configure a registry with OCI support.\nNote:\nYou can run\nDocker Registry\nor\nzot\n, which are OCI-based registries, on your development computer. Running an OCI-based registry on your development computer should only be used for testing purposes.\nUsing sigstore to sign OCI-based charts\nThe\nhelm-sigstore\nplugin allows using\nSigstore\nto sign Helm charts with the same tools used to sign container images. This provides an alternative to the\nGPG-based provenance\nsupported by classic\nchart repositories\n.\nFor more details on using the\nhelm sigstore\nplugin, see\nthat project's documentation\n.\nCommands for working with registries\nThe\nregistry\nsubcommand\nlogin\nlogin to a registry (with manual password entry)\n$\nhelm registry login -u myuser localhost:5000\nPassword:\nLogin succeeded\nlogout\nlogout from a registry\n$\nhelm registry\nlogout\nlocalhost:5000\nLogout succeeded\nThe\npush\nsubcommand\nUpload a chart to an OCI-based registry:\n$\nhelm push mychart-0.1.0.tgz oci://localhost:5000/helm-charts\nPushed: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723\nThe\npush\nsubcommand can only be used against\n.tgz\nfiles\ncreated ahead of time using\nhelm package\n.\nWhen using\nhelm push\nto upload a chart an OCI registry, the reference\nmust be prefixed with\noci://\nand must not contain the basename or tag.\nThe registry reference basename is inferred from the chart's name,\nand the tag is inferred from the chart's semantic version. This is\ncurrently a strict requirement.\nCertain registries require the repository and/or namespace (if specified)\nto be created beforehand. Otherwise, an error will be produced during the\nhelm push\noperation.\nIf you have created a\nprovenance file\n(\n.prov\n), and it is present next to the chart\n.tgz\nfile, it will\nautomatically be uploaded to the registry upon\npush\n. This results in\nan extra layer on\nthe Helm chart manifest\n.\nUsers of the\nhelm-push plugin\n(for uploading charts to\nChartMuseum\n)\nmay experience issues, since the plugin conflicts with the new, built-in\npush\n.\nAs of version v0.10.0, the plugin has been renamed to\ncm-push\n.\nOther subcommands\nSupport for the\noci://\nprotocol is also available in various other subcommands.\nHere is a complete list:\nhelm pull\nhelm show\nhelm template\nhelm install\nhelm upgrade\nThe basename (chart name) of the registry reference\nis\nincluded for any type of action involving chart download\n(vs.\nhelm push\nwhere it is omitted).\nHere are a few examples of using the subcommands listed above against\nOCI-based charts:\n$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0\nPulled: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff\n$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0\napiVersion: v2\nappVersion: 1.16.0\ndescription: A Helm chart for Kubernetes\nname: mychart\n...\n$ helm template myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0\n---\n# Source: mychart/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\n...\n$ helm install myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0\nNAME: myrelease\nLAST DEPLOYED: Wed Oct 27 15:11:40 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n...\n$ helm upgrade myrelease oci://localhost:5000/helm-charts/mychart --version 0.2.0\nRelease \"myrelease\" has been upgraded. Happy Helming!\nNAME: myrelease\nLAST DEPLOYED: Wed Oct 27 15:12:05 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 2\nNOTES:\n...\nSpecifying dependencies\nDependencies of a chart can be pulled from a registry using the\ndependency update\nsubcommand.\nThe\nrepository\nfor a given entry in\nChart.yaml\nis specified as the registry reference without the basename:\ndependencies:\n- name: mychart\nversion: \"2.7.0\"\nrepository: \"oci://localhost:5000/myrepo\"\nThis will fetch\noci://localhost:5000/myrepo/mychart:2.7.0\nwhen\ndependency update\nis executed.\nHelm chart manifest\nExample Helm chart manifest as represented in a registry\n(note the\nmediaType\nfields):\n{\n\"schemaVersion\"\n:\n2\n,\n\"config\"\n: {\n\"mediaType\"\n:\n\"application/vnd.cncf.helm.config.v1+json\"\n,\n\"digest\"\n:\n\"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\"\n,\n\"size\"\n:\n117\n},\n\"layers\"\n: [\n{\n\"mediaType\"\n:\n\"application/vnd.cncf.helm.chart.content.v1.tar+gzip\"\n,\n\"digest\"\n:\n\"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\"\n,\n\"size\"\n:\n2487\n}\n]\n}\nThe following example contains a\nprovenance file\n(note the extra layer):\n{\n\"schemaVersion\"\n:\n2\n,\n\"config\"\n: {\n\"mediaType\"\n:\n\"application/vnd.cncf.helm.config.v1+json\"\n,\n\"digest\"\n:\n\"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\"\n,\n\"size\"\n:\n117\n},\n\"layers\"\n: [\n{\n\"mediaType\"\n:\n\"application/vnd.cncf.helm.chart.content.v1.tar+gzip\"\n,\n\"digest\"\n:\n\"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\"\n,\n\"size\"\n:\n2487\n},\n{\n\"mediaType\"\n:\n\"application/vnd.cncf.helm.chart.provenance.v1.prov\"\n,\n\"digest\"\n:\n\"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\"\n,\n\"size\"\n:\n643\n}\n]\n}\nMigrating from chart repos\nMigrating from classic\nchart repositories\n(index.yaml-based repos) is as simple using\nhelm pull\n, then using\nhelm push\nto upload the resulting\n.tgz\nfiles to a registry.\nPrev\n← The Chart Repository Guide\nNext\nHelm Architecture →",
      "code_examples": [
        {
          "language": "",
          "code": "HELM_EXPERIMENTAL_OCI",
          "element": "<code>HELM_EXPERIMENTAL_OCI</code>"
        },
        {
          "language": "",
          "code": "export HELM_EXPERIMENTAL_OCI=1",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "export HELM_EXPERIMENTAL_OCI=1",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">export HELM_EXPERIMENTAL_OCI=1\n</span></span></span></code>"
        },
        {
          "language": "",
          "code": "helm registry login",
          "element": "<code>helm registry login</code>"
        },
        {
          "language": "",
          "code": "helm chart list",
          "element": "<code>helm chart list</code>"
        },
        {
          "language": "",
          "code": "application/tar+gzip",
          "element": "<code>application/tar+gzip</code>"
        },
        {
          "language": "",
          "code": "application/vnd.cncf.helm.chart.content.v1.tar+gzip",
          "element": "<code>application/vnd.cncf.helm.chart.content.v1.tar+gzip</code>"
        },
        {
          "language": "",
          "code": "helm-sigstore",
          "element": "<code>helm-sigstore</code>"
        },
        {
          "language": "",
          "code": "helm sigstore",
          "element": "<code>helm sigstore</code>"
        },
        {
          "language": "",
          "code": "$helm registry login -u myuser localhost:5000Password:Login succeeded",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm registry login -u myuser localhost:5000Password:Login succeeded",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm registry login -u myuser localhost:5000\n</span></span><span s..."
        },
        {
          "language": "",
          "code": "$helm registrylogoutlocalhost:5000Logout succeeded",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm registrylogoutlocalhost:5000Logout succeeded",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm registry <span style=\"color:#366\">logout</span> localhost:500..."
        },
        {
          "language": "",
          "code": "$helm push mychart-0.1.0.tgz oci://localhost:5000/helm-chartsPushed: localhost:5000/helm-charts/mychart:0.1.0Digest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm push mychart-0.1.0.tgz oci://localhost:5000/helm-chartsPushed: localhost:5000/helm-charts/mychart:0.1.0Digest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm push mychart-0.1.0.tgz oci://localhost:5000/helm-charts\n</spa..."
        },
        {
          "language": "",
          "code": "helm package",
          "element": "<code>helm package</code>"
        },
        {
          "language": "",
          "code": "helm template",
          "element": "<code>helm template</code>"
        },
        {
          "language": "",
          "code": "helm install",
          "element": "<code>helm install</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0Pulled: localhost:5000/helm-charts/mychart:0.1.0Digest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0apiVersion: v2appVersion: 1.16.0description: A Helm chart for Kubernetesname: mychart...$ helm template myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0---# Source: mychart/templates/serviceaccount.yamlapiVersion: v1kind: ServiceAccount...$ helm install myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0NAME: myreleaseLAST DEPLOYED: Wed Oct 27 15:11:40 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1NOTES:...$ helm upgrade myrelease oci://localhost:5000/helm-charts/mychart --version 0.2.0Release \"myrelease\" has been upgraded. Happy Helming!NAME: myreleaseLAST DEPLOYED: Wed Oct 27 15:12:05 2021NAMESPACE: defaultSTATUS: deployedREVISION: 2NOTES:...",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>$ helm pull oci://loca..."
        },
        {
          "language": "language-fallback",
          "code": "$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0Pulled: localhost:5000/helm-charts/mychart:0.1.0Digest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0apiVersion: v2appVersion: 1.16.0description: A Helm chart for Kubernetesname: mychart...$ helm template myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0---# Source: mychart/templates/serviceaccount.yamlapiVersion: v1kind: ServiceAccount...$ helm install myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0NAME: myreleaseLAST DEPLOYED: Wed Oct 27 15:11:40 2021NAMESPACE: defaultSTATUS: deployedREVISION: 1NOTES:...$ helm upgrade myrelease oci://localhost:5000/helm-charts/mychart --version 0.2.0Release \"myrelease\" has been upgraded. Happy Helming!NAME: myreleaseLAST DEPLOYED: Wed Oct 27 15:12:05 2021NAMESPACE: defaultSTATUS: deployedREVISION: 2NOTES:...",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0\n</span></span><span style=\"display:flex\"><spa..."
        },
        {
          "language": "",
          "code": "dependency update",
          "element": "<code>dependency update</code>"
        },
        {
          "language": "",
          "code": "dependencies:- name: mychartversion: \"2.7.0\"repository: \"oci://localhost:5000/myrepo\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>dependencies:\n</span><..."
        },
        {
          "language": "language-fallback",
          "code": "dependencies:- name: mychartversion: \"2.7.0\"repository: \"oci://localhost:5000/myrepo\"",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>dependencies:\n</span></span><span style=\"display:flex\"><span>  - name: mychart\n</span></span><span style=\"display:..."
        },
        {
          "language": "",
          "code": "oci://localhost:5000/myrepo/mychart:2.7.0",
          "element": "<code>oci://localhost:5000/myrepo/mychart:2.7.0</code>"
        },
        {
          "language": "",
          "code": "dependency update",
          "element": "<code>dependency update</code>"
        },
        {
          "language": "",
          "code": "{\"schemaVersion\":2,\"config\": {\"mediaType\":\"application/vnd.cncf.helm.config.v1+json\",\"digest\":\"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\"size\":117},\"layers\": [{\"mediaType\":\"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\"digest\":\"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\"size\":2487}]}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex\"><span>{\n</span></span><span style=\"d..."
        },
        {
          "language": "language-json",
          "code": "{\"schemaVersion\":2,\"config\": {\"mediaType\":\"application/vnd.cncf.helm.config.v1+json\",\"digest\":\"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\"size\":117},\"layers\": [{\"mediaType\":\"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\"digest\":\"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\"size\":2487}]}",
          "element": "<code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex\"><span>{\n</span></span><span style=\"display:flex\"><span>  <span style=\"color:#309;font-weight:700\">\"schemaVersion\"</span>: <span ..."
        },
        {
          "language": "",
          "code": "{\"schemaVersion\":2,\"config\": {\"mediaType\":\"application/vnd.cncf.helm.config.v1+json\",\"digest\":\"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\"size\":117},\"layers\": [{\"mediaType\":\"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\"digest\":\"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\"size\":2487},{\"mediaType\":\"application/vnd.cncf.helm.chart.provenance.v1.prov\",\"digest\":\"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\",\"size\":643}]}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex\"><span>{\n</span></span><span style=\"d..."
        },
        {
          "language": "language-json",
          "code": "{\"schemaVersion\":2,\"config\": {\"mediaType\":\"application/vnd.cncf.helm.config.v1+json\",\"digest\":\"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\"size\":117},\"layers\": [{\"mediaType\":\"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\"digest\":\"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\"size\":2487},{\"mediaType\":\"application/vnd.cncf.helm.chart.provenance.v1.prov\",\"digest\":\"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\",\"size\":643}]}",
          "element": "<code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex\"><span>{\n</span></span><span style=\"display:flex\"><span>  <span style=\"color:#309;font-weight:700\">\"schemaVersion\"</span>: <span ..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Use OCI-based registries",
          "id": ""
        },
        {
          "level": 2,
          "text": "OCI support prior to v3.8.0",
          "id": "oci-support-prior-to-v380"
        },
        {
          "level": 2,
          "text": "Using an OCI-based registry",
          "id": "using-an-oci-based-registry"
        },
        {
          "level": 2,
          "text": "Commands for working with registries",
          "id": "commands-for-working-with-registries"
        },
        {
          "level": 2,
          "text": "Specifying dependencies",
          "id": "specifying-dependencies"
        },
        {
          "level": 2,
          "text": "Helm chart manifest",
          "id": "helm-chart-manifest"
        },
        {
          "level": 2,
          "text": "Migrating from chart repos",
          "id": "migrating-from-chart-repos"
        },
        {
          "level": 3,
          "text": "Enabling OCI support prior to v3.8.0",
          "id": "enabling-oci-support-prior-to-v380"
        },
        {
          "level": 3,
          "text": "OCI feature deprecation and behavior changes with v3.8.0",
          "id": "oci-feature-deprecation-and-behavior-changes-with-v380"
        },
        {
          "level": 3,
          "text": "OCI feature deprecation and behavior changes with v3.7.0",
          "id": "oci-feature-deprecation-and-behavior-changes-with-v370"
        },
        {
          "level": 3,
          "text": "Helm repositories in OCI-based registries",
          "id": "helm-repositories-in-oci-based-registries"
        },
        {
          "level": 3,
          "text": "Use hosted registries",
          "id": "use-hosted-registries"
        },
        {
          "level": 3,
          "text": "Using sigstore to sign OCI-based charts",
          "id": "using-sigstore-to-sign-oci-based-charts"
        },
        {
          "level": 3,
          "text": "Theregistrysubcommand",
          "id": "the-registry-subcommand"
        },
        {
          "level": 3,
          "text": "Thepushsubcommand",
          "id": "the-push-subcommand"
        },
        {
          "level": 3,
          "text": "Other subcommands",
          "id": "other-subcommands"
        },
        {
          "level": 4,
          "text": "login",
          "id": "login"
        },
        {
          "level": 4,
          "text": "logout",
          "id": "logout"
        }
      ],
      "timestamp": 1750732670.722877
    },
    {
      "url": "https://helm.sh/docs/topics/architecture/",
      "title": "Helm | Helm Architecture",
      "content": "Helm Architecture\nHelm Architecture\nThis document describes the Helm architecture at a high level.\nThe Purpose of Helm\nHelm is a tool for managing Kubernetes packages called\ncharts\n. Helm can do the\nfollowing:\nCreate new charts from scratch\nPackage charts into chart archive (tgz) files\nInteract with chart repositories where charts are stored\nInstall and uninstall charts into an existing Kubernetes cluster\nManage the release cycle of charts that have been installed with Helm\nFor Helm, there are three important concepts:\nThe\nchart\nis a bundle of information necessary to create an instance of a\nKubernetes application.\nThe\nconfig\ncontains configuration information that can be merged into a\npackaged chart to create a releasable object.\nA\nrelease\nis a running instance of a\nchart\n, combined with a specific\nconfig\n.\nComponents\nHelm is an executable which is implemented into two distinct parts:\nThe Helm Client\nis a command-line client for end users. The client is\nresponsible for the following:\nLocal chart development\nManaging repositories\nManaging releases\nInterfacing with the Helm library\nSending charts to be installed\nRequesting upgrading or uninstalling of existing releases\nThe Helm Library\nprovides the logic for executing all Helm operations. It\ninterfaces with the Kubernetes API server and provides the following capability:\nCombining a chart and configuration to build a release\nInstalling charts into Kubernetes, and providing the subsequent release object\nUpgrading and uninstalling charts by interacting with Kubernetes\nThe standalone Helm library encapsulates the Helm logic so that it can be\nleveraged by different clients.\nImplementation\nThe Helm client and library is written in the Go programming language.\nThe library uses the Kubernetes client library to communicate with Kubernetes.\nCurrently, that library uses REST+JSON. It stores information in Secrets located\ninside of Kubernetes. It does not need its own database.\nConfiguration files are, when possible, written in YAML.\nPrev\n← Use OCI-based registries\nNext\nAdvanced Helm Techniques →",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Helm Architecture",
          "id": ""
        },
        {
          "level": 1,
          "text": "Helm Architecture",
          "id": "helm-architecture"
        },
        {
          "level": 2,
          "text": "The Purpose of Helm",
          "id": "the-purpose-of-helm"
        },
        {
          "level": 2,
          "text": "Components",
          "id": "components"
        },
        {
          "level": 2,
          "text": "Implementation",
          "id": "implementation"
        }
      ],
      "timestamp": 1750732672.982059
    },
    {
      "url": "https://helm.sh/docs/topics/advanced/",
      "title": "Helm | Advanced Helm Techniques",
      "content": "Advanced Helm Techniques\nThis section explains various advanced features and techniques for using Helm.\nThe information in this section is intended for \"power users\" of Helm that wish\nto do advanced customization and manipulation of their charts and releases. Each\nof these advanced features comes with their own tradeoffs and caveats, so each\none must be used carefully and with deep knowledge of Helm. Or in other words,\nremember the\nPeter Parker\nprinciple\nPost Rendering\nPost rendering gives chart installers the ability to manually manipulate,\nconfigure, and/or validate rendered manifests before they are installed by Helm.\nThis allows users with advanced configuration needs to be able to use tools like\nkustomize\nto apply configuration changes without the\nneed to fork a public chart or requiring chart maintainers to specify every last\nconfiguration option for a piece of software. There are also use cases for\ninjecting common tools and side cars in enterprise environments or analysis of\nthe manifests before deployment.\nPrerequisites\nHelm 3.1+\nUsage\nA post-renderer can be any executable that accepts rendered Kubernetes manifests\non STDIN and returns valid Kubernetes manifests on STDOUT. It should return an\nnon-0 exit code in the event of a failure. This is the only \"API\" between the\ntwo components. It allows for great flexibility in what you can do with your\npost-render process.\nA post renderer can be used with\ninstall\n,\nupgrade\n, and\ntemplate\n. To use a\npost-renderer, use the\n--post-renderer\nflag with a path to the renderer\nexecutable you wish to use:\n$ helm install mychart stable/wordpress --post-renderer ./path/to/executable\nIf the path does not contain any separators, it will search in $PATH, otherwise\nit will resolve any relative paths to a fully qualified path\nIf you wish to use multiple post-renderers, call all of them in a script or\ntogether in whatever binary tool you have built. In bash, this would be as\nsimple as\nrenderer1 | renderer2 | renderer3\n.\nYou can see an example of using\nkustomize\nas a post renderer\nhere\n.\nCaveats\nWhen using post renderers, there are several important things to keep in mind.\nThe most important of these is that when using a post-renderer, all people\nmodifying that release\nMUST\nuse the same renderer in order to have\nrepeatable builds. This feature is purposefully built to allow any user to\nswitch out which renderer they are using or to stop using a renderer, but this\nshould be done deliberately to avoid accidental modification or data loss.\nOne other important note is around security. If you are using a post-renderer,\nyou should ensure it is coming from a reliable source (as is the case for any\nother arbitrary executable). Using non-trusted or non-verified renderers is NOT\nrecommended as they have full access to rendered templates, which often contain\nsecret data.\nCustom Post Renderers\nThe post render step offers even more flexibility when used in the Go SDK. Any\npost renderer only needs to implement the following Go interface:\ntype\nPostRenderer\ninterface\n{\n// Run expects a single buffer filled with Helm rendered manifests. It\n// expects the modified results to be returned on a separate buffer or an\n// error if there was an issue or failure while running the post render step\nRun\n(renderedManifests\n*\nbytes.Buffer) (modifiedManifests\n*\nbytes.Buffer, err\nerror\n)\n}\nFor more information on using the Go SDK, See the\nGo SDK section\nGo SDK\nHelm 3 debuted a completely restructured Go SDK for a better experience when\nbuilding software and tools that leverage Helm. Full documentation can be found\nin the\nGo SDK Section\n.\nStorage backends\nHelm 3 changed the default release information storage to Secrets in the\nnamespace of the release. Helm 2 by default stores release information as\nConfigMaps in the namespace of the Tiller instance. The subsections which follow\nshow how to configure different backends. This configuration is based on the\nHELM_DRIVER\nenvironment variable. It can be set to one of the values:\n[configmap, secret, sql]\n.\nConfigMap storage backend\nTo enable the ConfigMap backend, you'll need to set the environmental variable\nHELM_DRIVER\nto\nconfigmap\n.\nYou can set it in a shell as follows:\nexport\nHELM_DRIVER\n=\nconfigmap\nIf you want to switch from the default backend to the ConfigMap backend, you'll\nhave to do the migration for this on your own. You can retrieve release\ninformation with the following command:\nkubectl get secret --all-namespaces -l\n\"owner=helm\"\nPRODUCTION NOTES\n: The release information includes the contents of charts and\nvalues files, and therefore might contain sensitive data (like\npasswords, private keys, and other credentials) that needs to be protected from\nunauthorized access. When managing Kubernetes authorization, for instance with\nRBAC\n, it is\npossible to grant broader access to ConfigMap resources, while restricting\naccess to Secret resources. For instance, the default\nuser-facing\nrole\n\"view\" grants access to most resources, but not to Secrets. Furthermore, secrets\ndata can be configured for\nencrypted\nstorage\n.\nPlease keep that in mind if you decide to switch to the ConfigMap backend, as it\ncould expose your application's sensitive data.\nSQL storage backend\nThere is a\nbeta\nSQL storage backend that stores release information in an SQL\ndatabase.\nUsing such a storage backend is particularly useful if your release information\nweighs more than 1MB (in which case, it can't be stored in ConfigMaps/Secrets\nbecause of internal limits in Kubernetes' underlying etcd key-value store).\nTo enable the SQL backend, you'll need to deploy a SQL database and set the\nenvironmental variable\nHELM_DRIVER\nto\nsql\n. The DB details are set with the\nenvironmental variable\nHELM_DRIVER_SQL_CONNECTION_STRING\n.\nYou can set it in a shell as follows:\nexport\nHELM_DRIVER\n=\nsql\nexport\nHELM_DRIVER_SQL_CONNECTION_STRING\n=\npostgresql://helm-postgres:5432/helm?user\n=\nhelm&\npassword\n=\nchangeme\nNote: Only PostgreSQL is supported at this moment.\nPRODUCTION NOTES\n: It is recommended to:\nMake your database production ready. For PostgreSQL, refer to the\nServer Administration\ndocs for more details\nEnable\npermission management\nto\nmirror Kubernetes RBAC for release information\nIf you want to switch from the default backend to the SQL backend, you'll have\nto do the migration for this on your own. You can retrieve release information\nwith the following command:\nkubectl get secret --all-namespaces -l\n\"owner=helm\"\nPrev\n← Helm Architecture\nNext\nKubernetes Distribution Guide →",
      "code_examples": [
        {
          "language": "",
          "code": "--post-renderer",
          "element": "<code>--post-renderer</code>"
        },
        {
          "language": "",
          "code": "$ helm install mychart stable/wordpress --post-renderer ./path/to/executable",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span>$ helm install mychart stabl..."
        },
        {
          "language": "language-shell",
          "code": "$ helm install mychart stable/wordpress --post-renderer ./path/to/executable",
          "element": "<code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span>$ helm install mychart stable/wordpress --post-renderer ./path/to/executable\n</span></span></code>"
        },
        {
          "language": "",
          "code": "renderer1 | renderer2 | renderer3",
          "element": "<code>renderer1 | renderer2 | renderer3</code>"
        },
        {
          "language": "",
          "code": "typePostRendererinterface{// Run expects a single buffer filled with Helm rendered manifests. It// expects the modified results to be returned on a separate buffer or an// error if there was an issue or failure while running the post render stepRun(renderedManifests*bytes.Buffer) (modifiedManifests*bytes.Buffer, errerror)}",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-go\" data-lang=\"go\"><span style=\"display:flex\"><span><span style=\"color:#069;font-weigh..."
        },
        {
          "language": "language-go",
          "code": "typePostRendererinterface{// Run expects a single buffer filled with Helm rendered manifests. It// expects the modified results to be returned on a separate buffer or an// error if there was an issue or failure while running the post render stepRun(renderedManifests*bytes.Buffer) (modifiedManifests*bytes.Buffer, errerror)}",
          "element": "<code class=\"language-go\" data-lang=\"go\"><span style=\"display:flex\"><span><span style=\"color:#069;font-weight:700\">type</span> PostRenderer <span style=\"color:#069;font-weight:700\">interface</span> {\n..."
        },
        {
          "language": "",
          "code": "HELM_DRIVER",
          "element": "<code>HELM_DRIVER</code>"
        },
        {
          "language": "",
          "code": "[configmap, secret, sql]",
          "element": "<code>[configmap, secret, sql]</code>"
        },
        {
          "language": "",
          "code": "HELM_DRIVER",
          "element": "<code>HELM_DRIVER</code>"
        },
        {
          "language": "",
          "code": "exportHELM_DRIVER=configmap",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span><span style=\"color:#366\">exp..."
        },
        {
          "language": "language-shell",
          "code": "exportHELM_DRIVER=configmap",
          "element": "<code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span><span style=\"color:#366\">export</span> <span style=\"color:#033\">HELM_DRIVER</span><span style=\"color:#555\">=</span>confi..."
        },
        {
          "language": "",
          "code": "kubectl get secret --all-namespaces -l\"owner=helm\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span>kubectl get secret --all-nam..."
        },
        {
          "language": "language-shell",
          "code": "kubectl get secret --all-namespaces -l\"owner=helm\"",
          "element": "<code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span>kubectl get secret --all-namespaces -l <span style=\"color:#c30\">\"owner=helm\"</span>\n</span></span></code>"
        },
        {
          "language": "",
          "code": "HELM_DRIVER",
          "element": "<code>HELM_DRIVER</code>"
        },
        {
          "language": "",
          "code": "HELM_DRIVER_SQL_CONNECTION_STRING",
          "element": "<code>HELM_DRIVER_SQL_CONNECTION_STRING</code>"
        },
        {
          "language": "",
          "code": "exportHELM_DRIVER=sqlexportHELM_DRIVER_SQL_CONNECTION_STRING=postgresql://helm-postgres:5432/helm?user=helm&password=changeme",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span><span style=\"color:#366\">exp..."
        },
        {
          "language": "language-shell",
          "code": "exportHELM_DRIVER=sqlexportHELM_DRIVER_SQL_CONNECTION_STRING=postgresql://helm-postgres:5432/helm?user=helm&password=changeme",
          "element": "<code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span><span style=\"color:#366\">export</span> <span style=\"color:#033\">HELM_DRIVER</span><span style=\"color:#555\">=</span>sql\n<..."
        },
        {
          "language": "",
          "code": "kubectl get secret --all-namespaces -l\"owner=helm\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span>kubectl get secret --all-nam..."
        },
        {
          "language": "language-shell",
          "code": "kubectl get secret --all-namespaces -l\"owner=helm\"",
          "element": "<code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex\"><span>kubectl get secret --all-namespaces -l <span style=\"color:#c30\">\"owner=helm\"</span>\n</span></span></code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Advanced Helm Techniques",
          "id": ""
        },
        {
          "level": 2,
          "text": "Post Rendering",
          "id": "post-rendering"
        },
        {
          "level": 2,
          "text": "Go SDK",
          "id": "go-sdk"
        },
        {
          "level": 2,
          "text": "Storage backends",
          "id": "storage-backends"
        },
        {
          "level": 3,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 3,
          "text": "Usage",
          "id": "usage"
        },
        {
          "level": 3,
          "text": "Caveats",
          "id": "caveats"
        },
        {
          "level": 3,
          "text": "Custom Post Renderers",
          "id": "custom-post-renderers"
        },
        {
          "level": 3,
          "text": "ConfigMap storage backend",
          "id": "configmap-storage-backend"
        },
        {
          "level": 3,
          "text": "SQL storage backend",
          "id": "sql-storage-backend"
        }
      ],
      "timestamp": 1750732675.264739
    },
    {
      "url": "https://helm.sh/docs/topics/kubernetes_distros/",
      "title": "Helm | Kubernetes Distribution Guide",
      "content": "Kubernetes Distribution Guide\nHelm should work with any\nconformant version of\nKubernetes\n(whether\ncertified\nor not).\nThis document captures information about using Helm in specific Kubernetes\nenvironments. Please contribute more details about any distros (sorted\nalphabetically) if desired.\nAKS\nHelm works with\nAzure Kubernetes\nService\n.\nDC/OS\nHelm has been tested and is working on Mesospheres DC/OS 1.11 Kubernetes\nplatform, and requires no additional configuration.\nEKS\nHelm works with Amazon Elastic Kubernetes Service (Amazon EKS):\nUsing Helm with Amazon\nEKS\n.\nGKE\nGoogle's GKE hosted Kubernetes platform is known to work with Helm, and requires\nno additional configuration.\nscripts/local-cluster\nand Hyperkube\nHyperkube configured via\nscripts/local-cluster.sh\nis known to work. For raw\nHyperkube you may need to do some manual configuration.\nIKS\nHelm works with\nIBM Cloud Kubernetes\nService\n.\nKIND (Kubernetes IN Docker)\nHelm is regularly tested on\nKIND\n.\nKubeOne\nHelm works in clusters that are set up by KubeOne without caveats.\nKubermatic\nHelm works in user clusters that are created by Kubermatic without caveats.\nSince seed cluster can be set up in different ways Helm support depends on their\nconfiguration.\nMicroK8s\nHelm can be enabled in\nMicroK8s\nusing the command:\nmicrok8s.enable helm3\nMinikube\nHelm is tested and known to work with\nMinikube\n. It requires no additional\nconfiguration.\nOpenshift\nHelm works straightforward on OpenShift Online, OpenShift Dedicated, OpenShift\nContainer Platform (version >= 3.6) or OpenShift Origin (version >= 3.6). To\nlearn more read\nthis\nblog\npost.\nPlatform9\nHelm is pre-installed with\nPlatform9 Managed\nKubernetes\n.\nPlatform9 provides access to all official Helm charts through the App Catalog UI\nand native Kubernetes CLI. Additional repositories can be manually added.\nFurther details are available in this\nPlatform9 App Catalog\narticle\n.\nUbuntu with\nkubeadm\nKubernetes bootstrapped with\nkubeadm\nis known to work on the following Linux\ndistributions:\nUbuntu 16.04\nFedora release 25\nSome versions of Helm (v2.0.0-beta2) require you to\nexport KUBECONFIG=/etc/kubernetes/admin.conf\nor create a\n~/.kube/config\n.\nVMware Tanzu Kubernetes Grid\nHelm runs on VMware Tanzu Kubernetes Grid, TKG, without needing configuration changes.\nThe Tanzu CLI can manage installing packages for\nhelm-controller\nallowing for declaratively managing Helm chart releases.\nFurther details available in the TKG documentation for\nCLI-Managed Packages\n.\nPrev\n← Advanced Helm Techniques\nNext\nRole-based Access Control →",
      "code_examples": [
        {
          "language": "",
          "code": "scripts/local-cluster",
          "element": "<code>scripts/local-cluster</code>"
        },
        {
          "language": "",
          "code": "scripts/local-cluster.sh",
          "element": "<code>scripts/local-cluster.sh</code>"
        },
        {
          "language": "",
          "code": "microk8s.enable helm3",
          "element": "<code>microk8s.enable helm3</code>"
        },
        {
          "language": "",
          "code": "export KUBECONFIG=/etc/kubernetes/admin.conf",
          "element": "<code>export KUBECONFIG=/etc/kubernetes/admin.conf</code>"
        },
        {
          "language": "",
          "code": "~/.kube/config",
          "element": "<code>~/.kube/config</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Kubernetes Distribution Guide",
          "id": ""
        },
        {
          "level": 2,
          "text": "AKS",
          "id": "aks"
        },
        {
          "level": 2,
          "text": "DC/OS",
          "id": "dcos"
        },
        {
          "level": 2,
          "text": "EKS",
          "id": "eks"
        },
        {
          "level": 2,
          "text": "GKE",
          "id": "gke"
        },
        {
          "level": 2,
          "text": "scripts/local-clusterand Hyperkube",
          "id": "scriptslocal-cluster-and-hyperkube"
        },
        {
          "level": 2,
          "text": "IKS",
          "id": "iks"
        },
        {
          "level": 2,
          "text": "KIND (Kubernetes IN Docker)",
          "id": "kind-kubernetes-in-docker"
        },
        {
          "level": 2,
          "text": "KubeOne",
          "id": "kubeone"
        },
        {
          "level": 2,
          "text": "Kubermatic",
          "id": "kubermatic"
        },
        {
          "level": 2,
          "text": "MicroK8s",
          "id": "microk8s"
        },
        {
          "level": 2,
          "text": "Minikube",
          "id": "minikube"
        },
        {
          "level": 2,
          "text": "Openshift",
          "id": "openshift"
        },
        {
          "level": 2,
          "text": "Platform9",
          "id": "platform9"
        },
        {
          "level": 2,
          "text": "Ubuntu withkubeadm",
          "id": "ubuntu-with-kubeadm"
        },
        {
          "level": 2,
          "text": "VMware Tanzu Kubernetes Grid",
          "id": "vmware-tanzu-kubernetes-grid"
        }
      ],
      "timestamp": 1750732677.522581
    },
    {
      "url": "https://helm.sh/docs/topics/rbac/",
      "title": "Helm | Role-based Access Control",
      "content": "Role-based Access Control\nIn Kubernetes, granting roles to a user or an application-specific service\naccount is a best practice to ensure that your application is operating in the\nscope that you have specified. Read more about service account permissions\nin\nthe official Kubernetes\ndocs\n.\nFrom Kubernetes 1.6 onwards, Role-based Access Control is enabled by default.\nRBAC allows you to specify which types of actions are permitted depending on the\nuser and their role in your organization.\nWith RBAC, you can\ngrant privileged operations (creating cluster-wide resources, like new roles)\nto administrators\nlimit a user's ability to create resources (pods, persistent volumes,\ndeployments) to specific namespaces, or in cluster-wide scopes (resource\nquotas, roles, custom resource definitions)\nlimit a user's ability to view resources either in specific namespaces or at a\ncluster-wide scope.\nThis guide is for administrators who want to restrict the scope of a user's\ninteraction with the Kubernetes API.\nManaging user accounts\nAll Kubernetes clusters have two categories of users: service accounts managed\nby Kubernetes, and normal users.\nNormal users are assumed to be managed by an outside, independent service. An\nadministrator distributing private keys, a user store like Keystone or Google\nAccounts, even a file with a list of usernames and passwords. In this regard,\nKubernetes does not have objects which represent normal user accounts. Normal\nusers cannot be added to a cluster through an API call.\nIn contrast, service accounts are users managed by the Kubernetes API. They are\nbound to specific namespaces, and created automatically by the API server or\nmanually through API calls. Service accounts are tied to a set of credentials\nstored as Secrets, which are mounted into pods allowing in-cluster processes to\ntalk to the Kubernetes API.\nAPI requests are tied to either a normal user or a service account, or are\ntreated as anonymous requests. This means every process inside or outside the\ncluster, from a human user typing\nkubectl\non a workstation, to kubelets on\nnodes, to members of the control plane, must authenticate when making requests\nto the API server, or be treated as an anonymous user.\nRoles, ClusterRoles, RoleBindings, and ClusterRoleBindings\nIn Kubernetes, user accounts and service accounts can only view and edit\nresources they have been granted access to. This access is granted through the\nuse of Roles and RoleBindings. Roles and RoleBindings are bound to a particular\nnamespace, which grant users the ability to view and/or edit resources within\nthat namespace the Role provides them access to.\nAt a cluster scope, these are called ClusterRoles and ClusterRoleBindings.\nGranting a user a ClusterRole grants them access to view and/or edit resources\nacross the entire cluster. It is also required to view and/or edit resources at\nthe cluster scope (namespaces, resource quotas, nodes).\nClusterRoles can be bound to a particular namespace through reference in a\nRoleBinding. The\nadmin\n,\nedit\nand\nview\ndefault ClusterRoles are commonly\nused in this manner.\nThese are a few ClusterRoles available by default in Kubernetes. They are\nintended to be user-facing roles. They include super-user roles\n(\ncluster-admin\n), and roles with more granular access (\nadmin\n,\nedit\n,\nview\n).\nDefault ClusterRole\nDefault ClusterRoleBinding\nDescription\ncluster-admin\nsystem:masters\ngroup\nAllows super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the rolebinding's namespace, including the namespace itself.\nadmin\nNone\nAllows admin access, intended to be granted within a namespace using a RoleBinding. If used in a RoleBinding, allows read/write access to most resources in a namespace, including the ability to create roles and rolebindings within the namespace. It does not allow write access to resource quota or to the namespace itself.\nedit\nNone\nAllows read/write access to most objects in a namespace. It does not allow viewing or modifying roles or rolebindings.\nview\nNone\nAllows read-only access to see most objects in a namespace. It does not allow viewing roles or rolebindings. It does not allow viewing secrets, since those are escalating.\nRestricting a user account's access using RBAC\nNow that we understand the basics of Role-based Access Control, let's discuss\nhow an administrator can restrict a user's scope of access.\nExample: Grant a user read/write access to a particular namespace\nTo restrict a user's access to a particular namespace, we can use either the\nedit\nor the\nadmin\nrole. If your charts create or interact with Roles and\nRolebindings, you'll want to use the\nadmin\nClusterRole.\nAdditionally, you may also create a RoleBinding with\ncluster-admin\naccess.\nGranting a user\ncluster-admin\naccess at the namespace scope provides full\ncontrol over every resource in the namespace, including the namespace itself.\nFor this example, we will create a user with the\nedit\nRole. First, create the\nnamespace:\n$\nkubectl create namespace foo\nNow, create a RoleBinding in that namespace, granting the user the\nedit\nrole.\n$\nkubectl create rolebinding sam-edit\n--clusterrole edit \\​\n--user sam \\​\n--namespace foo\nExample: Grant a user read/write access at the cluster scope\nIf a user wishes to install a chart that installs cluster-scope resources\n(namespaces, roles, custom resource definitions, etc.), they will require\ncluster-scope write access.\nTo do that, grant the user either\nadmin\nor\ncluster-admin\naccess.\nGranting a user\ncluster-admin\naccess grants them access to absolutely every\nresource available in Kubernetes, including node access with\nkubectl drain\nand\nother administrative tasks. It is highly recommended to consider providing the\nuser\nadmin\naccess instead, or to create a custom ClusterRole tailored to their\nneeds.\n$\nkubectl create clusterrolebinding sam-view\n--clusterrole view \\​\n--user sam\n$\nkubectl create clusterrolebinding sam-secret-reader\n--clusterrole secret-reader \\​\n--user sam\nExample: Grant a user read-only access to a particular namespace\nYou might've noticed that there is no ClusterRole available for viewing secrets.\nThe\nview\nClusterRole does not grant a user read access to Secrets due to\nescalation concerns. Helm stores release metadata as Secrets by default.\nIn order for a user to run\nhelm list\n, they need to be able to read these\nsecrets. For that, we will create a special\nsecret-reader\nClusterRole.\nCreate the file\ncluster-role-secret-reader.yaml\nand write the following\ncontent into the file:\napiVersion\n:\nrbac.authorization.k8s.io/v1​\nkind\n:\nClusterRole​\nmetadata:​\nname\n:\nsecret-reader​\nrules:​\n-\napiGroups\n:\n[\n\"\"\n]​\nresources\n:\n[\n\"secrets\"\n]​\nverbs\n:\n[\n\"get\"\n,\n\"watch\"\n,\n\"list\"\n]\nThen, create the ClusterRole using\n$\nkubectl create -f clusterrole-secret-reader.yaml​\nOnce that's done, we can grant a user read access to most resources, and then\ngrant them read access to secrets:\n$\nkubectl create namespace foo\n$\nkubectl create rolebinding sam-view\n--clusterrole view \\​\n--user sam \\​\n--namespace foo\n$\nkubectl create rolebinding sam-secret-reader\n--clusterrole secret-reader \\​\n--user sam \\​\n--namespace foo\nExample: Grant a user read-only access at the cluster scope\nIn certain scenarios, it may be beneficial to grant a user cluster-scope access.\nFor example, if a user wants to run the command\nhelm list --all-namespaces\n,\nthe API requires the user has cluster-scope read access.\nTo do that, grant the user both\nview\nand\nsecret-reader\naccess as described\nabove, but with a ClusterRoleBinding.\n$\nkubectl create clusterrolebinding sam-view\n--clusterrole view \\​\n--user sam\n$\nkubectl create clusterrolebinding sam-secret-reader\n--clusterrole secret-reader \\​\n--user sam\nAdditional Thoughts\nThe examples shown above utilize the default ClusterRoles provided with\nKubernetes. For more fine-grained control over what resources users are granted\naccess to, have a look at\nthe Kubernetes\ndocumentation\non\ncreating your own custom Roles and ClusterRoles.\nPrev\n← Kubernetes Distribution Guide\nNext\nThe Helm Plugins Guide →",
      "code_examples": [
        {
          "language": "",
          "code": "cluster-admin",
          "element": "<code>cluster-admin</code>"
        },
        {
          "language": "",
          "code": "cluster-admin",
          "element": "<code>cluster-admin</code>"
        },
        {
          "language": "",
          "code": "system:masters",
          "element": "<code>system:masters</code>"
        },
        {
          "language": "",
          "code": "cluster-admin",
          "element": "<code>cluster-admin</code>"
        },
        {
          "language": "",
          "code": "cluster-admin",
          "element": "<code>cluster-admin</code>"
        },
        {
          "language": "",
          "code": "$kubectl create namespace foo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$kubectl create namespace foo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> kubectl create namespace foo\n</span></span></code>"
        },
        {
          "language": "",
          "code": "$kubectl create rolebinding sam-edit--clusterrole edit \\​--user sam \\​--namespace foo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$kubectl create rolebinding sam-edit--clusterrole edit \\​--user sam \\​--namespace foo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> kubectl create rolebinding sam-edit\n</span></span><span style=\"dis..."
        },
        {
          "language": "",
          "code": "cluster-admin",
          "element": "<code>cluster-admin</code>"
        },
        {
          "language": "",
          "code": "cluster-admin",
          "element": "<code>cluster-admin</code>"
        },
        {
          "language": "",
          "code": "kubectl drain",
          "element": "<code>kubectl drain</code>"
        },
        {
          "language": "",
          "code": "$kubectl create clusterrolebinding sam-view--clusterrole view \\​--user sam$kubectl create clusterrolebinding sam-secret-reader--clusterrole secret-reader \\​--user sam",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$kubectl create clusterrolebinding sam-view--clusterrole view \\​--user sam$kubectl create clusterrolebinding sam-secret-reader--clusterrole secret-reader \\​--user sam",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> kubectl create clusterrolebinding sam-view\n</span></span><span sty..."
        },
        {
          "language": "",
          "code": "secret-reader",
          "element": "<code>secret-reader</code>"
        },
        {
          "language": "",
          "code": "cluster-role-secret-reader.yaml",
          "element": "<code>cluster-role-secret-reader.yaml</code>"
        },
        {
          "language": "",
          "code": "apiVersion:rbac.authorization.k8s.io/v1​kind:ClusterRole​metadata:​name:secret-reader​rules:​-apiGroups:[\"\"]​resources:[\"secrets\"]​verbs:[\"get\",\"watch\",\"list\"]",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:rbac.authorization.k8s.io/v1​kind:ClusterRole​metadata:​name:secret-reader​rules:​-apiGroups:[\"\"]​resources:[\"secrets\"]​verbs:[\"get\",\"watch\",\"list\"]",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>rbac.authorization.k8s.io/v1​<..."
        },
        {
          "language": "",
          "code": "$kubectl create -f clusterrole-secret-reader.yaml​",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$kubectl create -f clusterrole-secret-reader.yaml​",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> kubectl create -f clusterrole-secret-reader.yaml​\n</span></span></..."
        },
        {
          "language": "",
          "code": "$kubectl create namespace foo$kubectl create rolebinding sam-view--clusterrole view \\​--user sam \\​--namespace foo$kubectl create rolebinding sam-secret-reader--clusterrole secret-reader \\​--user sam \\​--namespace foo",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$kubectl create namespace foo$kubectl create rolebinding sam-view--clusterrole view \\​--user sam \\​--namespace foo$kubectl create rolebinding sam-secret-reader--clusterrole secret-reader \\​--user sam \\​--namespace foo",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> kubectl create namespace foo\n</span></span><span style=\"display:fl..."
        },
        {
          "language": "",
          "code": "helm list --all-namespaces",
          "element": "<code>helm list --all-namespaces</code>"
        },
        {
          "language": "",
          "code": "secret-reader",
          "element": "<code>secret-reader</code>"
        },
        {
          "language": "",
          "code": "$kubectl create clusterrolebinding sam-view--clusterrole view \\​--user sam$kubectl create clusterrolebinding sam-secret-reader--clusterrole secret-reader \\​--user sam",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$kubectl create clusterrolebinding sam-view--clusterrole view \\​--user sam$kubectl create clusterrolebinding sam-secret-reader--clusterrole secret-reader \\​--user sam",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> kubectl create clusterrolebinding sam-view\n</span></span><span sty..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Role-based Access Control",
          "id": ""
        },
        {
          "level": 2,
          "text": "Managing user accounts",
          "id": "managing-user-accounts"
        },
        {
          "level": 2,
          "text": "Roles, ClusterRoles, RoleBindings, and ClusterRoleBindings",
          "id": "roles-clusterroles-rolebindings-and-clusterrolebindings"
        },
        {
          "level": 2,
          "text": "Restricting a user account's access using RBAC",
          "id": "restricting-a-user-accounts-access-using-rbac"
        },
        {
          "level": 2,
          "text": "Additional Thoughts",
          "id": "additional-thoughts"
        },
        {
          "level": 3,
          "text": "Example: Grant a user read/write access to a particular namespace",
          "id": "example-grant-a-user-readwrite-access-to-a-particular-namespace"
        },
        {
          "level": 3,
          "text": "Example: Grant a user read/write access at the cluster scope",
          "id": "example-grant-a-user-readwrite-access-at-the-cluster-scope"
        },
        {
          "level": 3,
          "text": "Example: Grant a user read-only access to a particular namespace",
          "id": "example-grant-a-user-read-only-access-to-a-particular-namespace"
        },
        {
          "level": 3,
          "text": "Example: Grant a user read-only access at the cluster scope",
          "id": "example-grant-a-user-read-only-access-at-the-cluster-scope"
        }
      ],
      "timestamp": 1750732679.812703
    },
    {
      "url": "https://helm.sh/docs/topics/plugins/",
      "title": "Helm | The Helm Plugins Guide",
      "content": "The Helm Plugins Guide\nA Helm plugin is a tool that can be accessed through the\nhelm\nCLI, but which\nis not part of the built-in Helm codebase.\nExisting plugins can be found on\nrelated\nsection or by searching\nGitHub\n.\nThis guide explains how to use and create plugins.\nAn Overview\nHelm plugins are add-on tools that integrate seamlessly with Helm. They provide\na way to extend the core feature set of Helm, but without requiring every new\nfeature to be written in Go and added to the core tool.\nHelm plugins have the following features:\nThey can be added and removed from a Helm installation without impacting the\ncore Helm tool.\nThey can be written in any programming language.\nThey integrate with Helm, and will show up in\nhelm help\nand other places.\nHelm plugins live in\n$HELM_PLUGINS\n. You can find the current value of this,\nincluding the default value when not set in the environment, using the\nhelm env\ncommand.\nThe Helm plugin model is partially based on Git's plugin model. To that end,\nyou may sometimes hear\nhelm\nreferred to as the\nporcelain\nlayer, with plugins\nbeing the\nplumbing\n. This is a shorthand way of suggesting that Helm provides\nthe user experience and top level processing logic, while the plugins do the\n\"detail work\" of performing a desired action.\nInstalling a Plugin\nPlugins are installed using the\n$ helm plugin install <path|url>\ncommand. You\ncan pass in a path to a plugin on your local file system or a url of a remote\nVCS repo. The\nhelm plugin install\ncommand clones or copies the plugin at the\npath/url given into\n$HELM_PLUGINS\n. If you are installing from a VCS you can specify\nthe version with the\n--version\nargument.\n$\nhelm plugin install https://github.com/adamreese/helm-env\nIf you have a plugin tar distribution, simply untar the plugin into the\n$HELM_PLUGINS\ndirectory. You can also install tarball plugins\ndirectly from url by issuing\nhelm plugin install https://domain/path/to/plugin.tar.gz\nThe Plugin File Structure\nIn many ways, a plugin is similar to a chart. Each plugin has a top-level\ndirectory containing a\nplugin.yaml\nfile. Additonal files may be present but\nonly the\nplugin.yaml\nfile is required.\n$\nHELM_PLUGINS/\n|- last/\n|- plugin.yaml\nThe plugin.yaml File\nThe plugin.yaml file is required for a plugin. It contains the following fields:\nname\n:\nThe name of the plugin (REQUIRED)\nversion\n:\nA SemVer 2 version (REQUIRED)\nusage\n:\nSingle line usage text shown in help\ndescription\n:\nLong description shown in places like helm help\nignoreFlags\n:\nIgnore flags passed in from Helm\nplatformCommand\n:\n# Configure command to run based on the platform\n-\nos\n:\nOS match, can be empty or ommited to match all OS'\narch\n:\nArchitecture match, can be empty or ommited to match all architectures\ncommand\n:\nPlugin command to execute\nargs\n:\nPlugin command arguments\ncommand\n:\n(DEPRECATED) Plugin command, use platformCommand instead\nplatformHooks\n:\n# Configure plugin lifecycle hooks based on the platform\ninstall\n:\n# Install lifecycle commands\n-\nos\n:\nOS match, can be empty or ommited to match all OS'\narch\n:\nArchitecture match, can be empty or ommited to match all architectures\ncommand\n:\nPlugin install command to execute\nargs\n:\nPlugin install command arguments\nupdate\n:\n# Update lifecycle commands\n-\nos\n:\nOS match, can be empty or ommited to match all OS'\narch\n:\nArchitecture match, can be empty or ommited to match all architectures\ncommand\n:\nPlugin update command to execute\nargs\n:\nPlugin update command arguments\ndelete\n:\n# Delete lifecycle commands\n-\nos\n:\nOS match, can be empty or ommited to match all OS'\narch\n:\nArchitecture match, can be empty or ommited to match all architectures\ncommand\n:\nPlugin delete command to execute\nargs\n:\nPlugin delete command arguments\nhooks\n:\n# (Deprecated) Plugin lifecycle hooks, use platformHooks instead\ninstall\n:\nCommand to install plugin\nupdate\n:\nCommand to update plugin\ndelete\n:\nCommand to delete plugin\ndownloaders\n:\n# Configure downloaders capability\n-\ncommand\n:\nCommand to invoke\nprotocols\n:\n- Protocol schema supported\nThe\nname\nField\nThe\nname\nis the name of the plugin. When Helm executes this plugin, this is\nthe name it will use (e.g.\nhelm NAME\nwill invoke this plugin).\nname\nshould match the directory name.\nIn our example above, that means the\nplugin with\nname: last\nshould be contained in a directory named\nlast\n.\nRestrictions on\nname\n:\nname\ncannot duplicate one of the existing\nhelm\ntop-level commands.\nname\nmust be restricted to the characters ASCII a-z, A-Z, 0-9,\n_\nand\n-\n.\nThe\nversion\nField\nThe\nversion\nis the SemVer 2 version of the plugin.\nusage\nand\ndescription\nare\nboth used to generate the help text of a command.\nThe\nignoreFlags\nField\nThe\nignoreFlags\nswitch tells Helm to\nnot\npass flags to the plugin. So if a\nplugin is called with\nhelm myplugin --foo\nand\nignoreFlags: true\n, then\n--foo\nis silently discarded.\nThe\nplatformCommand\nField\nThe\nplatformCommand\nconfigures the command that the plugin will execute when\nit is called. You can't set both\nplatformCommand\n&\ncommand\nas this will result\nin an error. The following rules will apply in deciding which command to use:\nIf\nplatformCommand\nis present, it will be used.\nIf both\nos\nand\narch\nmatch the current platform, search will stop and the\ncommand will be used.\nIf\nos\nmatches and\narch\nis empty, the command will be used.\nIf\nos\nand\narch\nare both empty, the command will be used.\nIf there is no match, Helm will exit with an error.\nIf\nplatformCommand\nis not present and the deprecated\ncommand\nis present\nit will be used.\nIf the command is empty, Helm will exit with an error.\nThe\nplatformHooks\nField\nThe\nplatformHooks\nconfigures the commands that the plugin will execute for lifecycle\nevents. You can't set both\nplatformHooks\n&\nhooks\nas this will resultin an error.\nThe following rules will apply in deciding which hook command to use:\nIf\nplatformHooks\nis present, it will be used and the commands for the lifecycle\nevent will be processed.\nIf both\nos\nand\narch\nmatch the current platform, search will stop and the\ncommand will be used.\nIf\nos\nmatches and\narch\nis empty, the command will be used.\nIf\nos\nand\narch\nare both empty, the command will be used.\nIf there is no match, Helm will skip the event.\nIf\nplatformHooks\nis not present and the deprecated\nhooks\nis present the command\nfor the lifecycle event will be used.\nIf the command is empty, Helm will skip the event.\nBuilding a Plugin\nHere is the plugin YAML for a simple plugin that helps get the last release name:\nname\n:\nlast\nversion\n:\n0.1.0\nusage\n:\nget the last release name\ndescription\n:\nget the last release name\nignoreFlags\n:\nfalse\nplatformCommand\n:\n-\ncommand\n:\n${HELM_BIN}\nargs\n:\n- list\n- --short\n- --max=1\n- --date\n- -r\nPlugins may require additional scripts and executables.\nScripts can be included in the plugin directory and executables can be downloaded\nvia a hook. The following is an example plugin:\n$\nHELM_PLUGINS/\n|- myplugin/\n|- scripts/\n|- install.ps1\n|- install.sh\n|- plugin.yaml\nname\n:\nmyplugin\nversion\n:\n0.1.0\nusage\n:\nexample plugin\ndescription\n:\nexample plugin\nignoreFlags\n:\nfalse\nplatformCommand\n:\n-\ncommand\n:\n${HELM_PLUGIN_DIR}/bin/myplugin\n-\nos\n:\nwindows\ncommand\n:\n${HELM_PLUGIN_DIR}\\bin\\myplugin.exe\nplatformHooks\n:\ninstall\n:\n-\ncommand\n:\n${HELM_PLUGIN_DIR}/scripts/install.sh\n-\nos\n:\nwindows\ncommand\n:\npwsh\nargs\n:\n- -c\n- ${HELM_PLUGIN_DIR}\\scripts\\install.ps1\nupdate\n:\n-\ncommand\n:\n${HELM_PLUGIN_DIR}/scripts/install.sh\nargs\n:\n- -u\n-\nos\n:\nwindows\ncommand\n:\npwsh\nargs\n:\n- -c\n- ${HELM_PLUGIN_DIR}\\scripts\\install.ps1\n- -Update\nEnvironment variables are interpolated before the plugin is executed. The\npattern above illustrates the preferred way to indicate where the plugin program\nlives.\nPlugin Commands\nThere are some strategies for working with plugin commands:\nIf a plugin includes an executable, the executable for a\nplatformCommand:\nor\nshould be packaged in the plugin directory or installed via a hook.\nThe\nplatformCommand:\nor\ncommand:\nline will have any environment variables\nexpanded before execution.\n$HELM_PLUGIN_DIR\nwill point to the plugin\ndirectory.\nThe command itself is not executed in a shell. So you can't oneline a shell\nscript.\nHelm injects lots of configuration into environment variables. Take a look at\nthe environment to see what information is available.\nHelm makes no assumptions about the language of the plugin. You can write it\nin whatever you prefer.\nCommands are responsible for implementing specific help text for\n-h\nand\n--help\n. Helm will use\nusage\nand\ndescription\nfor\nhelm help\nand\nhelm help myplugin\n, but will not handle\nhelm myplugin --help\n.\nTesting a Local Plugin\nFirst you need to find your\nHELM_PLUGINS\npath to do it run the folowing command:\nhelm env\nChange your current directory to the director that\nHELM_PLUGINS\nis set to.\nNow you can add a symbolic link to your build output of your plugin in this example\nwe did it for\nmapkubeapis\n.\nln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis\nDownloader Plugins\nBy default, Helm is able to pull Charts using HTTP/S. As of Helm 2.4.0, plugins\ncan have a special capability to download Charts from arbitrary sources.\nPlugins shall declare this special capability in the\nplugin.yaml\nfile (top\nlevel):\ndownloaders\n:\n-\ncommand\n:\n\"bin/mydownloader\"\nprotocols\n:\n-\n\"myprotocol\"\n-\n\"myprotocols\"\nIf such plugin is installed, Helm can interact with the repository using the\nspecified protocol scheme by invoking the\ncommand\n. The special repository\nshall be added similarly to the regular ones:\nhelm repo add favorite myprotocol://example.com/\nThe rules for the special repos are the same to the\nregular ones: Helm must be able to download the\nindex.yaml\nfile in order to\ndiscover and cache the list of available Charts.\nThe defined command will be invoked with the following scheme:\ncommand certFile keyFile caFile full-URL\n. The SSL credentials are coming from the repo\ndefinition, stored in\n$HELM_REPOSITORY_CONFIG\n(i.e.,\n$HELM_CONFIG_HOME/repositories.yaml\n). A Downloader plugin\nis expected to dump the raw content to stdout and report errors on stderr.\nThe downloader command also supports sub-commands or arguments, allowing you to\nspecify for example\nbin/mydownloader subcommand -d\nin the\nplugin.yaml\n. This\nis useful if you want to use the same executable for the main plugin command and\nthe downloader command, but with a different sub-command for each.\nEnvironment Variables\nWhen Helm executes a plugin, it passes the outer environment to the plugin, and\nalso injects some additional environment variables.\nVariables like\nKUBECONFIG\nare set for the plugin if they are set in the outer\nenvironment.\nThe following variables are guaranteed to be set:\nHELM_PLUGINS\n: The path to the plugins directory.\nHELM_PLUGIN_NAME\n: The name of the plugin, as invoked by\nhelm\n. So\nhelm myplug\nwill have the short name\nmyplug\n.\nHELM_PLUGIN_DIR\n: The directory that contains the plugin.\nHELM_BIN\n: The path to the\nhelm\ncommand (as executed by the user).\nHELM_DEBUG\n: Indicates if the debug flag was set by helm.\nHELM_REGISTRY_CONFIG\n: The location for the registry configuration (if\nusing). Note that the use of Helm with registries is an experimental feature.\nHELM_REPOSITORY_CACHE\n: The path to the repository cache files.\nHELM_REPOSITORY_CONFIG\n: The path to the repository configuration file.\nHELM_NAMESPACE\n: The namespace given to the\nhelm\ncommand (generally using\nthe\n-n\nflag).\nHELM_KUBECONTEXT\n: The name of the Kubernetes config context given to the\nhelm\ncommand.\nAdditionally, if a Kubernetes configuration file was explicitly specified, it\nwill be set as the\nKUBECONFIG\nvariable\nA Note on Flag Parsing\nWhen executing a plugin, Helm will parse global flags for its own use. None of\nthese flags are passed on to the plugin.\n--burst-limit\n: This is converted to\n$HELM_BURST_LIMIT\n--debug\n: If this is specified,\n$HELM_DEBUG\nis set to\n1\n--kube-apiserver\n: This is converted to\n$HELM_KUBEAPISERVER\n--kube-as-group\n: These are converted to\n$HELM_KUBEASGROUPS\n--kube-as-user\n: This is converted to\n$HELM_KUBEASUSER\n--kube-ca-file\n: This is converted to\n$HELM_KUBECAFILE\n--kube-context\n: This is converted to\n$HELM_KUBECONTEXT\n--kube-insecure-skip-tls-verify\n: This is converted to\n$HELM_KUBEINSECURE_SKIP_TLS_VERIFY\n--kube-tls-server-name\n: This is converted to\n$HELM_KUBETLS_SERVER_NAME\n--kube-token\n: This is converted to\n$HELM_KUBETOKEN\n--kubeconfig\n: This is converted to\n$KUBECONFIG\n--namespace\nand\n-n\n: This is converted to\n$HELM_NAMESPACE\n--qps\n: This is converted to\n$HELM_QPS\n--registry-config\n: This is converted to\n$HELM_REGISTRY_CONFIG\n--repository-cache\n: This is converted to\n$HELM_REPOSITORY_CACHE\n--repository-config\n: This is converted to\n$HELM_REPOSITORY_CONFIG\nPlugins\nshould\ndisplay help text and then exit for\n-h\nand\n--help\n. In all\nother cases, plugins may use flags as appropriate.\nProviding shell auto-completion\nAs of Helm 3.2, a plugin can optionally provide support for shell\nauto-completion as part of Helm's existing auto-completion mechanism.\nStatic auto-completion\nIf a plugin provides its own flags and/or sub-commands, it can inform Helm of\nthem by having a\ncompletion.yaml\nfile located in the plugin's root directory.\nThe\ncompletion.yaml\nfile has the form:\nname\n:\n<pluginName>\nflags\n:\n- <flag 1>\n- <flag 2>\nvalidArgs\n:\n- <arg value 1>\n- <arg value 2>\ncommands\n:\nname\n:\n<commandName>\nflags\n:\n- <flag 1>\n- <flag 2>\nvalidArgs\n:\n- <arg value 1>\n- <arg value 2>\ncommands\n:\n<and so on, recursively>\nNotes:\nAll sections are optional but should be provided if applicable.\nFlags should not include the\n-\nor\n--\nprefix.\nBoth short and long flags can and should be specified. A short flag need not\nbe associated with its corresponding long form, but both forms should be\nlisted.\nFlags need not be ordered in any way, but need to be listed at the correct\npoint in the sub-command hierarchy of the file.\nHelm's existing global flags are already handled by Helm's auto-completion\nmechanism, therefore plugins need not specify the following flags\n--debug\n,\n--namespace\nor\n-n\n,\n--kube-context\n, and\n--kubeconfig\n, or any other\nglobal flag.\nThe\nvalidArgs\nlist provides a static list of possible completions for the\nfirst parameter following a sub-command. It is not always possible to\nprovide such a list in advance (see the\nDynamic\nCompletion\nsection below), in which case the\nvalidArgs\nsection can be omitted.\nThe\ncompletion.yaml\nfile is entirely optional. If it is not provided, Helm\nwill simply not provide shell auto-completion for the plugin (unless\nDynamic\nCompletion\nis supported by the plugin). Also, adding a\ncompletion.yaml\nfile is backwards-compatible and will not impact the behavior\nof the plugin when using older helm versions.\nAs an example, for the\nfullstatus plugin\nwhich has no\nsub-commands but accepts the same flags as the\nhelm status\ncommand, the\ncompletion.yaml\nfile is:\nname\n:\nfullstatus\nflags\n:\n- o\n- output\n- revision\nA more intricate example for the\n2to3 plugin\n, has a\ncompletion.yaml\nfile of:\nname\n:\n2to3\ncommands\n:\n-\nname\n:\ncleanup\nflags\n:\n- config-cleanup\n- dry-run\n- l\n- label\n- release-cleanup\n- s\n- release-storage\n- tiller-cleanup\n- t\n- tiller-ns\n- tiller-out-cluster\n-\nname\n:\nconvert\nflags\n:\n- delete-v2-releases\n- dry-run\n- l\n- label\n- s\n- release-storage\n- release-versions-max\n- t\n- tiller-ns\n- tiller-out-cluster\n-\nname\n:\nmove\ncommands\n:\n-\nname\n:\nconfig\nflags\n:\n- dry-run\nDynamic completion\nAlso starting with Helm 3.2, plugins can provide their own dynamic shell\nauto-completion. Dynamic shell auto-completion is the completion of parameter\nvalues or flag values that cannot be defined in advance. For example,\ncompletion of the names of helm releases currently available on the cluster.\nFor the plugin to support dynamic auto-completion, it must provide an\nexecutable\nfile called\nplugin.complete\nin its root directory. When the\nHelm completion script requires dynamic completions for the plugin, it will\nexecute the\nplugin.complete\nfile, passing it the command-line that needs to be\ncompleted. The\nplugin.complete\nexecutable will need to have the logic to\ndetermine what the proper completion choices are and output them to standard\noutput to be consumed by the Helm completion script.\nThe\nplugin.complete\nfile is entirely optional. If it is not provided, Helm\nwill simply not provide dynamic auto-completion for the plugin. Also, adding a\nplugin.complete\nfile is backwards-compatible and will not impact the behavior\nof the plugin when using older helm versions.\nThe output of the\nplugin.complete\nscript should be a new-line separated list\nsuch as:\nrel1\nrel2\nrel3\nWhen\nplugin.complete\nis called, the plugin environment is set just like when\nthe plugin's main script is called. Therefore, the variables\n$HELM_NAMESPACE\n,\n$HELM_KUBECONTEXT\n, and all other plugin variables will already be set, and\ntheir corresponding global flags will be removed.\nThe\nplugin.complete\nfile can be in any executable form; it can be a shell\nscript, a Go program, or any other type of program that Helm can execute. The\nplugin.complete\nfile\nmust\nhave executable permissions for the user. The\nplugin.complete\nfile\nmust\nexit with a success code (value 0).\nIn some cases, dynamic completion will require to obtain information from the\nKubernetes cluster. For example, the\nhelm fullstatus\nplugin requires a\nrelease name as input. In the\nfullstatus\nplugin, for its\nplugin.complete\nscript to provide completion for current release names, it can simply run\nhelm list -q\nand output the result.\nIf it is desired to use the same executable for plugin execution and for plugin\ncompletion, the\nplugin.complete\nscript can be made to call the main plugin\nexecutable with some special parameter or flag; when the main plugin executable\ndetects the special parameter or flag, it will know to run the completion. In\nour example,\nplugin.complete\ncould be implemented like this:\n#!/usr/bin/env sh\n# \"$@\" is the entire command-line that requires completion.\n# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.\n$HELM_PLUGIN_DIR\n/status.sh --complete\n\"\n$@\n\"\nThe\nfullstatus\nplugin's real script (\nstatus.sh\n) must then look for the\n--complete\nflag and if found, printout the proper completions.\nTips and tricks\nThe shell will automatically filter out completion choices that don't match\nuser input. A plugin can therefore return all relevant completions without\nremoving the ones that don't match the user input. For example, if the\ncommand-line is\nhelm fullstatus ngin<TAB>\n, the\nplugin.complete\nscript can\nprint\nall\nrelease names (of the\ndefault\nnamespace), not just the ones\nstarting with\nngin\n; the shell will only retain the ones starting with\nngin\n.\nTo simplify dynamic completion support, especially if you have a complex\nplugin, you can have your\nplugin.complete\nscript call your main plugin\nscript and request completion choices. See the\nDynamic\nCompletion\nsection above for an example.\nTo debug dynamic completion and the\nplugin.complete\nfile, one can run the\nfollowing to see the completion results :\nhelm __complete <pluginName> <arguments to complete>\n. For example:\nhelm __complete fullstatus --output js<ENTER>\n,\nhelm __complete fullstatus -o json \"\"<ENTER>\nPrev\n← Role-based Access Control\nNext\nMigrating Helm v2 to v3 →",
      "code_examples": [
        {
          "language": "",
          "code": "$HELM_PLUGINS",
          "element": "<code>$HELM_PLUGINS</code>"
        },
        {
          "language": "",
          "code": "$ helm plugin install <path|url>",
          "element": "<code>$ helm plugin install &lt;path|url&gt;</code>"
        },
        {
          "language": "",
          "code": "helm plugin install",
          "element": "<code>helm plugin install</code>"
        },
        {
          "language": "",
          "code": "$HELM_PLUGINS",
          "element": "<code>$HELM_PLUGINS</code>"
        },
        {
          "language": "",
          "code": "$helm plugin install https://github.com/adamreese/helm-env",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$helm plugin install https://github.com/adamreese/helm-env",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span> helm plugin install https://github.com/adamreese/helm-env\n</span><..."
        },
        {
          "language": "",
          "code": "$HELM_PLUGINS",
          "element": "<code>$HELM_PLUGINS</code>"
        },
        {
          "language": "",
          "code": "helm plugin install https://domain/path/to/plugin.tar.gz",
          "element": "<code>helm plugin install https://domain/path/to/plugin.tar.gz</code>"
        },
        {
          "language": "",
          "code": "plugin.yaml",
          "element": "<code>plugin.yaml</code>"
        },
        {
          "language": "",
          "code": "plugin.yaml",
          "element": "<code>plugin.yaml</code>"
        },
        {
          "language": "",
          "code": "$HELM_PLUGINS/|- last/|- plugin.yaml",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$HELM_PLUGINS/|- last/|- plugin.yaml",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span>HELM_PLUGINS/\n</span></span><span style=\"display:flex\"><span><span ..."
        },
        {
          "language": "",
          "code": "name:The name of the plugin (REQUIRED)version:A SemVer 2 version (REQUIRED)usage:Single line usage text shown in helpdescription:Long description shown in places like helm helpignoreFlags:Ignore flags passed in from HelmplatformCommand:# Configure command to run based on the platform-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin command to executeargs:Plugin command argumentscommand:(DEPRECATED) Plugin command, use platformCommand insteadplatformHooks:# Configure plugin lifecycle hooks based on the platforminstall:# Install lifecycle commands-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin install command to executeargs:Plugin install command argumentsupdate:# Update lifecycle commands-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin update command to executeargs:Plugin update command argumentsdelete:# Delete lifecycle commands-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin delete command to executeargs:Plugin delete command argumentshooks:# (Deprecated) Plugin lifecycle hooks, use platformHooks insteadinstall:Command to install pluginupdate:Command to update plugindelete:Command to delete plugindownloaders:# Configure downloaders capability-command:Command to invokeprotocols:- Protocol schema supported",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:The name of the plugin (REQUIRED)version:A SemVer 2 version (REQUIRED)usage:Single line usage text shown in helpdescription:Long description shown in places like helm helpignoreFlags:Ignore flags passed in from HelmplatformCommand:# Configure command to run based on the platform-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin command to executeargs:Plugin command argumentscommand:(DEPRECATED) Plugin command, use platformCommand insteadplatformHooks:# Configure plugin lifecycle hooks based on the platforminstall:# Install lifecycle commands-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin install command to executeargs:Plugin install command argumentsupdate:# Update lifecycle commands-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin update command to executeargs:Plugin update command argumentsdelete:# Delete lifecycle commands-os:OS match, can be empty or ommited to match all OS'arch:Architecture match, can be empty or ommited to match all architecturescommand:Plugin delete command to executeargs:Plugin delete command argumentshooks:# (Deprecated) Plugin lifecycle hooks, use platformHooks insteadinstall:Command to install pluginupdate:Command to update plugindelete:Command to delete plugindownloaders:# Configure downloaders capability-command:Command to invokeprotocols:- Protocol schema supported",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>The name of the plugin (REQUIRED)<sp..."
        },
        {
          "language": "",
          "code": "description",
          "element": "<code>description</code>"
        },
        {
          "language": "",
          "code": "ignoreFlags",
          "element": "<code>ignoreFlags</code>"
        },
        {
          "language": "",
          "code": "ignoreFlags",
          "element": "<code>ignoreFlags</code>"
        },
        {
          "language": "",
          "code": "helm myplugin --foo",
          "element": "<code>helm myplugin --foo</code>"
        },
        {
          "language": "",
          "code": "ignoreFlags: true",
          "element": "<code>ignoreFlags: true</code>"
        },
        {
          "language": "",
          "code": "platformCommand",
          "element": "<code>platformCommand</code>"
        },
        {
          "language": "",
          "code": "platformCommand",
          "element": "<code>platformCommand</code>"
        },
        {
          "language": "",
          "code": "platformCommand",
          "element": "<code>platformCommand</code>"
        },
        {
          "language": "",
          "code": "platformCommand",
          "element": "<code>platformCommand</code>"
        },
        {
          "language": "",
          "code": "platformCommand",
          "element": "<code>platformCommand</code>"
        },
        {
          "language": "",
          "code": "platformHooks",
          "element": "<code>platformHooks</code>"
        },
        {
          "language": "",
          "code": "platformHooks",
          "element": "<code>platformHooks</code>"
        },
        {
          "language": "",
          "code": "platformHooks",
          "element": "<code>platformHooks</code>"
        },
        {
          "language": "",
          "code": "platformHooks",
          "element": "<code>platformHooks</code>"
        },
        {
          "language": "",
          "code": "platformHooks",
          "element": "<code>platformHooks</code>"
        },
        {
          "language": "",
          "code": "name:lastversion:0.1.0usage:get the last release namedescription:get the last release nameignoreFlags:falseplatformCommand:-command:${HELM_BIN}args:- list- --short- --max=1- --date- -r",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:lastversion:0.1.0usage:get the last release namedescription:get the last release nameignoreFlags:falseplatformCommand:-command:${HELM_BIN}args:- list- --short- --max=1- --date- -r",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>last<span style=\"color:#bbb\">\n</span..."
        },
        {
          "language": "",
          "code": "$HELM_PLUGINS/|- myplugin/|- scripts/|- install.ps1|- install.sh|- plugin.yaml",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;..."
        },
        {
          "language": "language-console",
          "code": "$HELM_PLUGINS/|- myplugin/|- scripts/|- install.ps1|- install.sh|- plugin.yaml",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#009;font-weight:700\">$</span>HELM_PLUGINS/\n</span></span><span style=\"display:flex\"><span><span ..."
        },
        {
          "language": "",
          "code": "name:mypluginversion:0.1.0usage:example plugindescription:example pluginignoreFlags:falseplatformCommand:-command:${HELM_PLUGIN_DIR}/bin/myplugin-os:windowscommand:${HELM_PLUGIN_DIR}\\bin\\myplugin.exeplatformHooks:install:-command:${HELM_PLUGIN_DIR}/scripts/install.sh-os:windowscommand:pwshargs:- -c- ${HELM_PLUGIN_DIR}\\scripts\\install.ps1update:-command:${HELM_PLUGIN_DIR}/scripts/install.shargs:- -u-os:windowscommand:pwshargs:- -c- ${HELM_PLUGIN_DIR}\\scripts\\install.ps1- -Update",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:mypluginversion:0.1.0usage:example plugindescription:example pluginignoreFlags:falseplatformCommand:-command:${HELM_PLUGIN_DIR}/bin/myplugin-os:windowscommand:${HELM_PLUGIN_DIR}\\bin\\myplugin.exeplatformHooks:install:-command:${HELM_PLUGIN_DIR}/scripts/install.sh-os:windowscommand:pwshargs:- -c- ${HELM_PLUGIN_DIR}\\scripts\\install.ps1update:-command:${HELM_PLUGIN_DIR}/scripts/install.shargs:- -u-os:windowscommand:pwshargs:- -c- ${HELM_PLUGIN_DIR}\\scripts\\install.ps1- -Update",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>myplugin<span style=\"color:#bbb\">\n</..."
        },
        {
          "language": "",
          "code": "platformCommand:",
          "element": "<code>platformCommand:</code>"
        },
        {
          "language": "",
          "code": "platformCommand:",
          "element": "<code>platformCommand:</code>"
        },
        {
          "language": "",
          "code": "$HELM_PLUGIN_DIR",
          "element": "<code>$HELM_PLUGIN_DIR</code>"
        },
        {
          "language": "",
          "code": "description",
          "element": "<code>description</code>"
        },
        {
          "language": "",
          "code": "helm help myplugin",
          "element": "<code>helm help myplugin</code>"
        },
        {
          "language": "",
          "code": "helm myplugin --help",
          "element": "<code>helm myplugin --help</code>"
        },
        {
          "language": "",
          "code": "HELM_PLUGINS",
          "element": "<code>HELM_PLUGINS</code>"
        },
        {
          "language": "",
          "code": "HELM_PLUGINS",
          "element": "<code>HELM_PLUGINS</code>"
        },
        {
          "language": "",
          "code": "mapkubeapis",
          "element": "<code>mapkubeapis</code>"
        },
        {
          "language": "",
          "code": "ln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>ln -s ~/GitHub/helm-mapkubeapi..."
        },
        {
          "language": "language-bash",
          "code": "ln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis",
          "element": "<code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex\"><span>ln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis\n</span></span></code>"
        },
        {
          "language": "",
          "code": "plugin.yaml",
          "element": "<code>plugin.yaml</code>"
        },
        {
          "language": "",
          "code": "downloaders:-command:\"bin/mydownloader\"protocols:-\"myprotocol\"-\"myprotocols\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "downloaders:-command:\"bin/mydownloader\"protocols:-\"myprotocol\"-\"myprotocols\"",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">downloaders</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"di..."
        },
        {
          "language": "",
          "code": "helm repo add favorite myprotocol://example.com/",
          "element": "<code>helm repo add favorite myprotocol://example.com/</code>"
        },
        {
          "language": "",
          "code": "command certFile keyFile caFile full-URL",
          "element": "<code>command certFile keyFile caFile full-URL</code>"
        },
        {
          "language": "",
          "code": "$HELM_REPOSITORY_CONFIG",
          "element": "<code>$HELM_REPOSITORY_CONFIG</code>"
        },
        {
          "language": "",
          "code": "$HELM_CONFIG_HOME/repositories.yaml",
          "element": "<code>$HELM_CONFIG_HOME/repositories.yaml</code>"
        },
        {
          "language": "",
          "code": "bin/mydownloader subcommand -d",
          "element": "<code>bin/mydownloader subcommand -d</code>"
        },
        {
          "language": "",
          "code": "plugin.yaml",
          "element": "<code>plugin.yaml</code>"
        },
        {
          "language": "",
          "code": "HELM_PLUGINS",
          "element": "<code>HELM_PLUGINS</code>"
        },
        {
          "language": "",
          "code": "HELM_PLUGIN_NAME",
          "element": "<code>HELM_PLUGIN_NAME</code>"
        },
        {
          "language": "",
          "code": "helm myplug",
          "element": "<code>helm myplug</code>"
        },
        {
          "language": "",
          "code": "HELM_PLUGIN_DIR",
          "element": "<code>HELM_PLUGIN_DIR</code>"
        },
        {
          "language": "",
          "code": "HELM_REGISTRY_CONFIG",
          "element": "<code>HELM_REGISTRY_CONFIG</code>"
        },
        {
          "language": "",
          "code": "HELM_REPOSITORY_CACHE",
          "element": "<code>HELM_REPOSITORY_CACHE</code>"
        },
        {
          "language": "",
          "code": "HELM_REPOSITORY_CONFIG",
          "element": "<code>HELM_REPOSITORY_CONFIG</code>"
        },
        {
          "language": "",
          "code": "HELM_NAMESPACE",
          "element": "<code>HELM_NAMESPACE</code>"
        },
        {
          "language": "",
          "code": "HELM_KUBECONTEXT",
          "element": "<code>HELM_KUBECONTEXT</code>"
        },
        {
          "language": "",
          "code": "--burst-limit",
          "element": "<code>--burst-limit</code>"
        },
        {
          "language": "",
          "code": "$HELM_BURST_LIMIT",
          "element": "<code>$HELM_BURST_LIMIT</code>"
        },
        {
          "language": "",
          "code": "$HELM_DEBUG",
          "element": "<code>$HELM_DEBUG</code>"
        },
        {
          "language": "",
          "code": "--kube-apiserver",
          "element": "<code>--kube-apiserver</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBEAPISERVER",
          "element": "<code>$HELM_KUBEAPISERVER</code>"
        },
        {
          "language": "",
          "code": "--kube-as-group",
          "element": "<code>--kube-as-group</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBEASGROUPS",
          "element": "<code>$HELM_KUBEASGROUPS</code>"
        },
        {
          "language": "",
          "code": "--kube-as-user",
          "element": "<code>--kube-as-user</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBEASUSER",
          "element": "<code>$HELM_KUBEASUSER</code>"
        },
        {
          "language": "",
          "code": "--kube-ca-file",
          "element": "<code>--kube-ca-file</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBECAFILE",
          "element": "<code>$HELM_KUBECAFILE</code>"
        },
        {
          "language": "",
          "code": "--kube-context",
          "element": "<code>--kube-context</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBECONTEXT",
          "element": "<code>$HELM_KUBECONTEXT</code>"
        },
        {
          "language": "",
          "code": "--kube-insecure-skip-tls-verify",
          "element": "<code>--kube-insecure-skip-tls-verify</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBEINSECURE_SKIP_TLS_VERIFY",
          "element": "<code>$HELM_KUBEINSECURE_SKIP_TLS_VERIFY</code>"
        },
        {
          "language": "",
          "code": "--kube-tls-server-name",
          "element": "<code>--kube-tls-server-name</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBETLS_SERVER_NAME",
          "element": "<code>$HELM_KUBETLS_SERVER_NAME</code>"
        },
        {
          "language": "",
          "code": "--kube-token",
          "element": "<code>--kube-token</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBETOKEN",
          "element": "<code>$HELM_KUBETOKEN</code>"
        },
        {
          "language": "",
          "code": "--kubeconfig",
          "element": "<code>--kubeconfig</code>"
        },
        {
          "language": "",
          "code": "$KUBECONFIG",
          "element": "<code>$KUBECONFIG</code>"
        },
        {
          "language": "",
          "code": "--namespace",
          "element": "<code>--namespace</code>"
        },
        {
          "language": "",
          "code": "$HELM_NAMESPACE",
          "element": "<code>$HELM_NAMESPACE</code>"
        },
        {
          "language": "",
          "code": "--registry-config",
          "element": "<code>--registry-config</code>"
        },
        {
          "language": "",
          "code": "$HELM_REGISTRY_CONFIG",
          "element": "<code>$HELM_REGISTRY_CONFIG</code>"
        },
        {
          "language": "",
          "code": "--repository-cache",
          "element": "<code>--repository-cache</code>"
        },
        {
          "language": "",
          "code": "$HELM_REPOSITORY_CACHE",
          "element": "<code>$HELM_REPOSITORY_CACHE</code>"
        },
        {
          "language": "",
          "code": "--repository-config",
          "element": "<code>--repository-config</code>"
        },
        {
          "language": "",
          "code": "$HELM_REPOSITORY_CONFIG",
          "element": "<code>$HELM_REPOSITORY_CONFIG</code>"
        },
        {
          "language": "",
          "code": "completion.yaml",
          "element": "<code>completion.yaml</code>"
        },
        {
          "language": "",
          "code": "completion.yaml",
          "element": "<code>completion.yaml</code>"
        },
        {
          "language": "",
          "code": "name:<pluginName>flags:- <flag 1>- <flag 2>validArgs:- <arg value 1>- <arg value 2>commands:name:<commandName>flags:- <flag 1>- <flag 2>validArgs:- <arg value 1>- <arg value 2>commands:<and so on, recursively>",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:<pluginName>flags:- <flag 1>- <flag 2>validArgs:- <arg value 1>- <arg value 2>commands:name:<commandName>flags:- <flag 1>- <flag 2>validArgs:- <arg value 1>- <arg value 2>commands:<and so on, recursively>",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>&lt;pluginName&gt;<span style=\"color..."
        },
        {
          "language": "",
          "code": "--namespace",
          "element": "<code>--namespace</code>"
        },
        {
          "language": "",
          "code": "--kube-context",
          "element": "<code>--kube-context</code>"
        },
        {
          "language": "",
          "code": "--kubeconfig",
          "element": "<code>--kubeconfig</code>"
        },
        {
          "language": "",
          "code": "completion.yaml",
          "element": "<code>completion.yaml</code>"
        },
        {
          "language": "",
          "code": "completion.yaml",
          "element": "<code>completion.yaml</code>"
        },
        {
          "language": "",
          "code": "fullstatus plugin",
          "element": "<code>fullstatus plugin</code>"
        },
        {
          "language": "",
          "code": "helm status",
          "element": "<code>helm status</code>"
        },
        {
          "language": "",
          "code": "completion.yaml",
          "element": "<code>completion.yaml</code>"
        },
        {
          "language": "",
          "code": "name:fullstatusflags:- o- output- revision",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:fullstatusflags:- o- output- revision",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>fullstatus<span style=\"color:#bbb\">\n..."
        },
        {
          "language": "",
          "code": "2to3 plugin",
          "element": "<code>2to3 plugin</code>"
        },
        {
          "language": "",
          "code": "completion.yaml",
          "element": "<code>completion.yaml</code>"
        },
        {
          "language": "",
          "code": "name:2to3commands:-name:cleanupflags:- config-cleanup- dry-run- l- label- release-cleanup- s- release-storage- tiller-cleanup- t- tiller-ns- tiller-out-cluster-name:convertflags:- delete-v2-releases- dry-run- l- label- s- release-storage- release-versions-max- t- tiller-ns- tiller-out-cluster-name:movecommands:-name:configflags:- dry-run",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "name:2to3commands:-name:cleanupflags:- config-cleanup- dry-run- l- label- release-cleanup- s- release-storage- tiller-cleanup- t- tiller-ns- tiller-out-cluster-name:convertflags:- delete-v2-releases- dry-run- l- label- s- release-storage- release-versions-max- t- tiller-ns- tiller-out-cluster-name:movecommands:-name:configflags:- dry-run",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">name</span>:<span style=\"color:#bbb\"> </span>2to3<span style=\"color:#bbb\">\n</span..."
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "rel1rel2rel3",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\"..."
        },
        {
          "language": "language-console",
          "code": "rel1rel2rel3",
          "element": "<code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex\"><span><span style=\"color:#aaa\">rel1\n</span></span></span><span style=\"display:flex\"><span><span style=\"color:#aaa\">rel2\n</..."
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "$HELM_NAMESPACE",
          "element": "<code>$HELM_NAMESPACE</code>"
        },
        {
          "language": "",
          "code": "$HELM_KUBECONTEXT",
          "element": "<code>$HELM_KUBECONTEXT</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "helm fullstatus",
          "element": "<code>helm fullstatus</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "helm list -q",
          "element": "<code>helm list -q</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "#!/usr/bin/env sh# \"$@\" is the entire command-line that requires completion.# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.$HELM_PLUGIN_DIR/status.sh --complete\"$@\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-sh\" data-lang=\"sh\"><span style=\"display:flex\"><span><span style=\"color:#099\">#!/usr/bi..."
        },
        {
          "language": "language-sh",
          "code": "#!/usr/bin/env sh# \"$@\" is the entire command-line that requires completion.# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.$HELM_PLUGIN_DIR/status.sh --complete\"$@\"",
          "element": "<code class=\"language-sh\" data-lang=\"sh\"><span style=\"display:flex\"><span><span style=\"color:#099\">#!/usr/bin/env sh\n</span></span></span><span style=\"display:flex\"><span><span style=\"color:#099\"></sp..."
        },
        {
          "language": "",
          "code": "helm fullstatus ngin<TAB>",
          "element": "<code>helm fullstatus ngin&lt;TAB&gt;</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "plugin.complete",
          "element": "<code>plugin.complete</code>"
        },
        {
          "language": "",
          "code": "helm __complete <pluginName> <arguments to complete>",
          "element": "<code>helm __complete &lt;pluginName&gt; &lt;arguments to complete&gt;</code>"
        },
        {
          "language": "",
          "code": "helm __complete fullstatus --output js<ENTER>",
          "element": "<code>helm __complete fullstatus --output js&lt;ENTER&gt;</code>"
        },
        {
          "language": "",
          "code": "helm __complete fullstatus -o json \"\"<ENTER>",
          "element": "<code>helm __complete fullstatus -o json \"\"&lt;ENTER&gt;</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "The Helm Plugins Guide",
          "id": ""
        },
        {
          "level": 2,
          "text": "An Overview",
          "id": "an-overview"
        },
        {
          "level": 2,
          "text": "Installing a Plugin",
          "id": "installing-a-plugin"
        },
        {
          "level": 2,
          "text": "The Plugin File Structure",
          "id": "the-plugin-file-structure"
        },
        {
          "level": 2,
          "text": "The plugin.yaml File",
          "id": "the-pluginyaml-file"
        },
        {
          "level": 2,
          "text": "Building a Plugin",
          "id": "building-a-plugin"
        },
        {
          "level": 2,
          "text": "Downloader Plugins",
          "id": "downloader-plugins"
        },
        {
          "level": 2,
          "text": "Environment Variables",
          "id": "environment-variables"
        },
        {
          "level": 2,
          "text": "A Note on Flag Parsing",
          "id": "a-note-on-flag-parsing"
        },
        {
          "level": 2,
          "text": "Providing shell auto-completion",
          "id": "providing-shell-auto-completion"
        },
        {
          "level": 3,
          "text": "ThenameField",
          "id": "the-name-field"
        },
        {
          "level": 3,
          "text": "TheversionField",
          "id": "the-version-field"
        },
        {
          "level": 3,
          "text": "TheignoreFlagsField",
          "id": "the-ignoreflags-field"
        },
        {
          "level": 3,
          "text": "TheplatformCommandField",
          "id": "the-platformcommand-field"
        },
        {
          "level": 3,
          "text": "TheplatformHooksField",
          "id": "the-platformhooks-field"
        },
        {
          "level": 3,
          "text": "Plugin Commands",
          "id": "plugin-commands"
        },
        {
          "level": 3,
          "text": "Testing a Local Plugin",
          "id": "testing-a-local-plugin"
        },
        {
          "level": 3,
          "text": "Static auto-completion",
          "id": "static-auto-completion"
        },
        {
          "level": 3,
          "text": "Dynamic completion",
          "id": "dynamic-completion"
        },
        {
          "level": 3,
          "text": "Tips and tricks",
          "id": "tips-and-tricks"
        }
      ],
      "timestamp": 1750732682.36583
    },
    {
      "url": "https://helm.sh/docs/topics/v2_v3_migration/",
      "title": "Helm | Migrating Helm v2 to v3",
      "content": "Migrating Helm v2 to v3\nThis guide shows how to migrate Helm v2 to v3. Helm v2 needs to be installed\nand managing releases in one or more clusters.\nOverview of Helm 3 Changes\nThe full list of changes from Helm 2 to 3 are documented in the\nFAQ\nsection\n. The following is a\nsummary of some of those changes that a user should be aware of before and\nduring migration:\nRemoval of Tiller:\nReplaces client/server with client/library architecture (\nhelm\nbinary\nonly)\nSecurity is now on per user basis (delegated to Kubernetes user cluster\nsecurity)\nReleases are now stored as in-cluster secrets and the release object\nmetadata has changed\nReleases are persisted on a release namespace basis and not in the Tiller\nnamespace anymore\nChart repository updated:\nhelm search\nnow supports both local repository searches and making search\nqueries against Artifact Hub\nChart apiVersion bumped to \"v2\" for following specification changes:\nDynamically linked chart dependencies moved to\nChart.yaml\n(\nrequirements.yaml\nremoved and requirements --> dependencies)\nLibrary charts (helper/common charts) can now be added as dynamically\nlinked chart dependencies\nCharts have a\ntype\nmetadata field to define the chart to be of an\napplication\nor\nlibrary\nchart. It is application by default which means\nit is renderable and installable\nHelm 2 charts (apiVersion=v1) are still installable\nXDG directory specification added:\nHelm home removed and replaced with XDG directory specification for storing\nconfiguration files\nNo longer need to initialize Helm\nhelm init\nand\nhelm home\nremoved\nAdditional changes:\nHelm install/set-up is simplified:\nHelm client (helm binary) only (no Tiller)\nRun-as-is paradigm\nlocal\nor\nstable\nrepositories are not set-up by default\ncrd-install\nhook removed and replaced with\ncrds\ndirectory in chart\nwhere all CRDs defined in it will be installed before any rendering of the\nchart\ntest-failure\nhook annotation value removed, and\ntest-success\ndeprecated. Use\ntest\ninstead\nCommands removed/replaced/added:\ndelete --> uninstall : removes all release history by default\n(previously needed\n--purge\n)\nfetch --> pull\nhome (removed)\ninit (removed)\ninstall: requires release name or\n--generate-name\nargument\ninspect --> show\nreset (removed)\nserve (removed)\ntemplate:\n-x\n/\n--execute\nargument renamed to\n-s\n/\n--show-only\nupgrade: Added argument\n--history-max\nwhich limits the maximum number\nof revisions saved per release (0 for no limit)\nHelm 3 Go library has undergone a lot of changes and is incompatible with\nthe Helm 2 library\nRelease binaries are now hosted on\nget.helm.sh\nMigration Use Cases\nThe migration use cases are as follows:\nHelm v2 and v3 managing the same cluster:\nThis use case is only recommended if you intend to phase out Helm v2\ngradually and do not require v3 to manage any releases deployed by v2. All\nnew releases being deployed should be performed by v3 and existing v2\ndeployed releases are updated/removed by v2 only\nHelm v2 and v3 can quite happily manage the same cluster. The Helm versions\ncan be installed on the same or separate systems\nIf installing Helm v3 on the same system, you need to perform an additional\nstep to ensure that both client versions can co-exist until ready to remove\nHelm v2 client. Rename or put the Helm v3 binary in a different folder to\navoid conflict\nOtherwise there are no conflicts between both versions because of the\nfollowing distinctions:\nv2 and v3 release (history) storage are independent of each other. The\nchanges include the Kubernetes resource for storage and the release\nobject metadata contained in the resource. Releases will also be on a per\nuser namespace instead of using the Tiller namespace (for example, v2\ndefault Tiller namespace kube-system). v2 uses \"ConfigMaps\" or \"Secrets\"\nunder the Tiller namespace and\nTILLER\nownership. v3 uses \"Secrets\" in\nthe user namespace and\nhelm\nownership. Releases are incremental in both\nv2 and v3\nThe only issue could be if Kubernetes cluster scoped resources (e.g.\nclusterroles.rbac\n) are defined in a chart. The v3 deployment would then\nfail even if unique in the namespace as the resources would clash\nv3 configuration no longer uses\n$HELM_HOME\nand uses XDG directory\nspecification instead. It is also created on the fly as need be. It is\ntherefore independent of v2 configuration. This is applicable only when\nboth versions are installed on the same system\nMigrating Helm v2 to Helm v3:\nThis use case applies when you want Helm v3 to manage existing Helm v2\nreleases\nIt should be noted that a Helm v2 client:\ncan manage 1 to many Kubernetes clusters\ncan connect to 1 to many Tiller instances for a cluster\nThis means that you have to be aware of this when migrating as releases\nare deployed into clusters by Tiller and its namespace. You have to\ntherefore be aware of migrating for each cluster and each Tiller instance\nthat is managed by the Helm v2 client instance\nThe recommended data migration path is as follows:\nBackup v2 data\nMigrate Helm v2 configuration\nMigrate Helm v2 releases\nWhen confident that Helm v3 is managing all Helm v2 data (for all\nclusters and Tiller instances of the Helm v2 client instance) as\nexpected, then clean up Helm v2 data\nThe migration process is automated by the Helm v3\n2to3\nplugin\nReference\nHelm v3\n2to3\nplugin\nBlog\npost\nexplaining\n2to3\nplugin usage with examples\nPrev\n← The Helm Plugins Guide\nNext\nDeprecated Kubernetes APIs →",
      "code_examples": [
        {
          "language": "",
          "code": "helm search",
          "element": "<code>helm search</code>"
        },
        {
          "language": "",
          "code": "requirements.yaml",
          "element": "<code>requirements.yaml</code>"
        },
        {
          "language": "",
          "code": "application",
          "element": "<code>application</code>"
        },
        {
          "language": "",
          "code": "crd-install",
          "element": "<code>crd-install</code>"
        },
        {
          "language": "",
          "code": "test-failure",
          "element": "<code>test-failure</code>"
        },
        {
          "language": "",
          "code": "test-success",
          "element": "<code>test-success</code>"
        },
        {
          "language": "",
          "code": "--generate-name",
          "element": "<code>--generate-name</code>"
        },
        {
          "language": "",
          "code": "--show-only",
          "element": "<code>--show-only</code>"
        },
        {
          "language": "",
          "code": "--history-max",
          "element": "<code>--history-max</code>"
        },
        {
          "language": "",
          "code": "get.helm.sh",
          "element": "<code>get.helm.sh</code>"
        },
        {
          "language": "",
          "code": "clusterroles.rbac",
          "element": "<code>clusterroles.rbac</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Migrating Helm v2 to v3",
          "id": ""
        },
        {
          "level": 2,
          "text": "Overview of Helm 3 Changes",
          "id": "overview-of-helm-3-changes"
        },
        {
          "level": 2,
          "text": "Migration Use Cases",
          "id": "migration-use-cases"
        },
        {
          "level": 2,
          "text": "Reference",
          "id": "reference"
        }
      ],
      "timestamp": 1750732684.759512
    },
    {
      "url": "https://helm.sh/docs/topics/kubernetes_apis/",
      "title": "Helm | Deprecated Kubernetes APIs",
      "content": "Deprecated Kubernetes APIs\nKubernetes is an API-driven system and the API evolves over time to reflect the\nevolving understanding of the problem space. This is common practice across\nsystems and their APIs. An important part of evolving APIs is a good deprecation\npolicy and process to inform users of how changes to APIs are implemented. In\nother words, consumers of your API need to know in advance and in what release\nan API will be removed or changed. This removes the element of surprise and\nbreaking changes to consumers.\nThe\nKubernetes deprecation\npolicy\ndocuments how Kubernetes handles the changes to its API versions. The policy for\ndeprecation states the timeframe that API versions will be supported following a\ndeprecation announcement. It is therefore important to be aware of deprecation\nannouncements and know when API versions will be removed, to help minimize the\neffect.\nThis is an example of an announcement\nfor the removal of deprecated API\nversions in Kubernetes\n1.16\nand was\nadvertised a few months prior to the release. These API versions would have been\nannounced for deprecation prior to this again. This shows that there is a good\npolicy in place which informs consumers of API version support.\nHelm templates specify a\nKubernetes API\ngroup\nwhen defining a Kubernetes object, similar to a Kubernetes manifest file. It is\nspecified in the\napiVersion\nfield of the template and it identifies the API\nversion of the Kubernetes object. This means that Helm users and chart\nmaintainers need to be aware when Kubernetes API versions have been deprecated\nand in what Kubernetes version they will be removed.\nChart Maintainers\nYou should audit your charts checking for Kubernetes API versions that are\ndeprecated or are removed in a Kubernetes version. The API versions found as due\nto be or that are now out of support, should be updated to the supported version\nand a new version of the chart released. The API version is defined by the\nkind\nand\napiVersion\nfields. For example, here is a removed\nDeployment\nobject API version in Kubernetes 1.16:\napiVersion\n:\napps/v1beta1\nkind\n:\nDeployment\nHelm Users\nYou should audit the charts that you use (similar to\nchart\nmaintainers\n) and identify any charts where API versions are\ndeprecated or removed in a Kubernetes version. For the charts identified, you\nneed to check for the latest version of the chart (which has supported API\nversions) or update the chart yourself.\nAdditionally, you also need to audit any charts deployed (i.e. Helm releases)\nchecking again for any deprecated or removed API versions. This can be done by\ngetting details of a release using the\nhelm get manifest\ncommand.\nThe means for updating a Helm release to supported APIs depends on your findings\nas follows:\nIf you find deprecated API versions only then:\nPerform a\nhelm upgrade\nwith a version of the chart with supported\nKubernetes API versions\nAdd a description in the upgrade, something along the lines to not perform a\nrollback to a Helm version prior to this current version\nIf you find any API version(s) that is/are removed in a Kubernetes version\nthen:\nIf you are running a Kubernetes version where the API version(s) are still\navailable (for example, you are on Kubernetes 1.15 and found you use APIs\nthat will be removed in Kubernetes 1.16):\nFollow the step 1 procedure\nOtherwise (for example, you are already running a Kubernetes version where\nsome API versions reported by\nhelm get manifest\nare no longer available):\nYou need to edit the release manifest that is stored in the cluster to\nupdate the API versions to supported APIs. See\nUpdating API Versions of a\nRelease Manifest\nfor more\ndetails\nNote: In all cases of updating a Helm release with supported APIs, you should\nnever rollback the release to a version prior to the release version with the\nsupported APIs.\nRecommendation: The best practice is to upgrade releases using deprecated API\nversions to supported API versions, prior to upgrading to a kubernetes cluster\nthat removes those API versions.\nIf you don't update a release as suggested previously, you will have an error\nsimilar to the following when trying to upgrade a release in a Kubernetes\nversion where its API version(s) is/are removed:\nError: UPGRADE FAILED: current release manifest contains removed kubernetes api(s)\nfor this kubernetes version and it is therefore unable to build the kubernetes\nobjects for performing the diff. error from kubernetes: unable to recognize \"\":\nno matches for kind \"Deployment\" in version \"apps/v1beta1\"\nHelm fails in this scenario because it attempts to create a diff patch between\nthe current deployed release (which contains the Kubernetes APIs that are\nremoved in this Kubernetes version) against the chart you are passing with the\nupdated/supported API versions. The underlying reason for failure is that when\nKubernetes removes an API version, the Kubernetes Go client library can no\nlonger parse the deprecated objects and Helm therefore fails when calling the\nlibrary. Helm unfortunately is unable to recover from this situation and is no\nlonger able to manage such a release. See\nUpdating API Versions of a Release\nManifest\nfor more details on how\nto recover from this scenario.\nUpdating API Versions of a Release Manifest\nThe manifest is a property of the Helm release object which is stored in the\ndata field of a Secret (default) or ConfigMap in the cluster. The data field\ncontains a gzipped object which is base 64 encoded (there is an additional base\n64 encoding for a Secret). There is a Secret/ConfigMap per release\nversion/revision in the namespace of the release.\nYou can use the Helm\nmapkubeapis\nplugin to perform the update of a release to supported APIs. Check out the\nreadme for more details.\nAlternatively, you can follow these manual steps to perform an update of the API\nversions of a release manifest. Depending on your configuration you will follow\nthe steps for the Secret or ConfigMap backend.\nGet the name of the Secret or Configmap associated with the latest deployed\nrelease:\nSecrets backend:\nkubectl get secret -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME\nConfigMap backend:\nkubectl get configmap -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME\nGet latest deployed release details:\nSecrets backend:\nkubectl get secret <release_secret_name> -n <release_namespace> -o yaml > release.yaml\nConfigMap backend:\nkubectl get configmap <release_configmap_name> -n <release_namespace> -o yaml > release.yaml\nBackup the release in case you need to restore if something goes wrong:\ncp release.yaml release.bak\nIn case of emergency, restore:\nkubectl apply -f release.bak -n <release_namespace>\nDecode the release object:\nSecrets backend:\ncat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | base64 -d | gzip -d > release.data.decoded\nConfigMap backend:\ncat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | gzip -d > release.data.decoded\nChange API versions of the manifests. Can use any tool (e.g. editor) to make\nthe changes. This is in the\nmanifest\nfield of your decoded release object\n(\nrelease.data.decoded\n)\nEncode the release object:\nSecrets backend:\ncat release.data.decoded | gzip | base64 | base64\nConfigMap backend:\ncat release.data.decoded | gzip | base64\nReplace\ndata.release\nproperty value in the deployed release file\n(\nrelease.yaml\n) with the new encoded release object\nApply file to namespace:\nkubectl apply -f release.yaml -n <release_namespace>\nPerform a\nhelm upgrade\nwith a version of the chart with supported Kubernetes\nAPI versions\nAdd a description in the upgrade, something along the lines to not perform a\nrollback to a Helm version prior to this current version\nPrev\n← Migrating Helm v2 to v3\nNext\nHelm Version Support Policy →",
      "code_examples": [
        {
          "language": "",
          "code": "apiVersion:apps/v1beta1kind:Deployment",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-w..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion:apps/v1beta1kind:Deployment",
          "element": "<code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex\"><span><span style=\"color:#309;font-weight:700\">apiVersion</span>:<span style=\"color:#bbb\"> </span>apps/v1beta1<span style=\"color..."
        },
        {
          "language": "",
          "code": "helm get manifest",
          "element": "<code>helm get manifest</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        },
        {
          "language": "",
          "code": "helm get manifest",
          "element": "<code>helm get manifest</code>"
        },
        {
          "language": "",
          "code": "Error: UPGRADE FAILED: current release manifest contains removed kubernetes api(s)for this kubernetes version and it is therefore unable to build the kubernetesobjects for performing the diff. error from kubernetes: unable to recognize \"\":no matches for kind \"Deployment\" in version \"apps/v1beta1\"",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>Error: UPGRADE FAILED:..."
        },
        {
          "language": "language-fallback",
          "code": "Error: UPGRADE FAILED: current release manifest contains removed kubernetes api(s)for this kubernetes version and it is therefore unable to build the kubernetesobjects for performing the diff. error from kubernetes: unable to recognize \"\":no matches for kind \"Deployment\" in version \"apps/v1beta1\"",
          "element": "<code class=\"language-fallback\" data-lang=\"fallback\"><span style=\"display:flex\"><span>Error: UPGRADE FAILED: current release manifest contains removed kubernetes api(s)\n</span></span><span style=\"disp..."
        },
        {
          "language": "",
          "code": "kubectl get secret -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME",
          "element": "<code>kubectl get secret -l owner=helm,status=deployed,name=&lt;release_name&gt; --namespace &lt;release_namespace&gt; | awk '{print $1}' | grep -v NAME</code>"
        },
        {
          "language": "",
          "code": "kubectl get configmap -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME",
          "element": "<code>kubectl get configmap -l owner=helm,status=deployed,name=&lt;release_name&gt; --namespace &lt;release_namespace&gt; | awk '{print $1}' | grep -v NAME</code>"
        },
        {
          "language": "",
          "code": "kubectl get secret <release_secret_name> -n <release_namespace> -o yaml > release.yaml",
          "element": "<code>kubectl get secret &lt;release_secret_name&gt; -n &lt;release_namespace&gt; -o yaml &gt; release.yaml</code>"
        },
        {
          "language": "",
          "code": "kubectl get configmap <release_configmap_name> -n <release_namespace> -o yaml > release.yaml",
          "element": "<code>kubectl get configmap &lt;release_configmap_name&gt; -n &lt;release_namespace&gt; -o yaml &gt; release.yaml</code>"
        },
        {
          "language": "",
          "code": "cp release.yaml release.bak",
          "element": "<code>cp release.yaml release.bak</code>"
        },
        {
          "language": "",
          "code": "kubectl apply -f release.bak -n <release_namespace>",
          "element": "<code>kubectl apply -f release.bak -n &lt;release_namespace&gt;</code>"
        },
        {
          "language": "",
          "code": "cat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | base64 -d | gzip -d > release.data.decoded",
          "element": "<code>cat release.yaml | grep -oP '(?&lt;=release: ).*' | base64 -d | base64 -d | gzip -d &gt; release.data.decoded</code>"
        },
        {
          "language": "",
          "code": "cat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | gzip -d > release.data.decoded",
          "element": "<code>cat release.yaml | grep -oP '(?&lt;=release: ).*' | base64 -d | gzip -d &gt; release.data.decoded</code>"
        },
        {
          "language": "",
          "code": "release.data.decoded",
          "element": "<code>release.data.decoded</code>"
        },
        {
          "language": "",
          "code": "cat release.data.decoded | gzip | base64 | base64",
          "element": "<code>cat release.data.decoded | gzip | base64 | base64</code>"
        },
        {
          "language": "",
          "code": "cat release.data.decoded | gzip | base64",
          "element": "<code>cat release.data.decoded | gzip | base64</code>"
        },
        {
          "language": "",
          "code": "data.release",
          "element": "<code>data.release</code>"
        },
        {
          "language": "",
          "code": "release.yaml",
          "element": "<code>release.yaml</code>"
        },
        {
          "language": "",
          "code": "kubectl apply -f release.yaml -n <release_namespace>",
          "element": "<code>kubectl apply -f release.yaml -n &lt;release_namespace&gt;</code>"
        },
        {
          "language": "",
          "code": "helm upgrade",
          "element": "<code>helm upgrade</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Deprecated Kubernetes APIs",
          "id": ""
        },
        {
          "level": 2,
          "text": "Chart Maintainers",
          "id": "chart-maintainers"
        },
        {
          "level": 2,
          "text": "Helm Users",
          "id": "helm-users"
        },
        {
          "level": 2,
          "text": "Updating API Versions of a Release Manifest",
          "id": "updating-api-versions-of-a-release-manifest"
        }
      ],
      "timestamp": 1750732687.116086
    },
    {
      "url": "https://helm.sh/docs/topics/version_skew/",
      "title": "Helm | Helm Version Support Policy",
      "content": "Helm Version Support Policy\nThis document describes the maximum version skew supported between Helm and\nKubernetes.\nSupported Versions\nHelm versions are expressed as\nx.y.z\n, where\nx\nis the major version,\ny\nis\nthe minor version, and\nz\nis the patch version, following\nSemantic\nVersioning\nterminology.\nThe Helm project maintains a release branch for the most recent minor release.\nApplicable fixes, including security fixes, are cherry-picked into the release\nbranch, depending on severity and feasibility. More details can be found in\nHelm's release policy\n.\nSupported Version Skew\nWhen a new version of Helm is released, it is compiled against a particular\nminor version of Kubernetes. For example, Helm 3.0.0 interacts with Kubernetes\nusing the Kubernetes 1.16.2 client, so it is compatible with Kubernetes 1.16.\nAs of Helm 3, Helm is assumed to be compatible with\nn-3\nversions of Kubernetes\nit was compiled against. Due to Kubernetes' changes between minor versions, Helm\n2's support policy is slightly stricter, assuming to be compatible with\nn-1\nversions of Kubernetes.\nFor example, if you are using a version of Helm 3 that was compiled against the\nKubernetes 1.17 client APIs, then it should be safe to use with Kubernetes 1.17,\n1.16, 1.15, and 1.14. If you are using a version of Helm 2 that was compiled\nagainst the Kubernetes 1.16 client APIs, then it should be safe to use with\nKubernetes 1.16 and 1.15.\nIt is not recommended to use Helm with a version of Kubernetes that is newer\nthan the version it was compiled against, as Helm does not make any forward\ncompatiblility guarantees.\nIf you choose to use Helm with a version of Kubernetes that it does not support,\nyou are using it at your own risk.\nPlease refer to the table below to determine what version of Helm is compatible\nwith your cluster.\nHelm Version\nSupported Kubernetes Versions\n3.17.x\n1.32.x - 1.29.x\n3.16.x\n1.31.x - 1.28.x\n3.15.x\n1.30.x - 1.27.x\n3.14.x\n1.29.x - 1.26.x\n3.13.x\n1.28.x - 1.25.x\n3.12.x\n1.27.x - 1.24.x\n3.11.x\n1.26.x - 1.23.x\n3.10.x\n1.25.x - 1.22.x\n3.9.x\n1.24.x - 1.21.x\n3.8.x\n1.23.x - 1.20.x\n3.7.x\n1.22.x - 1.19.x\n3.6.x\n1.21.x - 1.18.x\n3.5.x\n1.20.x - 1.17.x\n3.4.x\n1.19.x - 1.16.x\n3.3.x\n1.18.x - 1.15.x\n3.2.x\n1.18.x - 1.15.x\n3.1.x\n1.17.x - 1.14.x\n3.0.x\n1.16.x - 1.13.x\n2.16.x\n1.16.x - 1.15.x\n2.15.x\n1.15.x - 1.14.x\n2.14.x\n1.14.x - 1.13.x\n2.13.x\n1.13.x - 1.12.x\n2.12.x\n1.12.x - 1.11.x\n2.11.x\n1.11.x - 1.10.x\n2.10.x\n1.10.x - 1.9.x\n2.9.x\n1.10.x - 1.9.x\n2.8.x\n1.9.x - 1.8.x\n2.7.x\n1.8.x - 1.7.x\n2.6.x\n1.7.x - 1.6.x\n2.5.x\n1.6.x - 1.5.x\n2.4.x\n1.6.x - 1.5.x\n2.3.x\n1.5.x - 1.4.x\n2.2.x\n1.5.x - 1.4.x\n2.1.x\n1.5.x - 1.4.x\n2.0.x\n1.4.x - 1.3.x\nPrev\n← Deprecated Kubernetes APIs\nNext\nPermissions management for SQL storage backend →",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Helm Version Support Policy",
          "id": ""
        },
        {
          "level": 2,
          "text": "Supported Versions",
          "id": "supported-versions"
        },
        {
          "level": 2,
          "text": "Supported Version Skew",
          "id": "supported-version-skew"
        }
      ],
      "timestamp": 1750732689.750027
    },
    {
      "url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/",
      "title": "Helm | Permissions management for SQL storage backend",
      "content": "Permissions management for SQL storage backend\nThis document aims to provide guidance to users for setting up and managing\npermissions when using the SQL storage backend.\nIntroduction\nTo handle permissions, Helm leverages the RBAC feature of Kubernetes. When using\nthe SQL storage backend, Kubernetes' roles can't be used to determine whether or\nnot an user can access a given resource. This document shows how to create and\nmanage these permissions.\nInitialization\nThe first time the Helm CLI will make connect to your database, the client will\nmake sure that it was previously initialized. If it is not, it will take care of\nthe necessary setup automatically. This initialization requires admin privileges\non the public schema, or at least to be able to:\ncreate a table\ngrant privileges on the public schema\nAfter the migration was run against your database, all the other roles can use\nthe client.\nGrant privileges to a non admin user in PostgreSQL\nTo manage permissions, the SQL backend driver leverages the\nRLS\n(Row Security\nLevel) feature of PostgreSQL. RLS allows all users to be able to read/write\nfrom/to the same table, without being able to manipulate the same rows if they\nare not explicitly allowed to. By default, any role that has not been\nexplicitly granted with the right privileges will always return an empty list\nwhen running\nhelm list\nand will not be able to retrieve or modify any resource\nin the cluster.\nLet's see how to grant a given role access to specific namespaces:\nCREATE\nPOLICY\n<\nname\n>\nON\nreleases_v1\nFOR\nALL\nTO\n<\nrole\n>\nUSING\n(namespace\n=\n'default'\n);\nThis command will grant the permissions to read and write all resources that\nmeet the\nnamespace = 'default'\ncondition to the role\nrole\n. After creating\nthis policy, the user being connected to the database on the behalf of the role\nrole\nwill therefore be able to see all the releases living in the\ndefault\nnamespace when running\nhelm list\n, and to modify and delete them.\nPrivileges can be managed granularly with RLS, and one might be interested in\nrestraining access given the different columns of the table:\nkey\ntype\nbody\nname\nnamespace\nversion\nstatus\nowner\ncreatedAt\nmodifiedAt\nPrev\n← Helm Version Support Policy\nNext\nRelease schedule policy →",
      "code_examples": [
        {
          "language": "",
          "code": "CREATEPOLICY<name>ONreleases_v1FORALLTO<role>USING(namespace='default');",
          "element": "<pre style=\"background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4\" tabindex=\"0\"><code class=\"language-sql\" data-lang=\"sql\"><span style=\"display:flex\"><span><span style=\"color:#069;font-wei..."
        },
        {
          "language": "language-sql",
          "code": "CREATEPOLICY<name>ONreleases_v1FORALLTO<role>USING(namespace='default');",
          "element": "<code class=\"language-sql\" data-lang=\"sql\"><span style=\"display:flex\"><span><span style=\"color:#069;font-weight:700\">CREATE</span><span style=\"color:#bbb\"> </span>POLICY<span style=\"color:#bbb\"> </spa..."
        },
        {
          "language": "",
          "code": "namespace = 'default'",
          "element": "<code>namespace = 'default'</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Permissions management for SQL storage backend",
          "id": ""
        },
        {
          "level": 2,
          "text": "Introduction",
          "id": "introduction"
        },
        {
          "level": 2,
          "text": "Initialization",
          "id": "initialization"
        },
        {
          "level": 2,
          "text": "Grant privileges to a non admin user in PostgreSQL",
          "id": "grant-privileges-to-a-non-admin-user-in-postgresql"
        }
      ],
      "timestamp": 1750732692.085946
    },
    {
      "url": "https://helm.sh/docs/topics/release_policy/",
      "title": "Helm | Release schedule policy",
      "content": "Release schedule policy\nFor the benefit of its users, Helm defines and announces release dates in\nadvance. This document describes the policy governing Helm's release schedule.\nRelease calendar\nA public calendar showing the upcoming Helm releases can be found\nhere\n.\nSemantic versioning\nHelm versions are expressed as\nx.y.z\n, where\nx\nis the major version,\ny\nis\nthe minor version, and\nz\nis the patch version, following\nSemantic\nVersioning\nterminology.\nPatch releases\nPatch releases provide users with bug fixes and security fixes. They do not\ncontain new features.\nA new patch release relating to the latest minor/major release will normally be\ndone once a month on the second Wednesday of each month.\nA patch release to fix a high priority regression or security issue can be done\nwhenever needed.\nA patch release will be cancelled for any of the following reasons:\nif there is no new content since the previous release\nif the patch release date falls within one week before the first release candidate (RC1) of an upcoming minor release\nif the patch release date falls within four weeks following a minor release\nMinor releases\nMinor releases contain security and bug fixes as well as new features. They\nare backwards compatible with respect to the API and the CLI usage.\nTo align with Kubernetes releases, a minor helm release will be done every\n4 months (3 releases a year).\nExtra minor releases can be done if needed but will not affect the timeline of\nan announced future release, unless the announced release is less than 7 days\naway.\nAt the same time as a release is published, the date of the next minor release\nwill be announced and posted to Helm's main web page.\nMajor releases\nMajor releases contain breaking changes. Such releases are rare but are\nsometimes necessary to allow helm to continue to evolve in important new\ndirections.\nMajor releases can be difficult to plan. With that in mind, a final release\ndate will only be chosen and announced once the first beta version of such a\nrelease is available.\nPrev\n← Permissions management for SQL storage backend",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Release schedule policy",
          "id": ""
        },
        {
          "level": 2,
          "text": "Release calendar",
          "id": "release-calendar"
        },
        {
          "level": 2,
          "text": "Semantic versioning",
          "id": "semantic-versioning"
        },
        {
          "level": 2,
          "text": "Patch releases",
          "id": "patch-releases"
        },
        {
          "level": 2,
          "text": "Minor releases",
          "id": "minor-releases"
        },
        {
          "level": 2,
          "text": "Major releases",
          "id": "major-releases"
        }
      ],
      "timestamp": 1750732694.7078452
    },
    {
      "url": "https://helm.sh/docs/chart_best_practices/",
      "title": "Helm | Docs",
      "content": "The Chart Best Practices Guide\nThis guide covers the Helm Team's considered best practices for creating charts.\nIt focuses on how charts should be structured.\nWe focus primarily on best practices for charts that may be publicly deployed.\nWe know that many charts are for internal-use only, and authors of such charts\nmay find that their internal interests override our suggestions here.\nQuicklinks\nGeneral Conventions\nGeneral conventions for charts.\nValues\nFocuses on how you should structure and use your values.\nTemplates\nA closer look at best practices surrounding templates.\nDependencies\nCovers best practices for Chart dependencies.\nLabels and Annotations\nCovers best practices for using labels and annotations in your Chart.\nPods and PodTemplates\nDiscusses formatting the Pod and PodTemplate portions in Chart manifests.\nCustom Resource Definitions\nHow to handle creating and using CRDs.\nRole-Based Access Control\nDiscusses the creation and formatting of RBAC resources in Chart manifests.",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "The Chart Best Practices Guide",
          "id": "the-chart-best-practices-guide"
        },
        {
          "level": 3,
          "text": "Quicklinks",
          "id": ""
        },
        {
          "level": 4,
          "text": "General Conventions",
          "id": ""
        },
        {
          "level": 4,
          "text": "Values",
          "id": ""
        },
        {
          "level": 4,
          "text": "Templates",
          "id": ""
        },
        {
          "level": 4,
          "text": "Dependencies",
          "id": ""
        },
        {
          "level": 4,
          "text": "Labels and Annotations",
          "id": ""
        },
        {
          "level": 4,
          "text": "Pods and PodTemplates",
          "id": ""
        },
        {
          "level": 4,
          "text": "Custom Resource Definitions",
          "id": ""
        },
        {
          "level": 4,
          "text": "Role-Based Access Control",
          "id": ""
        }
      ],
      "timestamp": 1750732697.1822348
    }
  ],
  "total_pages": 30,
  "errors": []
}