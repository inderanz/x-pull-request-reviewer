{
  "technology": "istio",
  "base_url": "https://istio.io/latest/docs/",
  "pages": [
    {
      "url": "https://istio.io/latest/docs/",
      "title": "Istio / Documentation",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nDocumentation\nLearn how to deploy, use, and operate Istio.\nOverview\nA high-level introduction to Istio and service mesh.\nConcepts\nLearn about the different parts of the Istio system and the abstractions it uses.\nSidecar Mode\nInformation for setting up and operating Istio in sidecar mode.\nAmbient Mode\nInformation for setting up and operating Istio with support for ambient mode.\nTasks\nHow to do single specific targeted activities with the Istio system.\nExamples\nA variety of fully working example uses for Istio that you can experiment with.\nOperations\nConcepts, tools, and techniques to deploy and manage an Istio mesh.\nReleases\nInformation relating to Istio releases.\nReference\nDetailed authoritative reference material such as command-line options, configuration options, and API calling parameters.\nIn addition to the above documentation links, please consider the following resources:\nFrequently Asked Questions\nGlossary\nDocumentation Archive\n, which contains snapshots of the documentation for prior releases.\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Documentation",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 5,
          "text": "Overview",
          "id": ""
        },
        {
          "level": 5,
          "text": "Concepts",
          "id": ""
        },
        {
          "level": 5,
          "text": "Sidecar Mode",
          "id": ""
        },
        {
          "level": 5,
          "text": "Ambient Mode",
          "id": ""
        },
        {
          "level": 5,
          "text": "Tasks",
          "id": ""
        },
        {
          "level": 5,
          "text": "Examples",
          "id": ""
        },
        {
          "level": 5,
          "text": "Operations",
          "id": ""
        },
        {
          "level": 5,
          "text": "Releases",
          "id": ""
        },
        {
          "level": 5,
          "text": "Reference",
          "id": ""
        }
      ],
      "timestamp": 1750732082.073746
    },
    {
      "url": "https://istio.io/latest/docs/overview/quickstart",
      "title": "Istio / Quickstart",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nOverview\nQuickstart\nQuickstart\nThanks for your interest in Istio!\nIstio has two primary modes:\nambient mode\nand\nsidecar mode\n.\nAmbient mode\nis the new and improved model, created to address the shortcomings of sidecar mode. In ambient mode, a secure tunnel is installed on each node, and you can opt in to the full feature set with proxies you install, (generally) per-namespace.\nSidecar mode\nis the traditional model of service mesh pioneered by Istio in 2017. In sidecar mode, a proxy is deployed along with every Kubernetes pod or other workload.\nMost of the energy in the Istio community is going towards improvement of ambient mode, although sidecar mode remains fully supported. Any major new feature contributed to the project is expected to work in both modes.\nIn general,\nwe recommend that new users start with ambient mode\n. It is faster, cheaper, and easier to manage. There are\nadvanced use cases\nthat still require the use of sidecar mode, but closing these gaps is on our 2025 roadmap.\nGet started with ambient mode\nGet started with sidecar mode\nSidecar or ambient?\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Quickstart",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732084.629647
    },
    {
      "url": "https://istio.io/latest/docs/overview/",
      "title": "Istio / Overview",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nOverview\nOverview\nA high-level introduction to Istio and service mesh.\nWhat is Istio?\nFind out what Istio can do for you.\nWhy choose Istio?\nCompare Istio to other service mesh solutions.\nSidecar or ambient?\nLearn about Istio's two dataplane modes and which you should use.\nQuickstart\nLearn how to get started with a simple example installation.\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Overview",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 5,
          "text": "What is Istio?",
          "id": ""
        },
        {
          "level": 5,
          "text": "Why choose Istio?",
          "id": ""
        },
        {
          "level": 5,
          "text": "Sidecar or ambient?",
          "id": ""
        },
        {
          "level": 5,
          "text": "Quickstart",
          "id": ""
        }
      ],
      "timestamp": 1750732087.08223
    },
    {
      "url": "https://istio.io/latest/docs/overview/what-is-istio/",
      "title": "Istio / What is Istio?",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nOverview\nWhat is Istio?\nWhat is Istio?\n2 minute read\nHow it works\nSee also\nIstio is an open source service mesh that layers transparently onto existing distributed applications. Istio’s powerful features provide a uniform and more efficient way to secure, connect, and monitor services. Istio is the path to load balancing, service-to-service authentication, and monitoring – with few or no service code changes. It gives you:\nSecure service-to-service communication in a cluster with mutual TLS encryption, strong identity-based authentication and authorization\nAutomatic load balancing for HTTP, gRPC, WebSocket, and TCP traffic\nFine-grained control of traffic behavior with rich routing rules, retries, failovers, and fault injection\nA pluggable policy layer and configuration API supporting access controls, rate limits and quotas\nAutomatic metrics, logs, and traces for all traffic within a cluster, including cluster ingress and egress\nIstio is designed for extensibility and can handle a diverse range of deployment needs. Istio’s\ncontrol plane\nruns on Kubernetes, and you can add applications deployed in that cluster to your mesh,\nextend the mesh to other clusters\n, or even\nconnect VMs or other endpoints\nrunning outside of Kubernetes.\nA large ecosystem of contributors, partners, integrations, and distributors extend and leverage Istio for a wide variety of scenarios. You can install Istio yourself, or a\nlarge number of vendors\nhave products that integrate Istio and manage it for you.\nHow it works\nIstio uses a proxy to intercept all your network traffic, allowing a broad set of application-aware features based on configuration you set.\nThe control plane takes your desired configuration, and its view of the services, and dynamically programs the proxy servers, updating them as the rules or the environment changes.\nThe data plane is the communication between services. Without a service mesh, the network doesn’t understand the traffic being sent over, and can’t make any decisions based on what type of traffic it is, or who it is from or to.\nIstio supports two data plane modes:\nsidecar mode\n, which deploys an Envoy proxy along with each pod that you start in your cluster, or running alongside services running on VMs.\nambient mode\n, which uses a per-node Layer 4 proxy, and optionally a per-namespace Envoy proxy for Layer 7 features.\nLearn how to choose which mode is right for you\n.\nSee also\nQuickstart\nLearn how to get started with a simple example installation.\nWhy choose Istio?\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nHow it works\nSee also",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "What is Istio?",
          "id": "title"
        },
        {
          "level": 2,
          "text": "How it works",
          "id": "how-it-works"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732090.589973
    },
    {
      "url": "https://istio.io/latest/docs/overview/why-choose-istio/",
      "title": "Istio / Why choose Istio?",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nOverview\nWhy choose Istio?\nWhy choose Istio?\n5 minute read\nSimple and powerful\nThe Envoy proxy\nCommunity\nPackages\nAlternatives considered\nWhy not “use eBPF”?\nWhy not use a per-node proxy?\nI have a CNI. Why do I need Istio?\nIstio pioneered the concept of a sidecar-based service mesh when it launched in 2017. Out of the gate, the project included the features that would come to define a service mesh, including standards-based mutual TLS for zero-trust networking, smart traffic routing, and observability through metrics, logs and tracing.\nSince then, the project has driven advances in the mesh space including\nmulti-cluster & multi-network topologies\n,\nextensibility via WebAssembly\n, the\ndevelopment of the Kubernetes Gateway API\n, and moving the mesh infrastructure away from application developers with\nambient mode\n.\nHere are a few reasons we think you should use Istio as your service mesh.\nSimple and powerful\nKubernetes has hundreds of features and dozens of APIs, but you can get started with it with just one command. We’ve built Istio to be the same way. Progressive disclosure means you can use a small set of APIs, and only turn the more powerful knobs if you have the need. Other “simple” service meshes spent years catching up to the feature set Istio had on day 1.\nIt is better to have a feature and not need it, than to need it and not have it!\nThe Envoy proxy\nFrom the beginning, Istio has been powered by the\nEnvoy\nproxy, a high performance service proxy initially built by Lyft. Istio was the first project to adopt Envoy, and\nthe Istio team were the first external committers\n. Envoy would go on to become\nthe load balancer that powers Google Cloud\nas well as the proxy for almost every other service mesh platform.\nIstio inherits all the power and flexibility of Envoy, including world-class extensibility using WebAssembly that was\ndeveloped in Envoy by the Istio team\n.\nCommunity\nIstio is a true community project. In 2023, there were 10 companies who made over 1,000 contributions each to Istio, with no single company exceeding 25%. (\nSee the numbers here\n).\nNo other service mesh project has the breadth of support from the industry as Istio.\nPackages\nWe make stable binary releases available to everyone, with every release, and commit to continue doing so. We publish free and regular security patches for\nour latest release and a number of prior releases\n. Many of our vendors will support older versions, but we believe that engaging a vendor should not be a requirement to be safe in a stable open source project.\nAlternatives considered\nA good design document includes a section on alternatives that were considered, and ultimately rejected.\nWhy not “use eBPF”?\nWe do - where it’s appropriate! Istio can be configured to use\neBPF\nto route traffic from pods to proxies\n. This shows a small performance increase over using\niptables\n.\nWhy not use it for everything? No-one does, because no-one actually can.\neBPF is a virtual machine that runs inside the Linux kernel. It was designed for functions guaranteed to complete in a limited compute envelope to avoid destabilizing kernel behavior, such as those that perform simple L3 traffic routing or application observability. It was not designed for long running or complex functions like those found in Envoy: that’s why operating systems have\nuser space\n! eBPF maintainers have theorized that it could eventually be extended to support running a program as complex as Envoy, but this is a science project and unlikely to have real world practicality.\nOther meshes that claim to “use eBPF” actually use a per-node Envoy proxy, or other user space tools, for much of their functionality.\nWhy not use a per-node proxy?\nEnvoy is not inherently multi-tenant. As a result, we have major security and stability concerns with commingling complex processing rules for L7 traffic from multiple unconstrained tenants in a shared instance. Since Kubernetes, by default can schedule a pod from any namespace onto any node, the node is not an appropriate tenancy boundary. Budgeting and cost attribution are also major issues, as L7 processing costs a lot more than L4.\nIn ambient mode, we strictly limit our ztunnel proxy to L4 processing -\njust like the Linux kernel\n. This reduces the vulnerability surface area significantly, and allows us to safely operate a shared component. Traffic is then forwarded off to Envoy proxies that operate per-namespace, such that no Envoy proxy is ever multi-tenant.\nI have a CNI. Why do I need Istio?\nToday, some CNI plugins are starting to offer service mesh-like functionality as an add-on that sits on top of their own CNI implementation. For example, they may implement their own encryption schemes for traffic between nodes or pods, workload identity, or support some amount of transport-level policy by redirecting traffic to a L7 proxy. These service mesh addons are non-standard, and as such can only work on top of the CNI that ships them. They also offer varying feature sets. For example, solutions built on top of Wireguard cannot be made FIPS-compliant.\nFor this reason, Istio has implemented its zero-trust tunnel (ztunnel) component, which transparently and efficiently provides this functionality using proven, industry-standard encryption protocols.\nLearn more about ztunnel\n.\nIstio is designed to be a service mesh that provides a consistent, highly secure, efficient, and standards-compliant service mesh implementation providing a\npowerful set of L7 policies\n,\nplatform-agnostic workload identity\n, using\nindustry-proven mTLS protocols\n- in any environment, with any CNI, or even across clusters with different CNIs.\nWhat is Istio?\nSidecar or ambient?\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nSimple and powerful\nThe Envoy proxy\nCommunity\nPackages\nAlternatives considered\nWhy not “use eBPF”?\nWhy not use a per-node proxy?\nI have a CNI. Why do I need Istio?",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Why choose Istio?",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Simple and powerful",
          "id": "simple-and-powerful"
        },
        {
          "level": 2,
          "text": "The Envoy proxy",
          "id": "envoy"
        },
        {
          "level": 2,
          "text": "Community",
          "id": "community"
        },
        {
          "level": 2,
          "text": "Packages",
          "id": "packages"
        },
        {
          "level": 2,
          "text": "Alternatives considered",
          "id": "alternatives-considered"
        },
        {
          "level": 2,
          "text": "I have a CNI. Why do I need Istio?",
          "id": "i-have-a-cni-why-do-i-need-istio"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 3,
          "text": "Why not “use eBPF”?",
          "id": "why-not-use-ebpf"
        },
        {
          "level": 3,
          "text": "Why not use a per-node proxy?",
          "id": "why-not-use-a-per-node-proxy"
        }
      ],
      "timestamp": 1750732093.474988
    },
    {
      "url": "https://istio.io/latest/docs/overview/dataplane-modes/",
      "title": "Istio / Sidecar or ambient?",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nOverview\nSidecar or ambient?\nSidecar or ambient?\n5 minute read\nSidecar mode\nAmbient mode\nChoosing between sidecar and ambient\nLayer 4 vs Layer 7 features\nSecurity\nObservability\nTraffic management\nUnsupported features\nSee also\nAn Istio service mesh is logically split into a data plane and a control plane.\nThe\ndata plane\nis the set of proxies that mediate and control all network communication between microservices. They also collect and report telemetry on all mesh traffic.\nThe\ncontrol plane\nmanages and configures the proxies in the data plane.\nIstio supports two main\ndata plane modes\n:\nsidecar mode\n, which deploys an Envoy proxy along with each pod that you start in your cluster, or running alongside services running on VMs.\nambient mode\n, which uses a per-node Layer 4 proxy, and optionally a per-namespace Envoy proxy for Layer 7 features.\nYou can opt certain namespaces or workloads into each mode.\nSidecar mode\nIstio has been built on the sidecar pattern from its first release in 2017. Sidecar mode is well understood and thoroughly battle-tested, but comes with a resource cost and operational overhead.\nEach application you deploy has an Envoy proxy\ninjected\nas a sidecar\nAll proxies can process both Layer 4 and Layer 7\nAmbient mode\nLaunched in 2022, ambient mode was built to address the shortcomings reported by users of sidecar mode. As of Istio 1.22, it is production-ready for single cluster use cases.\nAll traffic is proxied through a Layer 4-only node proxy\nApplications can opt in to routing through an Envoy proxy to get Layer 7 features\nChoosing between sidecar and ambient\nUsers often deploy a mesh to enable a zero-trust security posture as a first-step and then selectively enable L7 capabilities as needed. Ambient mesh allows those users to bypass the cost of L7 processing entirely when it’s not needed.\nSidecar\nAmbient\nTraffic management\nFull Istio feature set\nFull Istio feature set (requires using waypoint)\nSecurity\nFull Istio feature set\nFull Istio feature set: encryption and L4 authorization in ambient mode. Requires waypoints for L7 authorization.\nObservability\nFull Istio feature set\nFull Istio feature set: L4 telemetry in ambient mode; L7 observability when using waypoint\nExtensibility\nFull Istio feature set\nVia\nWebAssembly plugins\n(requires using waypoint)\nThe EnvoyFilter API is not supported.\nAdding workloads to the mesh\nLabel a namespace and restart all pods to have sidecars added\nLabel a namespace - no pod restart required\nIncremental deployment\nBinary: sidecar is injected or it isn't\nGradual: L4 is always on, L7 can be added by configuration\nLifecycle management\nProxies managed by application developer\nPlatform administrator\nUtilization of resources\nWasteful; CPU and memory resources must be provisioned for worst case usage of each individual pod\nWaypoint proxies can be auto-scaled like any other Kubernetes deployment.\nA workload with many replicas can use one waypoint, vs. each one having its own sidecar.\nAverage resource cost\nLarge\nSmall\nAverage latency (p90/p99)\n0.63ms-0.88ms\nAmbient: 0.16ms-0.20ms\nWaypoint: 0.40ms-0.50ms\nL7 processing steps\n2 (source and destination sidecar)\n1 (destination waypoint)\nConfiguration at scale\nRequires\nconfiguration of the scope of each sidecar\nto reduce configuration\nWorks without custom configuration\nSupports \"server-first\" protocols\nRequires configuration\nYes\nSupport for Kubernetes Jobs\nComplicated by long life of sidecar\nTransparent\nSecurity model\nStrongest: each workload has its own keys\nStrong: each node agent has only the keys for workloads on that node\nCompromised application pod\ngives access to mesh keys\nYes\nNo\nSupport\nStable, including multi-cluster\nStable, only single-cluster\nPlatforms supported\nKubernetes (any CNI)\nVirtual machines\nKubernetes (any CNI)\nLayer 4 vs Layer 7 features\nThe overhead for processing protocols at Layer 7 is substantially higher than processing network packets at Layer 4. For a given service, if your requirements can be met at L4, service mesh can be delivered at substantially lower cost.\nSecurity\nL4\nL7\nEncryption\nAll traffic between pods is encrypted using\nmTLS\n.\nN/A—service identity in Istio is based on TLS.\nService-to-service authentication\nSPIFFE\n, via mTLS certificates. Istio issues a short-lived X.509 certificate that encodes the pod's service account identity.\nN/A—service identity in Istio is based on TLS.\nService-to-service authorization\nNetwork-based authorization, plus identity-based policy, e.g.:\nA can accept inbound calls from only \"10.2.0.0/16\";\nA can call B.\nFull policy, e.g.:\nA can GET /foo on B only with valid end-user credentials containing the READ scope.\nEnd-user authentication\nN/A—we can't apply per-user settings.\nLocal authentication of JWTs, support for remote authentication via OAuth and OIDC flows.\nEnd-user authorization\nN/A—see above.\nService-to-service policies can be extended to require\nend-user credentials with specific scopes, issuers, principal, audiences, etc.\nFull user-to-resource access can be implemented using external authorization, allowing per-request policy with decisions from an external service, e.g. OPA.\nObservability\nL4\nL7\nLogging\nBasic network information: network 5-tuple, bytes sent/received, etc.\nSee Envoy docs\n.\nFull request metadata logging\n, in addition to basic network information.\nTracing\nNot today; possible eventually with HBONE.\nEnvoy participates in distributed tracing.\nSee Istio overview on tracing\n.\nMetrics\nTCP only (bytes sent/received, number of packets, etc.).\nL7 RED metrics: rate of requests, rate of errors, request duration (latency).\nTraffic management\nL4\nL7\nLoad balancing\nConnection level only.\nSee TCP traffic shifting task\n.\nPer request, enabling e.g. canary deployments, gRPC traffic, etc.\nSee HTTP traffic shifting task\n.\nCircuit breaking\nTCP only\n.\nHTTP settings\nin addition to TCP.\nOutlier detection\nOn connection establishment/failure.\nOn request success/failure.\nRate limiting\nRate limit on L4 connection data only, on connection establishment\n, with global and local rate limiting options.\nRate limit on L7 request metadata\n, per request.\nTimeouts\nConnection establishment only (connection keep-alive is configured via circuit breaking settings).\nPer request.\nRetries\nRetry connection establishment\nRetry per request failure.\nFault injection\nN/A—fault injection cannot be configured on TCP connections.\nFull application and connection-level faults (\ntimeouts, delays, specific response codes\n).\nTraffic mirroring\nN/A—HTTP only\nPercentage-based mirroring of requests to multiple backends\n.\nUnsupported features\nThe following features are available in sidecar mode, but not yet implemented in ambient mode:\nSidecar-to-waypoint interoperability\nMulti-cluster installations\nMulti-network support\nVM support\nSee also\nDeep Dive into the Network Traffic Path of the Coexistence of Ambient and Sidecar\nDeep Dive into the Traffic Path of the Coexistence of Ambient and Sidecar.\nIstio publishes results of ztunnel security audit\nPasses with flying colors.\nIstio: The Highest-Performance Solution for Network Security\nAmbient mode provides more encrypted throughput than any other project in the Kubernetes ecosystem.\nFast, Secure, and Simple: Istio’s Ambient Mode Reaches General Availability in v1.24\nOur latest release signals ambient mode – service mesh without sidecars – is ready for everyone.\nSay goodbye to your sidecars: Istio's ambient mode reaches Beta in v1.22\nLayer 4 & Layer 7 features are both now ready for production.\nIstio Ambient Waypoint Proxy Made Simple\nIntroducing the new destination oriented waypoint proxy for simplicity and scalability.\nWhy choose Istio?\nQuickstart\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nSidecar mode\nAmbient mode\nChoosing between sidecar and ambient\nLayer 4 vs Layer 7 features\nSecurity\nObservability\nTraffic management\nUnsupported features\nSee also",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Sidecar or ambient?",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Sidecar mode",
          "id": "sidecar-mode"
        },
        {
          "level": 2,
          "text": "Ambient mode",
          "id": "ambient-mode"
        },
        {
          "level": 2,
          "text": "Choosing between sidecar and ambient",
          "id": "choosing-between-sidecar-and-ambient"
        },
        {
          "level": 2,
          "text": "Layer 4 vs Layer 7 features",
          "id": "layer-4-vs-layer-7-features"
        },
        {
          "level": 2,
          "text": "Unsupported features",
          "id": "unsupported-features"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 3,
          "text": "Security",
          "id": "security"
        },
        {
          "level": 3,
          "text": "Observability",
          "id": "observability"
        },
        {
          "level": 3,
          "text": "Traffic management",
          "id": "traffic-management"
        }
      ],
      "timestamp": 1750732095.8819609
    },
    {
      "url": "https://istio.io/latest/docs/overview/quickstart/",
      "title": "Istio / Quickstart",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nOverview\nQuickstart\nQuickstart\nThanks for your interest in Istio!\nIstio has two primary modes:\nambient mode\nand\nsidecar mode\n.\nAmbient mode\nis the new and improved model, created to address the shortcomings of sidecar mode. In ambient mode, a secure tunnel is installed on each node, and you can opt in to the full feature set with proxies you install, (generally) per-namespace.\nSidecar mode\nis the traditional model of service mesh pioneered by Istio in 2017. In sidecar mode, a proxy is deployed along with every Kubernetes pod or other workload.\nMost of the energy in the Istio community is going towards improvement of ambient mode, although sidecar mode remains fully supported. Any major new feature contributed to the project is expected to work in both modes.\nIn general,\nwe recommend that new users start with ambient mode\n. It is faster, cheaper, and easier to manage. There are\nadvanced use cases\nthat still require the use of sidecar mode, but closing these gaps is on our 2025 roadmap.\nGet started with ambient mode\nGet started with sidecar mode\nSidecar or ambient?\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Quickstart",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732097.956374
    },
    {
      "url": "https://istio.io/latest/docs/concepts/",
      "title": "Istio / Concepts",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nConcepts\nConcepts\nLearn about the different parts of the Istio system and the abstractions it uses.\nTraffic Management\nDescribes the various Istio features focused on traffic routing and control.\nSecurity\nDescribes Istio's authorization and authentication functionality.\nObservability\nDescribes the telemetry and monitoring features provided by Istio.\nExtensibility\nDescribes Istio's WebAssembly Plugin system.\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Concepts",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 5,
          "text": "Traffic Management",
          "id": ""
        },
        {
          "level": 5,
          "text": "Security",
          "id": ""
        },
        {
          "level": 5,
          "text": "Observability",
          "id": ""
        },
        {
          "level": 5,
          "text": "Extensibility",
          "id": ""
        }
      ],
      "timestamp": 1750732100.992595
    },
    {
      "url": "https://istio.io/latest/docs/concepts/traffic-management/",
      "title": "Istio / Traffic Management",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nConcepts\nTraffic Management\nTraffic Management\n22 minute read\nIntroducing Istio traffic management\nVirtual services\nWhy use virtual services?\nVirtual service example\nThe hosts field\nRouting rules\nMatch condition\nDestination\nRouting rule precedence\nMore about routing rules\nDestination rules\nLoad balancing options\nDestination rule example\nGateways\nGateway example\nService entries\nService entry example\nSidecars\nNetwork resilience and testing\nTimeouts\nRetries\nCircuit breakers\nFault injection\nWorking with your applications\nSee also\nIstio’s traffic routing rules let you easily control the flow\nof traffic and API calls between services. Istio simplifies configuration of\nservice-level properties like circuit breakers, timeouts, and retries, and makes\nit easy to set up important tasks like A/B testing, canary rollouts, and staged\nrollouts with percentage-based traffic splits. It also provides out-of-box\nreliability features that help make your application\nmore resilient against failures of dependent services or the network.\nIstio’s traffic management model relies on the\nEnvoy\nproxies that are deployed along with your services. All traffic that your mesh\nservices send and receive (\ndata plane\ntraffic) is proxied through Envoy, making\nit easy to direct and control traffic around your mesh without making any\nchanges to your services.\nIf you’re interested in the details of how the features described in this guide\nwork, you can find out more about Istio’s traffic management implementation in the\narchitecture overview\n. The rest of\nthis guide introduces Istio’s traffic management features.\nIntroducing Istio traffic management\nIn order to direct traffic within your mesh, Istio needs to know where all your\nendpoints are, and which services they belong to. To populate its own\nservice registry\n, Istio connects to a service\ndiscovery system. For example, if you’ve installed Istio on a Kubernetes cluster,\nthen Istio automatically detects the services and endpoints in that cluster.\nUsing this service registry, the Envoy proxies can then direct traffic to the\nrelevant services. Most microservice-based applications have multiple instances\nof each service workload to handle service traffic, sometimes referred to as a\nload balancing pool. By default, the Envoy proxies distribute traffic across\neach service’s load balancing pool using a least requests model, where each\nrequest is routed to the host with fewer active requests from a\nrandom selection of two hosts from the pool; in this way the most heavily loaded\nhost will not receive requests until it is no more loaded than any other host.\nWhile Istio’s basic service discovery and load balancing gives you a working\nservice mesh, it’s far from all that Istio can do. In many cases you might want\nmore fine-grained control over what happens to your mesh traffic.\nYou might want to direct a particular percentage of traffic to a new version of\na service as part of A/B testing, or apply a different load balancing policy to\ntraffic for a particular subset of service instances. You might also want to\napply special rules to traffic coming into or out of your mesh, or add an\nexternal dependency of your mesh to the service registry. You can do all this\nand more by adding your own traffic configuration to Istio using Istio’s traffic\nmanagement API.\nLike other Istio configuration, the API is specified using Kubernetes custom\nresource definitions (\nCRDs\n), which you can configure\nusing YAML, as you’ll see in the examples.\nThe rest of this guide examines each of the traffic management API resources\nand what you can do with them. These resources are:\nVirtual services\nDestination rules\nGateways\nService entries\nSidecars\nThis guide also gives an overview of some of the\nnetwork resilience and testing features\nthat\nare built in to the API resources.\nVirtual services\nVirtual services\n,\nalong with\ndestination rules\n, are the key building blocks of Istio’s traffic\nrouting functionality. A virtual service lets you configure how requests are\nrouted to a service within an Istio service mesh, building on the basic\nconnectivity and discovery provided by Istio and your platform. Each virtual\nservice consists of a set of routing rules that are evaluated in order, letting\nIstio match each given request to the virtual service to a specific real\ndestination within the mesh. Your mesh can require multiple virtual services or\nnone depending on your use case.\nWhy use virtual services?\nVirtual services play a key role in making Istio’s traffic management flexible\nand powerful. They do this by strongly decoupling where clients send their\nrequests from the destination workloads that actually implement them. Virtual\nservices also provide a rich way of specifying different traffic routing rules\nfor sending traffic to those workloads.\nWhy is this so useful? Without virtual services, Envoy distributes\ntraffic using least requests load balancing between all service instances, as\ndescribed in the introduction. You can improve this behavior with what you know\nabout the workloads. For example, some might represent a different version. This\ncan be useful in A/B testing, where you might want to configure traffic routes\nbased on percentages across different service versions, or to direct\ntraffic from your internal users to a particular set of instances.\nWith a virtual service, you can specify traffic behavior for one or more hostnames.\nYou use routing rules in the virtual service that tell Envoy how to send the\nvirtual service’s traffic to appropriate destinations. Route destinations can\nbe different versions of the same service or entirely different services.\nA typical use case is to send traffic to different versions of a service,\nspecified as service subsets. Clients send requests to the virtual service host as if\nit was a single entity, and Envoy then routes the traffic to the different\nversions depending on the virtual service rules: for example, “20% of calls go to\nthe new version” or “calls from these users go to version 2”. This allows you to,\nfor instance, create a canary rollout where you gradually increase the\npercentage of traffic that’s sent to a new service version. The traffic routing\nis completely separate from the instance deployment, meaning that the number of\ninstances implementing the new service version can scale up and down based on\ntraffic load without referring to traffic routing at all. By contrast, container\norchestration platforms like Kubernetes only support traffic distribution based\non instance scaling, which quickly becomes complex. You can read more about how\nvirtual services help with canary deployments in\nCanary Deployments using Istio\n.\nVirtual services also let you:\nAddress multiple application services through a single virtual service. If\nyour mesh uses Kubernetes, for example, you can configure a virtual service\nto handle all services in a specific namespace. Mapping a single\nvirtual service to multiple “real” services is particularly useful in\nfacilitating turning a monolithic application into a composite service built\nout of distinct microservices without requiring the consumers of the service\nto adapt to the transition. Your routing rules can specify “calls to these URIs of\nmonolith.com\ngo to\nmicroservice A\n”, and so on. You can see how this works\nin\none of our examples below\n.\nConfigure traffic rules in combination with\ngateways\nto control ingress\nand egress traffic.\nIn some cases you also need to configure destination rules to use these\nfeatures, as these are where you specify your service subsets. Specifying\nservice subsets and other destination-specific policies in a separate object\nlets you reuse these cleanly between virtual services. You can find out more\nabout destination rules in the next section.\nVirtual service example\nThe following virtual service routes\nrequests to different versions of a service depending on whether the request\ncomes from a particular user.\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v3\nThe hosts field\nThe\nhosts\nfield lists the virtual service’s hosts - in other words, the user-addressable\ndestination or destinations that these routing rules apply to. This is the\naddress or addresses the client uses when sending requests to the service.\nhosts:\n- reviews\nThe virtual service hostname can be an IP address, a DNS name, or, depending on\nthe platform, a short name (such as a Kubernetes service short name) that resolves,\nimplicitly or explicitly, to a fully qualified domain name (FQDN). You can also\nuse wildcard (\"*\") prefixes, letting you create a single set of routing rules for\nall matching services. Virtual service hosts don’t actually have to be part of the\nIstio service registry, they are simply virtual destinations. This lets you model\ntraffic for virtual hosts that don’t have routable entries inside the mesh.\nRouting rules\nThe\nhttp\nsection contains the virtual service’s routing rules, describing\nmatch conditions and actions for routing HTTP/1.1, HTTP2, and gRPC traffic sent\nto the destination(s) specified in the hosts field (you can also use\ntcp\nand\ntls\nsections to configure routing rules for\nTCP\nand\nunterminated\nTLS\ntraffic). A routing rule consists of the destination where you want the traffic\nto go and zero or more match conditions, depending on your use case.\nMatch condition\nThe first routing rule in the example has a condition and so begins with the\nmatch\nfield. In this case you want this routing to apply to all requests from\nthe user “jason”, so you use the\nheaders\n,\nend-user\n, and\nexact\nfields to select\nthe appropriate requests.\n- match:\n   - headers:\n       end-user:\n         exact: jason\nDestination\nThe route section’s\ndestination\nfield specifies the actual destination for\ntraffic that matches this condition. Unlike the virtual service’s host(s), the\ndestination’s host must be a real destination that exists in Istio’s service\nregistry or Envoy won’t know where to send traffic to it. This can be a mesh\nservice with proxies or a non-mesh service added using a service entry. In this\ncase we’re running on Kubernetes and the host name is a Kubernetes service name:\nroute:\n- destination:\n    host: reviews\n    subset: v2\nNote in this and the other examples on this page, we use a Kubernetes short name for the\ndestination hosts for simplicity. When this rule is evaluated, Istio adds a domain suffix based\non the namespace of the virtual service that contains the routing rule to get\nthe fully qualified name for the host. Using short names in our examples\nalso means that you can copy and try them in any namespace you like.\nUsing short names like this only works if the\ndestination hosts and the virtual service are actually in the same Kubernetes\nnamespace. Because using the Kubernetes short name can result in\nmisconfigurations, we recommend that you specify fully qualified host names in\nproduction environments.\nThe destination section also specifies which subset of this Kubernetes service\nyou want requests that match this rule’s conditions to go to, in this case the\nsubset named v2. You’ll see how you define a service subset in the section on\ndestination rules\nbelow.\nRouting rule precedence\nRouting rules are\nevaluated in sequential order from top to bottom\n, with the\nfirst rule in the virtual service definition being given highest priority. In\nthis case you want anything that doesn’t match the first routing rule to go to a\ndefault destination, specified in the second rule. Because of this, the second\nrule has no match conditions and just directs traffic to the v3 subset.\n- route:\n  - destination:\n      host: reviews\n      subset: v3\nWe recommend providing a default “no condition” or weight-based rule (described\nbelow) like this as the last rule in each virtual service to ensure that traffic\nto the virtual service always has at least one matching route.\nMore about routing rules\nAs you saw above, routing rules are a powerful tool for routing particular\nsubsets of traffic to particular destinations. You can set match conditions on\ntraffic ports, header fields, URIs, and more. For example, this virtual service\nlets users send traffic to two separate services, ratings and reviews, as if\nthey were part of a bigger virtual service at\nhttp://bookinfo.com/.\nThe\nvirtual service rules match traffic based on request URIs and direct requests to\nthe appropriate service.\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: bookinfo\nspec:\n  hosts:\n    - bookinfo.com\n  http:\n  - match:\n    - uri:\n        prefix: /reviews\n    route:\n    - destination:\n        host: reviews\n  - match:\n    - uri:\n        prefix: /ratings\n    route:\n    - destination:\n        host: ratings\nFor some match conditions, you can also choose to select them using the exact\nvalue, a prefix, or a regex.\nYou can add multiple match conditions to the same\nmatch\nblock to AND your\nconditions, or add multiple match blocks to the same rule to OR your conditions.\nYou can also have multiple routing rules for any given virtual service. This\nlets you make your routing conditions as complex or simple as you like within a\nsingle virtual service. A full list of match condition fields and their possible\nvalues can be found in the\nHTTPMatchRequest\nreference\n.\nIn addition to using match conditions, you can distribute traffic\nby percentage “weight”. This is useful for A/B testing and canary rollouts:\nspec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 75\n    - destination:\n        host: reviews\n        subset: v2\n      weight: 25\nYou can also use routing rules to perform some actions on the traffic, for\nexample:\nAppend or remove headers.\nRewrite the URL.\nSet a\nretry policy\nfor calls to this destination.\nTo learn more about the actions available, see the\nHTTPRoute\nreference\n.\nDestination rules\nAlong with\nvirtual services\n,\ndestination rules\nare a key part of Istio’s traffic routing functionality. You can think of\nvirtual services as how you route your traffic\nto\na given destination, and\nthen you use destination rules to configure what happens to traffic\nfor\nthat\ndestination. Destination rules are applied after virtual service routing rules\nare evaluated, so they apply to the traffic’s “real” destination.\nIn particular, you use destination rules to specify named service subsets, such\nas grouping all a given service’s instances by version. You can then use these\nservice subsets in the routing rules of virtual services to control the\ntraffic to different instances of your services.\nDestination rules also let you customize Envoy’s traffic policies when calling\nthe entire destination service or a particular service subset, such as your\npreferred load balancing model, TLS security mode, or circuit breaker settings.\nYou can see a complete list of destination rule options in the\nDestination Rule reference\n.\nLoad balancing options\nBy default, Istio uses a least requests load balancing policy, where requests\nare distributed among the instances with the least number of requests. Istio also supports the\nfollowing models, which you can specify in destination rules for requests to a\nparticular service or service subset.\nRandom: Requests are forwarded at random to instances in the pool.\nWeighted: Requests are forwarded to instances in the pool according to a\nspecific percentage.\nRound robin: Requests are forwarded to each instance in sequence.\nConsistent hash: Provides soft session affinity based on HTTP headers, cookies or other properties.\nRing hash: Implements consistent hashing to upstream hosts using the\nKetama algorithm\n.\nMaglev: Implements consistent hashing to upstream hosts as described in the\nMaglev paper\n.\nSee the\nEnvoy load balancing documentation\nfor more information about each option.\nDestination rule example\nThe following example destination rule configures three different subsets for\nthe\nmy-svc\ndestination service, with different load balancing policies:\napiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: my-destination-rule\nspec:\n  host: my-svc\n  trafficPolicy:\n    loadBalancer:\n      simple: RANDOM\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n    trafficPolicy:\n      loadBalancer:\n        simple: ROUND_ROBIN\n  - name: v3\n    labels:\n      version: v3\nEach subset is defined based on one or more\nlabels\n, which in Kubernetes are\nkey/value pairs that are attached to objects such as Pods. These labels are\napplied in the Kubernetes service’s deployment as\nmetadata\nto identify\ndifferent versions.\nAs well as defining subsets, this destination rule has both a default traffic\npolicy for all subsets in this destination and a subset-specific policy that\noverrides it for just that subset. The default policy, defined above the\nsubsets\nfield, sets a simple random load balancer for the\nv1\nand\nv3\nsubsets. In the\nv2\npolicy, a round-robin load balancer is specified in the corresponding\nsubset’s field.\nGateways\nYou use a\ngateway\nto\nmanage inbound and outbound traffic for your mesh, letting you specify which\ntraffic you want to enter or leave the mesh. Gateway configurations are applied\nto standalone Envoy proxies that are running at the edge of the mesh, rather\nthan sidecar Envoy proxies running alongside your service workloads.\nUnlike other mechanisms for controlling traffic entering your systems, such as\nthe Kubernetes Ingress APIs, Istio gateways let you use the full power and\nflexibility of Istio’s traffic routing. You can do this because Istio’s Gateway\nresource just lets you configure layer 4-6 load balancing properties such as\nports to expose, TLS settings, and so on. Then instead of adding\napplication-layer traffic routing (L7) to the same API resource, you bind a\nregular Istio\nvirtual service\nto the gateway. This lets you\nbasically manage gateway traffic like any other data plane traffic in an Istio\nmesh.\nGateways are primarily used to manage ingress traffic, but you can also\nconfigure egress gateways. An egress gateway lets you configure a dedicated exit\nnode for the traffic leaving the mesh, letting you limit which services can or\nshould access external networks, or to enable\nsecure control of egress traffic\nto add security to your mesh, for example. You can also use a gateway to\nconfigure a purely internal proxy.\nIstio provides some preconfigured gateway proxy deployments\n(\nistio-ingressgateway\nand\nistio-egressgateway\n) that you can use - both are\ndeployed if you use our\ndemo installation\n,\nwhile just the ingress gateway is deployed with our\ndefault profile\n.\nYou can apply your own gateway configurations to these deployments or deploy and\nconfigure your own gateway proxies.\nGateway example\nThe following example shows a possible gateway configuration for external HTTPS\ningress traffic:\napiVersion: networking.istio.io/v1\nkind: Gateway\nmetadata:\n  name: ext-host-gwy\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    hosts:\n    - ext-host.example.com\n    tls:\n      mode: SIMPLE\n      credentialName: ext-host-cert\nThis gateway configuration lets HTTPS traffic from\next-host.example.com\ninto the mesh on\nport 443, but doesn’t specify any routing for the traffic.\nTo specify routing and for the gateway to work as intended, you must also bind\nthe gateway to a virtual service. You do this using the virtual service’s\ngateways\nfield, as shown in the following example:\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: virtual-svc\nspec:\n  hosts:\n  - ext-host.example.com\n  gateways:\n  - ext-host-gwy\nYou can then configure the virtual service with routing rules for the external\ntraffic.\nService entries\nYou use a\nservice entry\nto add\nan entry to the service registry that Istio maintains internally. After you add\nthe service entry, the Envoy proxies can send traffic to the service as if it\nwas a service in your mesh. Configuring service entries allows you to manage\ntraffic for services running outside of the mesh, including the following tasks:\nRedirect and forward traffic for external destinations, such as APIs\nconsumed from the web, or traffic to services in legacy infrastructure.\nDefine\nretry\n,\ntimeout\n, and\nfault injection\npolicies for external destinations.\nRun a mesh service in a Virtual Machine (VM) by\nadding VMs to your mesh\n.\nYou don’t need to add a service entry for every external service that you want\nyour mesh services to use. By default, Istio configures the Envoy proxies to\npassthrough requests to unknown services. However, you can’t use Istio features\nto control the traffic to destinations that aren’t registered in the mesh.\nService entry example\nThe following example mesh-external service entry adds the\next-svc.example.com\nexternal dependency to Istio’s service registry:\napiVersion: networking.istio.io/v1\nkind: ServiceEntry\nmetadata:\n  name: svc-entry\nspec:\n  hosts:\n  - ext-svc.example.com\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  location: MESH_EXTERNAL\n  resolution: DNS\nYou specify the external resource using the\nhosts\nfield. You can qualify it\nfully or use a wildcard prefixed domain name.\nYou can configure virtual services and destination rules to control traffic to a\nservice entry in a more granular way, in the same way you configure traffic for\nany other service in the mesh. For example, the following destination rule\nadjusts the TCP connection timeout for requests to the\next-svc.example.com\nexternal service that we configured using the service entry:\napiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: ext-res-dr\nspec:\n  host: ext-svc.example.com\n  trafficPolicy:\n    connectionPool:\n      tcp:\n        connectTimeout: 1s\nSee the\nService Entry reference\nfor more possible configuration options.\nSidecars\nBy default, Istio configures every Envoy proxy to accept traffic on all the\nports of its associated workload, and to reach every workload in the mesh when\nforwarding traffic. You can use a\nsidecar\nconfiguration to do the following:\nFine-tune the set of ports and protocols that an Envoy proxy accepts.\nLimit the set of services that the Envoy proxy can reach.\nYou might want to limit sidecar reachability like this in larger applications,\nwhere having every proxy configured to reach every other service in the mesh can\npotentially affect mesh performance due to high memory usage.\nYou can specify that you want a sidecar configuration to apply to all workloads\nin a particular namespace, or choose specific workloads using a\nworkloadSelector\n. For example, the following sidecar configuration configures\nall services in the\nbookinfo\nnamespace to only reach services running in the\nsame namespace and the Istio control plane (needed by Istio’s\negress and telemetry features):\napiVersion: networking.istio.io/v1\nkind: Sidecar\nmetadata:\n  name: default\n  namespace: bookinfo\nspec:\n  egress:\n  - hosts:\n    - \"./*\"\n    - \"istio-system/*\"\nSee the\nSidecar reference\nfor more details.\nNetwork resilience and testing\nAs well as helping you direct traffic around your mesh, Istio provides opt-in\nfailure recovery and fault injection features that you can configure dynamically\nat runtime. Using these features helps your applications operate reliably,\nensuring that the service mesh can tolerate failing nodes and preventing\nlocalized failures from cascading to other nodes.\nTimeouts\nA timeout is the amount of time that an Envoy proxy should wait for replies from\na given service, ensuring that services don’t hang around waiting for replies\nindefinitely and that calls succeed or fail within a predictable timeframe. The\nEnvoy timeout for HTTP requests is disabled in Istio by default.\nFor some applications and services, Istio’s default timeout might not be\nappropriate. For example, a timeout that is too long could result in excessive\nlatency from waiting for replies from failing services, while a timeout that is\ntoo short could result in calls failing unnecessarily while waiting for an\noperation involving multiple services to return. To find and use your optimal timeout\nsettings, Istio lets you easily adjust timeouts dynamically on a per-service\nbasis using\nvirtual services\nwithout having to edit your\nservice code. Here’s a virtual service that specifies a 10 second timeout for\ncalls to the v1 subset of the ratings service:\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n    timeout: 10s\nRetries\nA retry setting specifies the maximum number of times an Envoy proxy attempts to\nconnect to a service if the initial call fails. Retries can enhance service\navailability and application performance by making sure that calls don’t fail\npermanently because of transient problems such as a temporarily overloaded\nservice or network. The interval between retries (25ms+) is variable and\ndetermined automatically by Istio, preventing the called service from being\noverwhelmed with requests. The default retry behavior for HTTP requests is to\nretry twice before returning the error.\nLike timeouts, Istio’s default retry behavior might not suit your application\nneeds in terms of latency (too many retries to a failed service can slow things\ndown) or availability. Also like timeouts, you can adjust your retry settings on\na per-service basis in\nvirtual services\nwithout having to\ntouch your service code. You can also further refine your retry behavior by\nadding per-retry timeouts, specifying the amount of time you want to wait for\neach retry attempt to successfully connect to the service. The following example\nconfigures a maximum of 3 retries to connect to this service subset after an\ninitial call failure, each with a 2 second timeout.\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n    retries:\n      attempts: 3\n      perTryTimeout: 2s\nCircuit breakers\nCircuit breakers are another useful mechanism Istio provides for creating\nresilient microservice-based applications. In a circuit breaker, you set limits\nfor calls to individual hosts within a service, such as the number of concurrent\nconnections or how many times calls to this host have failed. Once that limit\nhas been reached the circuit breaker “trips” and stops further connections to\nthat host. Using a circuit breaker pattern enables fast failure rather than\nclients trying to connect to an overloaded or failing host.\nAs circuit breaking applies to “real” mesh destinations in a load balancing\npool, you configure circuit breaker thresholds in\ndestination rules\n, with the settings applying to each\nindividual host in the service. The following example limits the number of\nconcurrent connections for the\nreviews\nservice workloads of the v1 subset to\n100:\napiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n    trafficPolicy:\n      connectionPool:\n        tcp:\n          maxConnections: 100\nYou can find out more about creating circuit breakers in\nCircuit Breaking\n.\nFault injection\nAfter you’ve configured your network, including failure recovery policies, you\ncan use Istio’s fault injection mechanisms to test the failure recovery capacity\nof your application as a whole. Fault injection is a testing method that\nintroduces errors into a system to ensure that it can withstand and recover from\nerror conditions. Using fault injection can be particularly useful to ensure\nthat your failure recovery policies aren’t incompatible or too restrictive,\npotentially resulting in critical services being unavailable.\nCurrently, the fault injection configuration can not be combined with retry or timeout configuration\non the same virtual service, see\nTraffic Management Problems\n.\nUnlike other mechanisms for introducing errors, such as delaying packets or\nkilling pods at the network layer, Istio lets you inject faults at the\napplication layer. This lets you inject more relevant failures, such as HTTP\nerror codes, to get more relevant results.\nYou can inject two types of faults, both configured using a\nvirtual service\n:\nDelays: Delays are timing failures. They mimic increased network latency or\nan overloaded upstream service.\nAborts: Aborts are crash failures. They mimic failures in upstream services.\nAborts usually manifest in the form of HTTP error codes or TCP connection\nfailures.\nFor example, this virtual service introduces a 5 second delay for 1 out of every 1000\nrequests to the\nratings\nservice.\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault:\n      delay:\n        percentage:\n          value: 0.1\n        fixedDelay: 5s\n    route:\n    - destination:\n        host: ratings\n        subset: v1\nFor detailed instructions on how to configure delays and aborts, see\nFault Injection\n.\nWorking with your applications\nIstio failure recovery features are completely transparent to the\napplication. Applications don’t know if an Envoy sidecar proxy is handling\nfailures for a called service before returning a response. This means that\nif you are also setting failure recovery policies in your application code\nyou need to keep in mind that both work independently, and therefore might\nconflict. For example, suppose you can have two timeouts, one configured in\na virtual service and another in the application. The application sets a 2\nsecond timeout for an API call to a service. However, you configured a 3\nsecond timeout with 1 retry in your virtual service. In this case, the\napplication’s timeout kicks in first, so your Envoy timeout and retry\nattempt has no effect.\nWhile Istio failure recovery features improve the reliability and\navailability of services in the mesh, applications must handle the failure\nor errors and take appropriate fallback actions. For example, when all\ninstances in a load balancing pool have failed, Envoy returns an\nHTTP 503\ncode. The application must implement any fallback logic needed to handle the\nHTTP 503\nerror code.\nSee also\nRouting egress traffic to wildcard destinations\nA generic approach to set up egress gateways that can route traffic to a restricted set of target remote hosts dynamically, including wildcard domains.\nGetting started with the Kubernetes Gateway API\nUsing the Gateway API to configure ingress traffic for your Kubernetes cluster.\nExtending Gateway API support in Istio\nA standard API for service mesh, in Istio and in the broader community.\nDirect encrypted traffic from IBM Cloud Kubernetes Service Ingress to Istio Ingress Gateway\nConfigure the IBM Cloud Kubernetes Service Application Load Balancer to direct traffic to the Istio Ingress gateway with mutual TLS.\nMulticluster Istio configuration and service discovery using Admiral\nAutomating Istio configuration for Istio deployments (clusters) that work as a single mesh.\nIstio as a Proxy for External Services\nConfigure Istio ingress gateway to act as a proxy for external services.\nSecurity\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nIntroducing Istio traffic management\nVirtual services\nWhy use virtual services?\nVirtual service example\nThe hosts field\nRouting rules\nMatch condition\nDestination\nRouting rule precedence\nMore about routing rules\nDestination rules\nLoad balancing options\nDestination rule example\nGateways\nGateway example\nService entries\nService entry example\nSidecars\nNetwork resilience and testing\nTimeouts\nRetries\nCircuit breakers\nFault injection\nWorking with your applications\nSee also",
      "code_examples": [
        {
          "language": "",
          "code": "monolith.com",
          "element": "<code>monolith.com</code>"
        },
        {
          "language": "",
          "code": "microservice A",
          "element": "<code>microservice A</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v3",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - matc..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v3",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n  ..."
        },
        {
          "language": "",
          "code": "hosts:\n- reviews",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">hosts:\n- reviews</code></pre>"
        },
        {
          "language": "language-yaml",
          "code": "hosts:\n- reviews",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">hosts:\n- reviews</code>"
        },
        {
          "language": "",
          "code": "- match:\n   - headers:\n       end-user:\n         exact: jason",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">- match:\n   - headers:\n       end-user:\n         exact: jason</code></pre>"
        },
        {
          "language": "language-yaml",
          "code": "- match:\n   - headers:\n       end-user:\n         exact: jason",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">- match:\n   - headers:\n       end-user:\n         exact: jason</code>"
        },
        {
          "language": "",
          "code": "destination",
          "element": "<code>destination</code>"
        },
        {
          "language": "",
          "code": "route:\n- destination:\n    host: reviews\n    subset: v2",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">route:\n- destination:\n    host: reviews\n    subset: v2</code></pre>"
        },
        {
          "language": "language-yaml",
          "code": "route:\n- destination:\n    host: reviews\n    subset: v2",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">route:\n- destination:\n    host: reviews\n    subset: v2</code>"
        },
        {
          "language": "",
          "code": "- route:\n  - destination:\n      host: reviews\n      subset: v3",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">- route:\n  - destination:\n      host: reviews\n      subset: v3</code></pre>"
        },
        {
          "language": "language-yaml",
          "code": "- route:\n  - destination:\n      host: reviews\n      subset: v3",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">- route:\n  - destination:\n      host: reviews\n      subset: v3</code>"
        },
        {
          "language": "",
          "code": "http://bookinfo.com/.",
          "element": "<code>http://bookinfo.com/.</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: bookinfo\nspec:\n  hosts:\n    - bookinfo.com\n  http:\n  - match:\n    - uri:\n        prefix: /reviews\n    route:\n    - destination:\n        host: reviews\n  - match:\n    - uri:\n        prefix: /ratings\n    route:\n    - destination:\n        host: ratings",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: bookinfo\nspec:\n  hosts:\n    - bookinfo.com\n  http:\n..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: bookinfo\nspec:\n  hosts:\n    - bookinfo.com\n  http:\n  - match:\n    - uri:\n        prefix: /reviews\n    route:\n    - destination:\n        host: reviews\n  - match:\n    - uri:\n        prefix: /ratings\n    route:\n    - destination:\n        host: ratings",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: bookinfo\nspec:\n  hosts:\n    - bookinfo.com\n  http:\n  - m..."
        },
        {
          "language": "",
          "code": "HTTPMatchRequest",
          "element": "<code>HTTPMatchRequest</code>"
        },
        {
          "language": "",
          "code": "spec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 75\n    - destination:\n        host: reviews\n        subset: v2\n      weight: 25",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">spec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 75\n  ..."
        },
        {
          "language": "language-yaml",
          "code": "spec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 75\n    - destination:\n        host: reviews\n        subset: v2\n      weight: 25",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">spec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 75\n    - d..."
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: my-destination-rule\nspec:\n  host: my-svc\n  trafficPolicy:\n    loadBalancer:\n      simple: RANDOM\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n    trafficPolicy:\n      loadBalancer:\n        simple: ROUND_ROBIN\n  - name: v3\n    labels:\n      version: v3",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: my-destination-rule\nspec:\n  host: my-svc\n  traffic..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: my-destination-rule\nspec:\n  host: my-svc\n  trafficPolicy:\n    loadBalancer:\n      simple: RANDOM\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n    trafficPolicy:\n      loadBalancer:\n        simple: ROUND_ROBIN\n  - name: v3\n    labels:\n      version: v3",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: my-destination-rule\nspec:\n  host: my-svc\n  trafficPolic..."
        },
        {
          "language": "",
          "code": "istio-ingressgateway",
          "element": "<code>istio-ingressgateway</code>"
        },
        {
          "language": "",
          "code": "istio-egressgateway",
          "element": "<code>istio-egressgateway</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: Gateway\nmetadata:\n  name: ext-host-gwy\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    hosts:\n    - ext-host.example.com\n    tls:\n      mode: SIMPLE\n      credentialName: ext-host-cert",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: Gateway\nmetadata:\n  name: ext-host-gwy\nspec:\n  selector:\n    app: my-gateway-control..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: Gateway\nmetadata:\n  name: ext-host-gwy\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    hosts:\n    - ext-host.example.com\n    tls:\n      mode: SIMPLE\n      credentialName: ext-host-cert",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: Gateway\nmetadata:\n  name: ext-host-gwy\nspec:\n  selector:\n    app: my-gateway-controller\n ..."
        },
        {
          "language": "",
          "code": "ext-host.example.com",
          "element": "<code>ext-host.example.com</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: virtual-svc\nspec:\n  hosts:\n  - ext-host.example.com\n  gateways:\n  - ext-host-gwy",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: virtual-svc\nspec:\n  hosts:\n  - ext-host.example.com..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: virtual-svc\nspec:\n  hosts:\n  - ext-host.example.com\n  gateways:\n  - ext-host-gwy",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: virtual-svc\nspec:\n  hosts:\n  - ext-host.example.com\n  ga..."
        },
        {
          "language": "",
          "code": "ext-svc.example.com",
          "element": "<code>ext-svc.example.com</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: ServiceEntry\nmetadata:\n  name: svc-entry\nspec:\n  hosts:\n  - ext-svc.example.com\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  location: MESH_EXTERNAL\n  resolution: DNS",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: ServiceEntry\nmetadata:\n  name: svc-entry\nspec:\n  hosts:\n  - ext-svc.example.com\n  po..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: ServiceEntry\nmetadata:\n  name: svc-entry\nspec:\n  hosts:\n  - ext-svc.example.com\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  location: MESH_EXTERNAL\n  resolution: DNS",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: ServiceEntry\nmetadata:\n  name: svc-entry\nspec:\n  hosts:\n  - ext-svc.example.com\n  ports:\n..."
        },
        {
          "language": "",
          "code": "ext-svc.example.com",
          "element": "<code>ext-svc.example.com</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: ext-res-dr\nspec:\n  host: ext-svc.example.com\n  trafficPolicy:\n    connectionPool:\n      tcp:\n        connectTimeout: 1s",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: ext-res-dr\nspec:\n  host: ext-svc.example.com\n  tra..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: ext-res-dr\nspec:\n  host: ext-svc.example.com\n  trafficPolicy:\n    connectionPool:\n      tcp:\n        connectTimeout: 1s",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: ext-res-dr\nspec:\n  host: ext-svc.example.com\n  trafficP..."
        },
        {
          "language": "",
          "code": "workloadSelector",
          "element": "<code>workloadSelector</code>"
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: Sidecar\nmetadata:\n  name: default\n  namespace: bookinfo\nspec:\n  egress:\n  - hosts:\n    - \"./*\"\n    - \"istio-system/*\"",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: Sidecar\nmetadata:\n  name: default\n  namespace: bookinfo\nspec:\n  egress:\n  - hosts:\n ..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: Sidecar\nmetadata:\n  name: default\n  namespace: bookinfo\nspec:\n  egress:\n  - hosts:\n    - \"./*\"\n    - \"istio-system/*\"",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: Sidecar\nmetadata:\n  name: default\n  namespace: bookinfo\nspec:\n  egress:\n  - hosts:\n    - ..."
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n    timeout: 10s",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - rout..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n    timeout: 10s",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n  ..."
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n    retries:\n      attempts: 3\n      perTryTimeout: 2s",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - rout..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n    retries:\n      attempts: 3\n      perTryTimeout: 2s",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - route:\n  ..."
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n    trafficPolicy:\n      connectionPool:\n        tcp:\n          maxConnections: 100",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name:..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n    trafficPolicy:\n      connectionPool:\n        tcp:\n          maxConnections: 100",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n ..."
        },
        {
          "language": "",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault:\n      delay:\n        percentage:\n          value: 0.1\n        fixedDelay: 5s\n    route:\n    - destination:\n        host: ratings\n        subset: v1",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - faul..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault:\n      delay:\n        percentage:\n          value: 0.1\n        fixedDelay: 5s\n    route:\n    - destination:\n        host: ratings\n        subset: v1",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault:\n  ..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Traffic Management",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Introducing Istio traffic management",
          "id": "introducing-istio-traffic-management"
        },
        {
          "level": 2,
          "text": "Virtual services",
          "id": "virtual-services"
        },
        {
          "level": 2,
          "text": "Destination rules",
          "id": "destination-rules"
        },
        {
          "level": 2,
          "text": "Gateways",
          "id": "gateways"
        },
        {
          "level": 2,
          "text": "Service entries",
          "id": "service-entries"
        },
        {
          "level": 2,
          "text": "Sidecars",
          "id": "sidecars"
        },
        {
          "level": 2,
          "text": "Network resilience and testing",
          "id": "network-resilience-and-testing"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 3,
          "text": "Why use virtual services?",
          "id": "why-use-virtual-services"
        },
        {
          "level": 3,
          "text": "Virtual service example",
          "id": "virtual-service-example"
        },
        {
          "level": 3,
          "text": "More about routing rules",
          "id": "more-about-routing-rules"
        },
        {
          "level": 3,
          "text": "Load balancing options",
          "id": "load-balancing-options"
        },
        {
          "level": 3,
          "text": "Destination rule example",
          "id": "destination-rule-example"
        },
        {
          "level": 3,
          "text": "Gateway example",
          "id": "gateway-example"
        },
        {
          "level": 3,
          "text": "Service entry example",
          "id": "service-entry-example"
        },
        {
          "level": 3,
          "text": "Timeouts",
          "id": "timeouts"
        },
        {
          "level": 3,
          "text": "Retries",
          "id": "retries"
        },
        {
          "level": 3,
          "text": "Circuit breakers",
          "id": "circuit-breakers"
        },
        {
          "level": 3,
          "text": "Fault injection",
          "id": "fault-injection"
        },
        {
          "level": 3,
          "text": "Working with your applications",
          "id": "working-with-your-applications"
        },
        {
          "level": 4,
          "text": "The hosts field",
          "id": "the-hosts-field"
        },
        {
          "level": 4,
          "text": "Routing rules",
          "id": "routing-rules"
        },
        {
          "level": 4,
          "text": "Routing rule precedence",
          "id": "routing-rule-precedence"
        },
        {
          "level": 5,
          "text": "Match condition",
          "id": "match-condition"
        },
        {
          "level": 5,
          "text": "Destination",
          "id": "destination"
        }
      ],
      "timestamp": 1750732103.5521212
    },
    {
      "url": "https://istio.io/latest/docs/concepts/security/",
      "title": "Istio / Security",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nConcepts\nSecurity\nSecurity\n23 minute read\nHigh-level architecture\nIstio identity\nIdentity and certificate management\nAuthentication\nMutual TLS authentication\nPermissive mode\nSecure naming\nAuthentication architecture\nAuthentication policies\nPolicy storage\nSelector field\nPeer authentication\nRequest authentication\nPrincipals\nUpdating authentication policies\nAuthorization\nAuthorization architecture\nImplicit enablement\nAuthorization policies\nPolicy Target\nValue matching\nExclusion matching\nallow-nothing\n,\ndeny-all\nand\nallow-all\npolicy\nCustom conditions\nAuthenticated and unauthenticated identity\nUsing Istio authorization on plain TCP protocols\nDependency on mutual TLS\nLearn more\nSee also\nBreaking down a monolithic application into atomic services offers various\nbenefits, including better agility, better scalability and better ability to\nreuse services. However, microservices also have particular security needs:\nTo defend against man-in-the-middle attacks, they need traffic encryption.\nTo provide flexible service access control, they need mutual TLS and\nfine-grained access policies.\nTo determine who did what at what time, they need auditing tools.\nIstio Security provides a comprehensive security solution to solve these issues.\nThis page gives an overview on how you can use Istio security features to secure\nyour services, wherever you run them. In particular, Istio security mitigates\nboth insider and external threats against your data, endpoints, communication,\nand platform.\nSecurity overview\nThe Istio security features provide strong identity, powerful policy,\ntransparent TLS encryption, and authentication, authorization and audit (AAA)\ntools to protect your services and data. The goals of Istio security are:\nSecurity by default: no changes needed to application code and\ninfrastructure\nDefense in depth: integrate with existing security systems to provide\nmultiple layers of defense\nZero-trust network: build security solutions on distrusted networks\nVisit our\nmutual TLS Migration docs\nto start using Istio security features with your deployed services. Visit our\nSecurity Tasks\nfor detailed\ninstructions to use the security features.\nHigh-level architecture\nSecurity in Istio involves multiple components:\nA Certificate Authority (CA) for key and certificate management\nThe configuration API server distributes to the proxies:\nauthentication policies\nauthorization policies\nsecure naming information\nSidecar and perimeter proxies work as\nPolicy Enforcement Points\n(PEPs) to secure communication between clients and servers.\nA set of Envoy proxy extensions to manage telemetry and auditing\nThe control plane handles configuration from the API server and\nconfigures the PEPs in the data plane. The PEPs are implemented using Envoy. The\nfollowing diagram shows the architecture.\nSecurity Architecture\nIn the following sections, we introduce the Istio security features in detail.\nIstio identity\nIdentity is a fundamental concept of any security infrastructure. At the\nbeginning of a workload-to-workload communication, the two parties must exchange\ncredentials with their identity information for mutual authentication purposes.\nOn the client side, the server’s identity is checked against the\nsecure naming\ninformation to see if it is an authorized runner of the workload. On the server\nside, the server can determine what information the client can access based on\nthe\nauthorization policies\n,\naudit who accessed what at what time, charge clients based on the workloads they\nused, and reject any clients who failed to pay their bill from accessing the\nworkloads.\nThe Istio identity model uses the first-class\nservice identity\nto\ndetermine the identity of a request’s origin. This model allows for great\nflexibility and granularity for service identities to represent a human user, an\nindividual workload, or a group of workloads. On platforms without a service\nidentity, Istio can use other identities that can group workload\ninstances, such as service names.\nThe following list shows examples of service identities that you can use on different\nplatforms:\nKubernetes: Kubernetes service account\nGCE: GCP service account\nOn-premises (non-Kubernetes): user account, custom service account,\nservice name, Istio service account, or GCP service account. The custom\nservice account refers to the existing service account just like the\nidentities that the customer’s Identity Directory manages.\nIdentity and certificate management\nIstio securely provisions strong identities\nto every workload with X.509 certificates. Istio agents, running alongside each Envoy proxy,\nwork together with\nistiod\nto automate key and certificate\nrotation at scale. The following diagram shows the identity\nprovisioning flow.\nIdentity Provisioning Workflow\nIstio provisions keys and certificates through the following flow:\nistiod\noffers a gRPC service to take\ncertificate signing requests\n(CSRs).\nWhen started, the Istio agent creates the private key\nand CSR, and then sends the CSR with its credentials to\nistiod\nfor signing.\nThe CA in\nistiod\nvalidates the credentials carried in the CSR.\nUpon successful validation, it signs the CSR to generate the certificate.\nWhen a workload is started, Envoy requests the certificate and key from the Istio agent in the\nsame container via the\nEnvoy secret discovery service (SDS)\nAPI.\nThe Istio agent sends the certificates received from\nistiod\nand the\nprivate key to Envoy via the Envoy SDS API.\nIstio agent monitors the expiration of the workload certificate.\nThe above process repeats periodically for certificate and key rotation.\nAuthentication\nIstio provides two types of authentication:\nPeer authentication: used for service-to-service authentication to verify\nthe client making the connection. Istio offers\nmutual\nTLS\nas a full stack\nsolution for transport authentication, which can be enabled without\nrequiring service code changes. This solution:\nProvides each service with a strong identity representing its role\nto enable interoperability across clusters and clouds.\nSecures service-to-service communication.\nProvides a key management system to automate key and certificate\ngeneration, distribution, and rotation.\nRequest authentication: Used for end-user authentication to verify the\ncredential attached to the request. Istio enables request-level\nauthentication with JSON Web Token (JWT) validation and a streamlined\ndeveloper experience using a custom authentication provider or any OpenID\nConnect providers, for example:\nORY Hydra\nKeycloak\nAuth0\nFirebase Auth\nGoogle Auth\nIn all cases, Istio stores the authentication policies in the\nIstio config store\nvia a custom Kubernetes API.\nIstiod\nkeeps them up-to-date for each proxy,\nalong with the keys where appropriate. Additionally, Istio supports\nauthentication in permissive mode to help you understand how a policy change can\naffect your security posture before it is enforced.\nMutual TLS authentication\nIstio tunnels service-to-service communication through the client- and\nserver-side PEPs, which are implemented as\nEnvoy\nproxies\n. When a workload sends a request\nto another workload using mutual TLS authentication, the request is handled as\nfollows:\nIstio re-routes the outbound traffic from a client to the client’s local\nsidecar Envoy.\nThe client side Envoy starts a mutual TLS handshake with the server side\nEnvoy. During the handshake, the client side Envoy also does a\nsecure naming\ncheck to verify that the service account presented in the server certificate\nis authorized to run the target service.\nThe client side Envoy and the server side Envoy establish a mutual TLS\nconnection, and Istio forwards the traffic from the client side Envoy to the\nserver side Envoy.\nThe server side Envoy authorizes the request. If authorized, it forwards the traffic to the\nbackend service through local TCP connections.\nIstio configures\nTLSv1_2\nas the minimum TLS version for both client and server with\nthe following cipher suites:\nECDHE-ECDSA-AES256-GCM-SHA384\nECDHE-RSA-AES256-GCM-SHA384\nECDHE-ECDSA-AES128-GCM-SHA256\nECDHE-RSA-AES128-GCM-SHA256\nAES256-GCM-SHA384\nAES128-GCM-SHA256\nPermissive mode\nIstio mutual TLS has a permissive mode, which allows a service to accept both\nplaintext traffic and mutual TLS traffic at the same time. This feature greatly\nimproves the mutual TLS onboarding experience.\nMany non-Istio clients communicating with a non-Istio server presents a problem\nfor an operator who wants to migrate that server to Istio with mutual TLS\nenabled. Commonly, the operator cannot install an Istio sidecar for all clients\nat the same time or does not even have the permissions to do so on some clients.\nEven after installing the Istio sidecar on the server, the operator cannot\nenable mutual TLS without breaking existing communications.\nWith the permissive mode enabled, the server accepts both plaintext and mutual\nTLS traffic. The mode provides greater flexibility for the on-boarding process.\nThe server’s installed Istio sidecar takes mutual TLS traffic immediately\nwithout breaking existing plaintext traffic. As a result, the operator can\ngradually install and configure the client’s Istio sidecars to send mutual TLS\ntraffic. Once the configuration of the clients is complete, the operator can\nconfigure the server to mutual TLS only mode. For more information, visit the\nMutual TLS Migration tutorial\n.\nSecure naming\nServer identities are encoded in certificates, but service names are retrieved\nthrough the discovery service or DNS. The secure naming information maps the\nserver identities to the service names. A mapping of identity\nA\nto service\nname\nB\nmeans “\nA\nis authorized to run service\nB\n”. The control plane watches\nthe\napiserver\n, generates the secure naming mappings, and distributes them\nsecurely to the PEPs. The following example explains why secure naming is\ncritical in authentication.\nSuppose the legitimate servers that run the service\ndatastore\nonly use the\ninfra-team\nidentity. A malicious user has the certificate and key for the\ntest-team\nidentity. The malicious user intends to impersonate the service to\ninspect the data sent from the clients. The malicious user deploys a forged\nserver with the certificate and key for the\ntest-team\nidentity. Suppose the\nmalicious user successfully hijacked (through DNS spoofing, BGP/route hijacking,\nARP spoofing, etc.) the traffic sent to the\ndatastore\nand redirected it to the\nforged server.\nWhen a client calls the\ndatastore\nservice, it extracts the\ntest-team\nidentity from the server’s certificate, and checks whether\ntest-team\nis\nallowed to run\ndatastore\nwith the secure naming information. The client\ndetects that\ntest-team\nis not allowed to run the\ndatastore\nservice and the\nauthentication fails.\nNote that, for non HTTP/HTTPS traffic, secure naming doesn’t protect from DNS spoofing,\nin which case the attacker modifies the destination IPs for the service.\nSince TCP traffic does not contain\nHost\ninformation and Envoy can only\nrely on the destination IP for routing, Envoy may route traffic to\nservices on the hijacked IPs. This DNS spoofing can happen even\nbefore the client-side Envoy receives the traffic.\nAuthentication architecture\nYou can specify authentication requirements for workloads receiving requests in\nan Istio mesh using peer and request authentication policies. The mesh operator\nuses\n.yaml\nfiles to specify the policies. The policies are saved in the Istio\nconfiguration storage once deployed. The Istio controller watches the\nconfiguration storage.\nUpon any policy changes, the new policy is translated to the appropriate\nconfiguration telling the PEP how to perform the required authentication\nmechanisms. The control plane may fetch the public key and attach it to the\nconfiguration for JWT validation. Alternatively, Istiod provides the path to the\nkeys and certificates the Istio system manages and installs them to the\napplication pod for mutual TLS. You can find more info in the\nIdentity and certificate management section\n.\nIstio sends configurations to the targeted endpoints asynchronously. Once the\nproxy receives the configuration, the new authentication requirement takes\neffect immediately on that pod.\nClient services, those that send requests, are responsible for following the\nnecessary authentication mechanism. For request authentication, the application is\nresponsible for acquiring and attaching the JWT credential to the request. For\npeer authentication, Istio automatically upgrades all traffic between two PEPs to mutual\nTLS. If authentication policies disable mutual TLS mode, Istio continues to use\nplain text between PEPs. To override this behavior explicitly disable mutual\nTLS mode with\ndestination rules\n.\nYou can find out more about how mutual TLS works in the\nMutual TLS authentication section\n.\nAuthentication Architecture\nIstio outputs identities with both types of authentication, as well as other\nclaims in the credential if applicable, to the next layer:\nauthorization\n.\nAuthentication policies\nThis section provides more details about how Istio authentication policies work.\nAs you’ll remember from the\nArchitecture section\n,\nauthentication policies apply to requests that a service receives. To specify\nclient-side authentication rules in mutual TLS, you need to specify the\nTLSSettings\nin the\nDestinationRule\n. You can find more information in our\nTLS settings reference docs\n.\nLike other Istio configurations, you can specify authentication policies in\n.yaml\nfiles. You deploy policies using\nkubectl\n.\nThe following example authentication policy specifies that transport\nauthentication for the workloads with the\napp:reviews\nlabel must use mutual\nTLS:\napiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-peer-policy\"\n  namespace: \"foo\"\nspec:\n  selector:\n    matchLabels:\n      app: reviews\n  mtls:\n    mode: STRICT\nPolicy storage\nIstio stores mesh-scope policies in the root namespace. These policies have an\nempty selector apply to all workloads in the mesh. Policies that have a\nnamespace scope are stored in the corresponding namespace. They only apply to\nworkloads within their namespace. If you configure a\nselector\nfield, the\nauthentication policy only applies to workloads matching the conditions you\nconfigured.\nPeer and request authentication policies are stored separately by kind,\nPeerAuthentication\nand\nRequestAuthentication\nrespectively.\nSelector field\nPeer and request authentication policies use\nselector\nfields to specify the\nlabel of the workloads to which the policy applies. The following example shows\nthe selector field of a policy that applies to workloads with the\napp:product-page\nlabel:\nselector:\n  matchLabels:\n    app: product-page\nIf you don’t provide a value for the\nselector\nfield, Istio matches the policy\nto all workloads in the storage scope of the policy. Thus, the\nselector\nfields\nhelp you specify the scope of the policies:\nMesh-wide policy: A policy specified for the root namespace without or\nwith an empty\nselector\nfield.\nNamespace-wide policy: A policy specified for a non-root namespace without\nor with an empty\nselector\nfield.\nWorkload-specific policy: a policy defined in the regular namespace, with\nnon-empty selector field.\nPeer and request authentication policies follow the same hierarchy principles\nfor the\nselector\nfields, but Istio combines and applies them in slightly\ndifferent ways.\nThere can be only one mesh-wide peer authentication policy, and only one\nnamespace-wide peer authentication policy per namespace. When you configure\nmultiple mesh- or namespace-wide peer authentication policies for the same mesh\nor namespace, Istio ignores the newer policies. When more than one\nworkload-specific peer authentication policy matches, Istio picks the oldest\none.\nIstio applies the narrowest matching policy for each workload using the\nfollowing order:\nworkload-specific\nnamespace-wide\nmesh-wide\nIstio can combine all matching request authentication policies to work as if\nthey come from a single request authentication policy. Thus, you can have\nmultiple mesh-wide or namespace-wide policies in a mesh or namespace. However,\nit is still a good practice to avoid having multiple mesh-wide or namespace-wide\nrequest authentication policies.\nPeer authentication\nPeer authentication policies specify the mutual TLS mode Istio enforces on\ntarget workloads. The following modes are supported:\nPERMISSIVE: Workloads accept both mutual TLS and plain text traffic. This\nmode is most useful during migrations when workloads without sidecar cannot\nuse mutual TLS. Once workloads are migrated with sidecar injection, you should\nswitch the mode to STRICT.\nSTRICT: Workloads only accept mutual TLS traffic.\nDISABLE: Mutual TLS is disabled. From a security perspective, you\nshouldn’t use this mode unless you provide your own security solution.\nWhen the mode is unset, the mode of the parent scope is inherited. Mesh-wide\npeer authentication policies with an unset mode use the\nPERMISSIVE\nmode by\ndefault.\nThe following peer authentication policy requires all workloads in namespace\nfoo\nto use mutual TLS:\napiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-policy\"\n  namespace: \"foo\"\nspec:\n  mtls:\n    mode: STRICT\nWith workload-specific peer authentication policies, you can specify different\nmutual TLS modes for different ports. You can only use ports that workloads have\nclaimed for port-wide mutual TLS configuration. The following example disables\nmutual TLS on port\n80\nfor the\napp:example-app\nworkload, and uses the mutual TLS\nsettings of the namespace-wide peer authentication policy for all other ports:\napiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-workload-policy\"\n  namespace: \"foo\"\nspec:\n  selector:\n     matchLabels:\n       app: example-app\n  portLevelMtls:\n    80:\n      mode: DISABLE\nThe peer authentication policy above works only because the service\nconfiguration below bound the requests from the\nexample-app\nworkload to port\n80\nof the\nexample-service\n:\napiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\n  namespace: foo\nspec:\n  ports:\n  - name: http\n    port: 8000\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: example-app\nRequest authentication\nRequest authentication policies specify the values needed to validate a JSON Web\nToken (JWT). These values include, among others, the following:\nThe location of the token in the request\nThe issuer or the request\nThe public JSON Web Key Set (JWKS)\nIstio checks the presented token, if presented against the rules in the request\nauthentication policy, and rejects requests with invalid tokens. When requests\ncarry no token, they are accepted by default. To reject requests without tokens,\nprovide authorization rules that specify the restrictions for specific\noperations, for example paths or actions.\nRequest authentication policies can specify more than one JWT if each uses a\nunique location. When more than one policy matches a workload, Istio combines\nall rules as if they were specified as a single policy. This behavior is useful\nto program workloads to accept JWT from different providers. However, requests\nwith more than one valid JWT are not supported because the output principal of\nsuch requests is undefined.\nPrincipals\nWhen you use peer authentication policies and mutual TLS, Istio extracts the\nidentity from the peer authentication into the\nsource.principal\n. Similarly,\nwhen you use request authentication policies, Istio assigns the identity from\nthe JWT to the\nrequest.auth.principal\n. Use these principals to set\nauthorization policies and as telemetry output.\nUpdating authentication policies\nYou can change an authentication policy at any time and Istio pushes the new\npolicies to the workloads almost in real time. However, Istio can’t guarantee\nthat all workloads receive the new policy at the same time. The following\nrecommendations help avoid disruption when updating your authentication\npolicies:\nUse intermediate peer authentication policies using the\nPERMISSIVE\nmode\nwhen changing the mode from\nDISABLE\nto\nSTRICT\nand vice-versa. When all\nworkloads switch successfully to the desired mode, you can apply the policy\nwith the final mode. You can use Istio telemetry to verify that workloads\nhave switched successfully.\nWhen migrating request authentication policies from one JWT to another, add\nthe rule for the new JWT to the policy without removing the old rule.\nWorkloads then accept both types of JWT, and you can remove the old rule\nwhen all traffic switches to the new JWT. However, each JWT has to use a\ndifferent location.\nAuthorization\nIstio’s authorization features provide mesh-, namespace-, and workload-wide\naccess control for your workloads in the mesh. This level of control provides\nthe following benefits:\nWorkload-to-workload and end-user-to-workload authorization.\nA simple API: it includes a single\nAuthorizationPolicy\nCRD\n,\nwhich is easy to use and maintain.\nFlexible semantics: operators can define custom conditions on Istio attributes, and use CUSTOM, DENY and ALLOW actions.\nHigh performance: Istio authorization (\nALLOW\nand\nDENY\n) is enforced natively on Envoy.\nHigh compatibility: supports gRPC, HTTP, HTTPS and HTTP/2 natively, as well as any plain TCP protocols.\nAuthorization architecture\nThe authorization policy enforces access control to the inbound traffic in the\nserver side Envoy proxy. Each Envoy proxy runs an authorization engine that authorizes requests at\nruntime. When a request comes to the proxy, the authorization engine evaluates\nthe request context against the current authorization policies, and returns the\nauthorization result, either\nALLOW\nor\nDENY\n. Operators specify Istio\nauthorization policies using\n.yaml\nfiles.\nAuthorization Architecture\nImplicit enablement\nYou don’t need to explicitly enable Istio’s authorization features; they are available after installation.\nTo enforce access control to your workloads, you apply an authorization policy.\nFor workloads without authorization policies applied, Istio allows all requests.\nAuthorization policies support\nALLOW\n,\nDENY\nand\nCUSTOM\nactions. You can apply multiple policies, each with a\ndifferent action, as needed to secure access to your workloads.\nIstio checks for matching policies in layers, in this order:\nCUSTOM\n,\nDENY\n, and then\nALLOW\n. For each type of action,\nIstio first checks if there is a policy with the action applied, and then checks if the request matches the policy’s\nspecification. If a request doesn’t match a policy in one of the layers, the check continues to the next layer.\nThe following graph shows the policy precedence in detail:\nAuthorization Policy Precedence\nWhen you apply multiple authorization policies to the same workload, Istio applies them additively.\nAuthorization policies\nTo configure an authorization policy, you create an\nAuthorizationPolicy\ncustom resource\n.\nAn authorization policy includes a selector, an action, and a list of rules:\nThe\nselector\nfield specifies the target of the policy\nThe\naction\nfield specifies whether to allow or deny the request\nThe\nrules\nspecify when to trigger the action\nThe\nfrom\nfield in the\nrules\nspecifies the sources of the request\nThe\nto\nfield in the\nrules\nspecifies the operations of the request\nThe\nwhen\nfield specifies the conditions needed to apply the rule\nThe following example shows an authorization policy that allows two sources, the\ncluster.local/ns/default/sa/curl\nservice account and the\ndev\nnamespace, to\naccess the workloads with the\napp: httpbin\nand\nversion: v1\nlabels in the\nfoo\nnamespace when requests sent have a valid JWT token.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/curl\"]\n   - source:\n       namespaces: [\"dev\"]\n   to:\n   - operation:\n       methods: [\"GET\"]\n   when:\n   - key: request.auth.claims[iss]\n     values: [\"https://accounts.google.com\"]\nThe following example shows an authorization policy that denies requests if the\nsource is not the\nfoo\nnamespace:\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin-deny\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: DENY\n rules:\n - from:\n   - source:\n       notNamespaces: [\"foo\"]\nThe deny policy takes precedence over the allow policy. Requests matching allow\npolicies can be denied if they match a deny policy. Istio evaluates deny\npolicies first to ensure that an allow policy can’t bypass a deny policy.\nPolicy Target\nYou can specify a policy’s scope or target with the\nmetadata/namespace\nfield and an optional\nselector\nfield.\nA policy applies to the namespace in the\nmetadata/namespace\nfield. If\nset its value to the root namespace, the policy applies to all namespaces in a\nmesh. The value of the root namespace is configurable, and the default is\nistio-system\n. If set to any other namespace, the policy only applies to the\nspecified namespace.\nYou can use a\nselector\nfield to further restrict policies to apply to specific\nworkloads. The\nselector\nuses labels to select the target workload. The\nselector contains a list of\n{key: value}\npairs, where the\nkey\nis the name of\nthe label. If not set, the authorization policy applies to all workloads in the\nsame namespace as the authorization policy.\nFor example, the\nallow-read\npolicy allows\n\"GET\"\nand\n\"HEAD\"\naccess to the\nworkload with the\napp: products\nlabel in the\ndefault\nnamespace.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-read\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n         methods: [\"GET\", \"HEAD\"]\nValue matching\nMost fields in authorization policies support all the following matching\nschemas:\nExact match: exact string match.\nPrefix match: a string with an ending\n\"*\"\n. For example,\n\"test.abc.*\"\nmatches\n\"test.abc.com\"\n,\n\"test.abc.com.cn\"\n,\n\"test.abc.org\"\n, etc.\nSuffix match: a string with a starting\n\"*\"\n. For example,\n\"*.abc.com\"\nmatches\n\"eng.abc.com\"\n,\n\"test.eng.abc.com\"\n, etc.\nPresence match:\n*\nis used to specify anything but not empty. To specify\nthat a field must be present, use the\nfieldname: [\"*\"]\nformat. This is\ndifferent from leaving a field unspecified, which means match anything,\nincluding empty.\nThere are a few exceptions. For example, the following fields only support exact\nmatch:\nThe\nkey\nfield under the\nwhen\nsection\nThe\nipBlocks\nunder the\nsource\nsection\nThe\nports\nfield under the\nto\nsection\nThe following example policy allows access at paths with the\n/test/*\nprefix\nor the\n*/info\nsuffix.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: tester\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        paths: [\"/test/*\", \"*/info\"]\nExclusion matching\nTo match negative conditions like\nnotValues\nin the\nwhen\nfield,\nnotIpBlocks\nin the\nsource\nfield,\nnotPorts\nin the\nto\nfield, Istio supports exclusion\nmatching.\nThe following example requires a valid request principals, which is derived from\nJWT authentication, if the request path is not\n/healthz\n. Thus, the policy\nexcludes requests to the\n/healthz\npath from the JWT authentication:\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: disable-jwt-for-healthz\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        notPaths: [\"/healthz\"]\n    from:\n    - source:\n        requestPrincipals: [\"*\"]\nThe following example denies the request to the\n/admin\npath for requests\nwithout request principals:\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: enable-jwt-for-admin\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: DENY\n  rules:\n  - to:\n    - operation:\n        paths: [\"/admin\"]\n    from:\n    - source:\n        notRequestPrincipals: [\"*\"]\nallow-nothing\n,\ndeny-all\nand\nallow-all\npolicy\nThe following example shows an\nALLOW\npolicy that matches nothing. If there are no other\nALLOW\npolicies, requests\nwill always be denied because of the “deny by default” behavior.\nNote the “deny by default” behavior applies only if the workload has at least one authorization policy with the\nALLOW\naction.\nIt is a good security practice to start with the\nallow-nothing\npolicy and incrementally add more\nALLOW\npolicies to open more\naccess to the workload.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-nothing\nspec:\n  action: ALLOW\n  # the rules field is not specified, and the policy will never match.\nThe following example shows a\nDENY\npolicy that explicitly denies all access. It will always deny the request even if\nthere is another\nALLOW\npolicy allowing the request because the\nDENY\npolicy takes precedence over the\nALLOW\npolicy.\nThis is useful if you want to temporarily disable all access to the workload.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: deny-all\nspec:\n  action: DENY\n  # the rules field has an empty rule, and the policy will always match.\n  rules:\n  - {}\nThe following example shows an\nALLOW\npolicy that allows full access to the workload. It will make other\nALLOW\npolicies\nuseless as it will always allow the request. It might be useful if you want to temporarily expose full access to the\nworkload. Note the request could still be denied due to\nCUSTOM\nand\nDENY\npolicies.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-all\nspec:\n  action: ALLOW\n  # This matches everything.\n  rules:\n  - {}\nCustom conditions\nYou can also use the\nwhen\nsection to specify additional conditions. For\nexample, the following\nAuthorizationPolicy\ndefinition includes a condition\nthat\nrequest.headers[version]\nis either\n\"v1\"\nor\n\"v2\"\n. In this case, the\nkey is\nrequest.headers[version]\n, which is an entry in the Istio attribute\nrequest.headers\n, which is a map.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/curl\"]\n   to:\n   - operation:\n       methods: [\"GET\"]\n   when:\n   - key: request.headers[version]\n     values: [\"v1\", \"v2\"]\nThe supported\nkey\nvalues of a condition are listed on the\nconditions page\n.\nAuthenticated and unauthenticated identity\nIf you want to make a workload publicly accessible, you need to leave the\nsource\nsection empty. This allows sources from all (both authenticated and\nunauthenticated) users and workloads, for example:\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - to:\n   - operation:\n       methods: [\"GET\", \"POST\"]\nTo allow only authenticated users, set\nprincipals\nto\n\"*\"\ninstead, for\nexample:\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"*\"]\n   to:\n   - operation:\n       methods: [\"GET\", \"POST\"]\nUsing Istio authorization on plain TCP protocols\nIstio authorization supports workloads using any plain TCP protocols, such as\nMongoDB. In this case, you configure the authorization policy in the same way\nyou did for the HTTP workloads. The difference is that certain fields and\nconditions are only applicable to HTTP workloads. These fields include:\nThe\nrequest_principals\nfield in the source section of the authorization policy object\nThe\nhosts\n,\nmethods\nand\npaths\nfields in the operation section of the authorization policy object\nThe supported conditions are listed in the\nconditions page\n.\nIf you use any HTTP only fields for a TCP workload, Istio will ignore HTTP-only\nfields in the authorization policy.\nAssuming you have a MongoDB service on port\n27017\n, the following example\nconfigures an authorization policy to only allows the\nbookinfo-ratings-v2\nservice in the Istio mesh to access the MongoDB workload.\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: mongodb-policy\n  namespace: default\nspec:\n selector:\n   matchLabels:\n     app: mongodb\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/bookinfo-ratings-v2\"]\n   to:\n   - operation:\n       ports: [\"27017\"]\nDependency on mutual TLS\nIstio uses mutual TLS to securely pass some information from the client to the server. Mutual TLS must be enabled before\nusing any of the following fields in the authorization policy:\nthe\nprincipals\nand\nnotPrincipals\nfield under the\nsource\nsection\nthe\nnamespaces\nand\nnotNamespaces\nfield under the\nsource\nsection\nthe\nsource.principal\ncustom condition\nthe\nsource.namespace\ncustom condition\nNote it is strongly recommended to always use these fields with\nstrict\nmutual TLS mode in the\nPeerAuthentication\nto avoid\npotential unexpected requests rejection or policy bypass when plain text traffic is used with the permissive mutual TLS mode.\nCheck the\nsecurity advisory\nfor more details and alternatives if you cannot enable\nstrict mutual TLS mode.\nLearn more\nAfter learning the basic concepts, there are more resources to review:\nTry out the security policy by following the\nauthentication\nand\nauthorization\ntasks.\nLearn some security\npolicy examples\nthat could be\nused to improve security in your mesh.\nRead\ncommon problems\nto better troubleshoot security policy issues\nwhen something goes wrong.\nSee also\nDry Run\nShows how to dry-run an authorization policy without enforcing it.\nExplicit Deny\nShows how to set up access control to deny traffic explicitly.\nExternal Authorization\nShows how to integrate and delegate access control to an external authorization system.\nHTTP Traffic\nShows how to set up access control for HTTP traffic.\nIngress Access Control\nShows how to set up access control on an ingress gateway.\nTCP Traffic\nShows how to set up access control for TCP traffic.\nTraffic Management\nObservability\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nHigh-level architecture\nIstio identity\nIdentity and certificate management\nAuthentication\nMutual TLS authentication\nPermissive mode\nSecure naming\nAuthentication architecture\nAuthentication policies\nPolicy storage\nSelector field\nPeer authentication\nRequest authentication\nPrincipals\nUpdating authentication policies\nAuthorization\nAuthorization architecture\nImplicit enablement\nAuthorization policies\nPolicy Target\nValue matching\nExclusion matching\nallow-nothing\n,\ndeny-all\nand\nallow-all\npolicy\nCustom conditions\nAuthenticated and unauthenticated identity\nUsing Istio authorization on plain TCP protocols\nDependency on mutual TLS\nLearn more\nSee also",
      "code_examples": [
        {
          "language": "",
          "code": "allow-nothing",
          "element": "<code>allow-nothing</code>"
        },
        {
          "language": "",
          "code": "service identity",
          "element": "<code>service identity</code>"
        },
        {
          "language": "",
          "code": "Istio config store",
          "element": "<code>Istio config store</code>"
        },
        {
          "language": "",
          "code": "ECDHE-ECDSA-AES256-GCM-SHA384",
          "element": "<code>ECDHE-ECDSA-AES256-GCM-SHA384</code>"
        },
        {
          "language": "",
          "code": "ECDHE-RSA-AES256-GCM-SHA384",
          "element": "<code>ECDHE-RSA-AES256-GCM-SHA384</code>"
        },
        {
          "language": "",
          "code": "ECDHE-ECDSA-AES128-GCM-SHA256",
          "element": "<code>ECDHE-ECDSA-AES128-GCM-SHA256</code>"
        },
        {
          "language": "",
          "code": "ECDHE-RSA-AES128-GCM-SHA256",
          "element": "<code>ECDHE-RSA-AES128-GCM-SHA256</code>"
        },
        {
          "language": "",
          "code": "AES256-GCM-SHA384",
          "element": "<code>AES256-GCM-SHA384</code>"
        },
        {
          "language": "",
          "code": "AES128-GCM-SHA256",
          "element": "<code>AES128-GCM-SHA256</code>"
        },
        {
          "language": "",
          "code": "TLSSettings",
          "element": "<code>TLSSettings</code>"
        },
        {
          "language": "",
          "code": "DestinationRule",
          "element": "<code>DestinationRule</code>"
        },
        {
          "language": "",
          "code": "app:reviews",
          "element": "<code>app:reviews</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-peer-policy\"\n  namespace: \"foo\"\nspec:\n  selector:\n    matchLabels:\n      app: reviews\n  mtls:\n    mode: STRICT",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-peer-policy\"\n  namespace: \"foo\"\nspec:\n  ..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-peer-policy\"\n  namespace: \"foo\"\nspec:\n  selector:\n    matchLabels:\n      app: reviews\n  mtls:\n    mode: STRICT",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-peer-policy\"\n  namespace: \"foo\"\nspec:\n  selec..."
        },
        {
          "language": "",
          "code": "PeerAuthentication",
          "element": "<code>PeerAuthentication</code>"
        },
        {
          "language": "",
          "code": "RequestAuthentication",
          "element": "<code>RequestAuthentication</code>"
        },
        {
          "language": "",
          "code": "app:product-page",
          "element": "<code>app:product-page</code>"
        },
        {
          "language": "",
          "code": "selector:\n  matchLabels:\n    app: product-page",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">selector:\n  matchLabels:\n    app: product-page</code></pre>"
        },
        {
          "language": "language-yaml",
          "code": "selector:\n  matchLabels:\n    app: product-page",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">selector:\n  matchLabels:\n    app: product-page</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-policy\"\n  namespace: \"foo\"\nspec:\n  mtls:\n    mode: STRICT",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-policy\"\n  namespace: \"foo\"\nspec:\n  mtls:..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-policy\"\n  namespace: \"foo\"\nspec:\n  mtls:\n    mode: STRICT",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-policy\"\n  namespace: \"foo\"\nspec:\n  mtls:\n    ..."
        },
        {
          "language": "",
          "code": "app:example-app",
          "element": "<code>app:example-app</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-workload-policy\"\n  namespace: \"foo\"\nspec:\n  selector:\n     matchLabels:\n       app: example-app\n  portLevelMtls:\n    80:\n      mode: DISABLE",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-workload-policy\"\n  namespace: \"foo\"\nspec..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-workload-policy\"\n  namespace: \"foo\"\nspec:\n  selector:\n     matchLabels:\n       app: example-app\n  portLevelMtls:\n    80:\n      mode: DISABLE",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: \"example-workload-policy\"\n  namespace: \"foo\"\nspec:\n  s..."
        },
        {
          "language": "",
          "code": "example-app",
          "element": "<code>example-app</code>"
        },
        {
          "language": "",
          "code": "example-service",
          "element": "<code>example-service</code>"
        },
        {
          "language": "",
          "code": "apiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\n  namespace: foo\nspec:\n  ports:\n  - name: http\n    port: 8000\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: example-app",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\n  namespace: foo\nspec:\n  ports:\n  - name: http\n    port: 8000\n..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\n  namespace: foo\nspec:\n  ports:\n  - name: http\n    port: 8000\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: example-app",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\n  namespace: foo\nspec:\n  ports:\n  - name: http\n    port: 8000\n    p..."
        },
        {
          "language": "",
          "code": "source.principal",
          "element": "<code>source.principal</code>"
        },
        {
          "language": "",
          "code": "request.auth.principal",
          "element": "<code>request.auth.principal</code>"
        },
        {
          "language": "",
          "code": "AuthorizationPolicy",
          "element": "<code>AuthorizationPolicy</code>"
        },
        {
          "language": "",
          "code": "AuthorizationPolicy",
          "element": "<code>AuthorizationPolicy</code>"
        },
        {
          "language": "",
          "code": "cluster.local/ns/default/sa/curl",
          "element": "<code>cluster.local/ns/default/sa/curl</code>"
        },
        {
          "language": "",
          "code": "app: httpbin",
          "element": "<code>app: httpbin</code>"
        },
        {
          "language": "",
          "code": "version: v1",
          "element": "<code>version: v1</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/curl\"]\n   - source:\n       namespaces: [\"dev\"]\n   to:\n   - operation:\n       methods: [\"GET\"]\n   when:\n   - key: request.auth.claims[iss]\n     values: [\"https://accounts.google.com\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   match..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/curl\"]\n   - source:\n       namespaces: [\"dev\"]\n   to:\n   - operation:\n       methods: [\"GET\"]\n   when:\n   - key: request.auth.claims[iss]\n     values: [\"https://accounts.google.com\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabel..."
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin-deny\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: DENY\n rules:\n - from:\n   - source:\n       notNamespaces: [\"foo\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin-deny\n namespace: foo\nspec:\n selector:\n   ..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin-deny\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: DENY\n rules:\n - from:\n   - source:\n       notNamespaces: [\"foo\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin-deny\n namespace: foo\nspec:\n selector:\n   match..."
        },
        {
          "language": "",
          "code": "metadata/namespace",
          "element": "<code>metadata/namespace</code>"
        },
        {
          "language": "",
          "code": "metadata/namespace",
          "element": "<code>metadata/namespace</code>"
        },
        {
          "language": "",
          "code": "istio-system",
          "element": "<code>istio-system</code>"
        },
        {
          "language": "",
          "code": "{key: value}",
          "element": "<code>{key: value}</code>"
        },
        {
          "language": "",
          "code": "app: products",
          "element": "<code>app: products</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-read\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n         methods: [\"GET\", \"HEAD\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-read\n  namespace: default\nspec:\n  selector..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-read\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n         methods: [\"GET\", \"HEAD\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-read\n  namespace: default\nspec:\n  selector:\n   ..."
        },
        {
          "language": "",
          "code": "\"test.abc.*\"",
          "element": "<code>\"test.abc.*\"</code>"
        },
        {
          "language": "",
          "code": "\"test.abc.com\"",
          "element": "<code>\"test.abc.com\"</code>"
        },
        {
          "language": "",
          "code": "\"test.abc.com.cn\"",
          "element": "<code>\"test.abc.com.cn\"</code>"
        },
        {
          "language": "",
          "code": "\"test.abc.org\"",
          "element": "<code>\"test.abc.org\"</code>"
        },
        {
          "language": "",
          "code": "\"*.abc.com\"",
          "element": "<code>\"*.abc.com\"</code>"
        },
        {
          "language": "",
          "code": "\"eng.abc.com\"",
          "element": "<code>\"eng.abc.com\"</code>"
        },
        {
          "language": "",
          "code": "\"test.eng.abc.com\"",
          "element": "<code>\"test.eng.abc.com\"</code>"
        },
        {
          "language": "",
          "code": "fieldname: [\"*\"]",
          "element": "<code>fieldname: [\"*\"]</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: tester\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        paths: [\"/test/*\", \"*/info\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: tester\n  namespace: default\nspec:\n  selector:\n  ..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: tester\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        paths: [\"/test/*\", \"*/info\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: tester\n  namespace: default\nspec:\n  selector:\n    mat..."
        },
        {
          "language": "",
          "code": "notIpBlocks",
          "element": "<code>notIpBlocks</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: disable-jwt-for-healthz\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        notPaths: [\"/healthz\"]\n    from:\n    - source:\n        requestPrincipals: [\"*\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: disable-jwt-for-healthz\n  namespace: default\nspe..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: disable-jwt-for-healthz\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n        notPaths: [\"/healthz\"]\n    from:\n    - source:\n        requestPrincipals: [\"*\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: disable-jwt-for-healthz\n  namespace: default\nspec:\n  ..."
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: enable-jwt-for-admin\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: DENY\n  rules:\n  - to:\n    - operation:\n        paths: [\"/admin\"]\n    from:\n    - source:\n        notRequestPrincipals: [\"*\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: enable-jwt-for-admin\n  namespace: default\nspec:\n..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: enable-jwt-for-admin\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: products\n  action: DENY\n  rules:\n  - to:\n    - operation:\n        paths: [\"/admin\"]\n    from:\n    - source:\n        notRequestPrincipals: [\"*\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: enable-jwt-for-admin\n  namespace: default\nspec:\n  sel..."
        },
        {
          "language": "",
          "code": "allow-nothing",
          "element": "<code>allow-nothing</code>"
        },
        {
          "language": "",
          "code": "allow-nothing",
          "element": "<code>allow-nothing</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-nothing\nspec:\n  action: ALLOW\n  # the rules field is not specified, and the policy will never match.",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-nothing\nspec:\n  action: ALLOW\n  # the rule..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-nothing\nspec:\n  action: ALLOW\n  # the rules field is not specified, and the policy will never match.",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-nothing\nspec:\n  action: ALLOW\n  # the rules fie..."
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: deny-all\nspec:\n  action: DENY\n  # the rules field has an empty rule, and the policy will always match.\n  rules:\n  - {}",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: deny-all\nspec:\n  action: DENY\n  # the rules fiel..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: deny-all\nspec:\n  action: DENY\n  # the rules field has an empty rule, and the policy will always match.\n  rules:\n  - {}",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: deny-all\nspec:\n  action: DENY\n  # the rules field has..."
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-all\nspec:\n  action: ALLOW\n  # This matches everything.\n  rules:\n  - {}",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-all\nspec:\n  action: ALLOW\n  # This matches..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-all\nspec:\n  action: ALLOW\n  # This matches everything.\n  rules:\n  - {}",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: allow-all\nspec:\n  action: ALLOW\n  # This matches ever..."
        },
        {
          "language": "",
          "code": "AuthorizationPolicy",
          "element": "<code>AuthorizationPolicy</code>"
        },
        {
          "language": "",
          "code": "request.headers[version]",
          "element": "<code>request.headers[version]</code>"
        },
        {
          "language": "",
          "code": "request.headers[version]",
          "element": "<code>request.headers[version]</code>"
        },
        {
          "language": "",
          "code": "request.headers",
          "element": "<code>request.headers</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/curl\"]\n   to:\n   - operation:\n       methods: [\"GET\"]\n   when:\n   - key: request.headers[version]\n     values: [\"v1\", \"v2\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   match..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/curl\"]\n   to:\n   - operation:\n       methods: [\"GET\"]\n   when:\n   - key: request.headers[version]\n     values: [\"v1\", \"v2\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabel..."
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - to:\n   - operation:\n       methods: [\"GET\", \"POST\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   match..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - to:\n   - operation:\n       methods: [\"GET\", \"POST\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabel..."
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"*\"]\n   to:\n   - operation:\n       methods: [\"GET\", \"POST\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   match..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabels:\n     app: httpbin\n     version: v1\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"*\"]\n   to:\n   - operation:\n       methods: [\"GET\", \"POST\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n name: httpbin\n namespace: foo\nspec:\n selector:\n   matchLabel..."
        },
        {
          "language": "",
          "code": "request_principals",
          "element": "<code>request_principals</code>"
        },
        {
          "language": "",
          "code": "bookinfo-ratings-v2",
          "element": "<code>bookinfo-ratings-v2</code>"
        },
        {
          "language": "",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: mongodb-policy\n  namespace: default\nspec:\n selector:\n   matchLabels:\n     app: mongodb\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/bookinfo-ratings-v2\"]\n   to:\n   - operation:\n       ports: [\"27017\"]",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: mongodb-policy\n  namespace: default\nspec:\n selec..."
        },
        {
          "language": "language-yaml",
          "code": "apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: mongodb-policy\n  namespace: default\nspec:\n selector:\n   matchLabels:\n     app: mongodb\n action: ALLOW\n rules:\n - from:\n   - source:\n       principals: [\"cluster.local/ns/default/sa/bookinfo-ratings-v2\"]\n   to:\n   - operation:\n       ports: [\"27017\"]",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: mongodb-policy\n  namespace: default\nspec:\n selector:\n..."
        },
        {
          "language": "",
          "code": "notPrincipals",
          "element": "<code>notPrincipals</code>"
        },
        {
          "language": "",
          "code": "notNamespaces",
          "element": "<code>notNamespaces</code>"
        },
        {
          "language": "",
          "code": "source.principal",
          "element": "<code>source.principal</code>"
        },
        {
          "language": "",
          "code": "source.namespace",
          "element": "<code>source.namespace</code>"
        },
        {
          "language": "",
          "code": "PeerAuthentication",
          "element": "<code>PeerAuthentication</code>"
        },
        {
          "language": "",
          "code": "allow-nothing",
          "element": "<code>allow-nothing</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Security",
          "id": "title"
        },
        {
          "level": 2,
          "text": "High-level architecture",
          "id": "high-level-architecture"
        },
        {
          "level": 2,
          "text": "Istio identity",
          "id": "istio-identity"
        },
        {
          "level": 2,
          "text": "Identity and certificate management",
          "id": "pki"
        },
        {
          "level": 2,
          "text": "Authentication",
          "id": "authentication"
        },
        {
          "level": 2,
          "text": "Authorization",
          "id": "authorization"
        },
        {
          "level": 2,
          "text": "Learn more",
          "id": "learn-more"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 3,
          "text": "Mutual TLS authentication",
          "id": "mutual-tls-authentication"
        },
        {
          "level": 3,
          "text": "Authentication architecture",
          "id": "authentication-architecture"
        },
        {
          "level": 3,
          "text": "Authentication policies",
          "id": "authentication-policies"
        },
        {
          "level": 3,
          "text": "Updating authentication policies",
          "id": "updating-authentication-policies"
        },
        {
          "level": 3,
          "text": "Authorization architecture",
          "id": "authorization-architecture"
        },
        {
          "level": 3,
          "text": "Implicit enablement",
          "id": "implicit-enablement"
        },
        {
          "level": 3,
          "text": "Authorization policies",
          "id": "authorization-policies"
        },
        {
          "level": 3,
          "text": "Using Istio authorization on plain TCP protocols",
          "id": "using-istio-authorization-on-plain-tcp-protocols"
        },
        {
          "level": 3,
          "text": "Dependency on mutual TLS",
          "id": "dependency-on-mutual-tls"
        },
        {
          "level": 4,
          "text": "Permissive mode",
          "id": "permissive-mode"
        },
        {
          "level": 4,
          "text": "Secure naming",
          "id": "secure-naming"
        },
        {
          "level": 4,
          "text": "Policy storage",
          "id": "policy-storage"
        },
        {
          "level": 4,
          "text": "Selector field",
          "id": "selector-field"
        },
        {
          "level": 4,
          "text": "Peer authentication",
          "id": "peer-authentication"
        },
        {
          "level": 4,
          "text": "Request authentication",
          "id": "request-authentication"
        },
        {
          "level": 4,
          "text": "Principals",
          "id": "principals"
        },
        {
          "level": 4,
          "text": "Policy Target",
          "id": "policy-target"
        },
        {
          "level": 4,
          "text": "Value matching",
          "id": "value-matching"
        },
        {
          "level": 4,
          "text": "Exclusion matching",
          "id": "exclusion-matching"
        },
        {
          "level": 4,
          "text": "allow-nothing,deny-allandallow-allpolicy",
          "id": "allow-nothing-deny-all-and-allow-all-policy"
        },
        {
          "level": 4,
          "text": "Custom conditions",
          "id": "custom-conditions"
        },
        {
          "level": 4,
          "text": "Authenticated and unauthenticated identity",
          "id": "authenticated-and-unauthenticated-identity"
        }
      ],
      "timestamp": 1750732106.602134
    },
    {
      "url": "https://istio.io/latest/docs/concepts/observability/",
      "title": "Istio / Observability",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nConcepts\nObservability\nObservability\n5 minute read\nMetrics\nProxy-level metrics\nService-level metrics\nControl plane metrics\nDistributed traces\nAccess logs\nSee also\nIstio generates detailed telemetry for all service communications within a mesh. This telemetry provides\nobservability\nof service behavior,\nempowering operators to troubleshoot, maintain, and optimize their applications – without imposing any additional burdens on service developers. Through\nIstio, operators gain a thorough understanding of how monitored services are interacting, both with other services and with the Istio components themselves.\nIstio generates the following types of telemetry in order to provide overall service mesh observability:\nMetrics\n. Istio generates a set of service metrics based on the four “golden signals” of monitoring (latency, traffic, errors, and\nsaturation). Istio also provides detailed metrics for the\nmesh control plane\n.\nA default set of mesh monitoring dashboards built on top of these metrics is also provided.\nDistributed Traces\n. Istio generates distributed trace spans for each service, providing operators with a detailed understanding\nof call flows and service dependencies within a mesh.\nAccess Logs\n. As traffic flows into a service within a mesh, Istio can generate a full record of each request, including source and\ndestination metadata. This information enables operators to audit service behavior down to the individual\nworkload instance\nlevel.\nMetrics\nMetrics provide a way of monitoring and understanding behavior in aggregate.\nTo monitor service behavior, Istio generates metrics for all service traffic in, out, and within an Istio service mesh. These metrics provide information on\nbehaviors such as the overall volume of traffic, the error rates within the traffic, and the response times for requests.\nIn addition to monitoring the behavior of services within a mesh, it is also important to monitor the behavior of the mesh itself. Istio components export\nmetrics on their own internal behaviors to provide insight on the health and function of the mesh control plane.\nProxy-level metrics\nIstio metrics collection begins with the sidecar proxies (Envoy). Each proxy generates a rich set of metrics about all traffic passing through the proxy (both\ninbound and outbound). The proxies also provide detailed statistics about the administrative functions of the proxy itself, including configuration and health\ninformation.\nEnvoy-generated metrics provide monitoring of the mesh at the granularity of Envoy resources (such as listeners and clusters). As a result, understanding the\nconnection between mesh services and Envoy resources is required for monitoring the Envoy metrics.\nIstio enables operators to select which of the Envoy metrics are generated and collected at each workload instance. By default, Istio enables only a small\nsubset of the Envoy-generated statistics to avoid overwhelming metrics backends and to reduce the CPU overhead associated with metrics collection. However,\noperators can easily expand the set of collected proxy metrics when required. This enables targeted debugging of networking behavior, while reducing the\noverall cost of monitoring across the mesh.\nThe\nEnvoy documentation site\nincludes a detailed overview of\nEnvoy statistics collection\n.\nThe operations guide on\nEnvoy Statistics\nprovides more information on controlling the generation of proxy-level metrics.\nExample proxy-level Metrics:\nenvoy_cluster_internal_upstream_rq{response_code_class=\"2xx\",cluster_name=\"xds-grpc\"} 7163\n\nenvoy_cluster_upstream_rq_completed{cluster_name=\"xds-grpc\"} 7164\n\nenvoy_cluster_ssl_connection_error{cluster_name=\"xds-grpc\"} 0\n\nenvoy_cluster_lb_subsets_removed{cluster_name=\"xds-grpc\"} 0\n\nenvoy_cluster_internal_upstream_rq{response_code=\"503\",cluster_name=\"xds-grpc\"} 1\nService-level metrics\nIn addition to the proxy-level metrics, Istio provides a set of service-oriented metrics for monitoring service communications. These metrics cover the four\nbasic service monitoring needs: latency, traffic, errors, and saturation. Istio ships with a default set of\ndashboards\nfor monitoring service behaviors based on these metrics.\nThe\nstandard Istio metrics\nare\nexported to\nPrometheus\nby default.\nUse of the service-level metrics is entirely optional. Operators may choose to turn off generation and collection of these metrics to meet their individual\nneeds.\nExample service-level metric:\nistio_requests_total{\n  connection_security_policy=\"mutual_tls\",\n  destination_app=\"details\",\n  destination_canonical_service=\"details\",\n  destination_canonical_revision=\"v1\",\n  destination_principal=\"cluster.local/ns/default/sa/default\",\n  destination_service=\"details.default.svc.cluster.local\",\n  destination_service_name=\"details\",\n  destination_service_namespace=\"default\",\n  destination_version=\"v1\",\n  destination_workload=\"details-v1\",\n  destination_workload_namespace=\"default\",\n  reporter=\"destination\",\n  request_protocol=\"http\",\n  response_code=\"200\",\n  response_flags=\"-\",\n  source_app=\"productpage\",\n  source_canonical_service=\"productpage\",\n  source_canonical_revision=\"v1\",\n  source_principal=\"cluster.local/ns/default/sa/default\",\n  source_version=\"v1\",\n  source_workload=\"productpage-v1\",\n  source_workload_namespace=\"default\"\n} 214\nControl plane metrics\nThe Istio control plane also provides a collection of self-monitoring metrics. These metrics allow monitoring of the behavior\nof Istio itself (as distinct from that of the services within the mesh).\nFor more information on which metrics are maintained, please refer to the\nreference documentation\n.\nDistributed traces\nDistributed tracing provides a way to monitor and understand behavior by monitoring individual requests as they flow through a mesh.\nTraces empower mesh operators to understand service dependencies and the sources of latency within their service mesh.\nIstio supports distributed tracing through the Envoy proxies. The proxies automatically generate trace spans on behalf of the applications they proxy,\nrequiring only that the applications forward the appropriate request context.\nIstio supports a number of tracing backends, including\nZipkin\n,\nJaeger\n, and many tools and services that support\nOpenTelemetry\n. Operators control the sampling rate for trace generation (that is, the rate at\nwhich tracing data is generated per request). This allows operators to control the amount and rate of tracing data being produced for their mesh.\nMore information about Distributed Tracing with Istio is found in our\nFAQ on Distributed Tracing\n.\nExample Istio-generated distributed trace for a single request:\nDistributed Trace for a single request\nAccess logs\nAccess logs provide a way to monitor and understand behavior from the perspective of an individual workload instance.\nIstio can generate access logs for service traffic in a configurable set of formats, providing operators with full control of the how, what, when and where of\nlogging. For more information, please refer to\nGetting Envoy’s Access Logs\n.\nExample Istio access log:\n[2019-03-06T09:31:27.360Z] \"GET /status/418 HTTP/1.1\" 418 - \"-\" 0 135 5 2 \"-\" \"curl/7.60.0\" \"d209e46f-9ed5-9b61-bbdd-43e22662702a\" \"httpbin:8000\" \"127.0.0.1:80\" inbound|8000|http|httpbin.default.svc.cluster.local - 172.30.146.73:80 172.30.146.82:38618 outbound_.8000_._.httpbin.default.svc.cluster.local\nSee also\nApache SkyWalking\nLearn how to configure the proxies to send tracing requests to Apache SkyWalking.\nClassifying Metrics Based on Request or Response\nThis task shows you how to improve telemetry by grouping requests and responses by their type.\nCollecting Metrics for TCP Services\nThis task shows you how to configure Istio to collect metrics for TCP services.\nConfigure access logs with Telemetry API\nThis task shows you how to configure Envoy proxies to send access logs with Telemetry API.\nConfigure trace sampling\nLearn the different approaches on how to configure trace sampling on the proxies.\nConfigure tracing using MeshConfig and pod annotations\nHow to configure tracing options using MeshConfig and pod annotations.\nSecurity\nExtensibility\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nMetrics\nProxy-level metrics\nService-level metrics\nControl plane metrics\nDistributed traces\nAccess logs\nSee also",
      "code_examples": [
        {
          "language": "",
          "code": "envoy_cluster_internal_upstream_rq{response_code_class=\"2xx\",cluster_name=\"xds-grpc\"} 7163\n\nenvoy_cluster_upstream_rq_completed{cluster_name=\"xds-grpc\"} 7164\n\nenvoy_cluster_ssl_connection_error{cluster_name=\"xds-grpc\"} 0\n\nenvoy_cluster_lb_subsets_removed{cluster_name=\"xds-grpc\"} 0\n\nenvoy_cluster_internal_upstream_rq{response_code=\"503\",cluster_name=\"xds-grpc\"} 1",
          "element": "<pre><code class=\"language-json\" data-expandlinks=\"true\" data-repo=\"istio\">envoy_cluster_internal_upstream_rq{response_code_class=\"2xx\",cluster_name=\"xds-grpc\"} 7163\n\nenvoy_cluster_upstream_rq_complet..."
        },
        {
          "language": "language-json",
          "code": "envoy_cluster_internal_upstream_rq{response_code_class=\"2xx\",cluster_name=\"xds-grpc\"} 7163\n\nenvoy_cluster_upstream_rq_completed{cluster_name=\"xds-grpc\"} 7164\n\nenvoy_cluster_ssl_connection_error{cluster_name=\"xds-grpc\"} 0\n\nenvoy_cluster_lb_subsets_removed{cluster_name=\"xds-grpc\"} 0\n\nenvoy_cluster_internal_upstream_rq{response_code=\"503\",cluster_name=\"xds-grpc\"} 1",
          "element": "<code class=\"language-json\" data-expandlinks=\"true\" data-repo=\"istio\">envoy_cluster_internal_upstream_rq{response_code_class=\"2xx\",cluster_name=\"xds-grpc\"} 7163\n\nenvoy_cluster_upstream_rq_completed{cl..."
        },
        {
          "language": "",
          "code": "istio_requests_total{\n  connection_security_policy=\"mutual_tls\",\n  destination_app=\"details\",\n  destination_canonical_service=\"details\",\n  destination_canonical_revision=\"v1\",\n  destination_principal=\"cluster.local/ns/default/sa/default\",\n  destination_service=\"details.default.svc.cluster.local\",\n  destination_service_name=\"details\",\n  destination_service_namespace=\"default\",\n  destination_version=\"v1\",\n  destination_workload=\"details-v1\",\n  destination_workload_namespace=\"default\",\n  reporter=\"destination\",\n  request_protocol=\"http\",\n  response_code=\"200\",\n  response_flags=\"-\",\n  source_app=\"productpage\",\n  source_canonical_service=\"productpage\",\n  source_canonical_revision=\"v1\",\n  source_principal=\"cluster.local/ns/default/sa/default\",\n  source_version=\"v1\",\n  source_workload=\"productpage-v1\",\n  source_workload_namespace=\"default\"\n} 214",
          "element": "<pre><code class=\"language-json\" data-expandlinks=\"true\" data-repo=\"istio\">istio_requests_total{\n  connection_security_policy=\"mutual_tls\",\n  destination_app=\"details\",\n  destination_canonical_service..."
        },
        {
          "language": "language-json",
          "code": "istio_requests_total{\n  connection_security_policy=\"mutual_tls\",\n  destination_app=\"details\",\n  destination_canonical_service=\"details\",\n  destination_canonical_revision=\"v1\",\n  destination_principal=\"cluster.local/ns/default/sa/default\",\n  destination_service=\"details.default.svc.cluster.local\",\n  destination_service_name=\"details\",\n  destination_service_namespace=\"default\",\n  destination_version=\"v1\",\n  destination_workload=\"details-v1\",\n  destination_workload_namespace=\"default\",\n  reporter=\"destination\",\n  request_protocol=\"http\",\n  response_code=\"200\",\n  response_flags=\"-\",\n  source_app=\"productpage\",\n  source_canonical_service=\"productpage\",\n  source_canonical_revision=\"v1\",\n  source_principal=\"cluster.local/ns/default/sa/default\",\n  source_version=\"v1\",\n  source_workload=\"productpage-v1\",\n  source_workload_namespace=\"default\"\n} 214",
          "element": "<code class=\"language-json\" data-expandlinks=\"true\" data-repo=\"istio\">istio_requests_total{\n  connection_security_policy=\"mutual_tls\",\n  destination_app=\"details\",\n  destination_canonical_service=\"det..."
        },
        {
          "language": "",
          "code": "[2019-03-06T09:31:27.360Z] \"GET /status/418 HTTP/1.1\" 418 - \"-\" 0 135 5 2 \"-\" \"curl/7.60.0\" \"d209e46f-9ed5-9b61-bbdd-43e22662702a\" \"httpbin:8000\" \"127.0.0.1:80\" inbound|8000|http|httpbin.default.svc.cluster.local - 172.30.146.73:80 172.30.146.82:38618 outbound_.8000_._.httpbin.default.svc.cluster.local",
          "element": "<pre><code class=\"language-plain\" data-expandlinks=\"true\" data-repo=\"istio\">[2019-03-06T09:31:27.360Z] \"GET /status/418 HTTP/1.1\" 418 - \"-\" 0 135 5 2 \"-\" \"curl/7.60.0\" \"d209e46f-9ed5-9b61-bbdd-43e2266..."
        },
        {
          "language": "language-plain",
          "code": "[2019-03-06T09:31:27.360Z] \"GET /status/418 HTTP/1.1\" 418 - \"-\" 0 135 5 2 \"-\" \"curl/7.60.0\" \"d209e46f-9ed5-9b61-bbdd-43e22662702a\" \"httpbin:8000\" \"127.0.0.1:80\" inbound|8000|http|httpbin.default.svc.cluster.local - 172.30.146.73:80 172.30.146.82:38618 outbound_.8000_._.httpbin.default.svc.cluster.local",
          "element": "<code class=\"language-plain\" data-expandlinks=\"true\" data-repo=\"istio\">[2019-03-06T09:31:27.360Z] \"GET /status/418 HTTP/1.1\" 418 - \"-\" 0 135 5 2 \"-\" \"curl/7.60.0\" \"d209e46f-9ed5-9b61-bbdd-43e22662702a..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Observability",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Metrics",
          "id": "metrics"
        },
        {
          "level": 2,
          "text": "Distributed traces",
          "id": "distributed-traces"
        },
        {
          "level": 2,
          "text": "Access logs",
          "id": "access-logs"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 3,
          "text": "Proxy-level metrics",
          "id": "proxy-level-metrics"
        },
        {
          "level": 3,
          "text": "Service-level metrics",
          "id": "service-level-metrics"
        },
        {
          "level": 3,
          "text": "Control plane metrics",
          "id": "control-plane-metrics"
        }
      ],
      "timestamp": 1750732109.640317
    },
    {
      "url": "https://istio.io/latest/docs/concepts/wasm/",
      "title": "Istio / Extensibility",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nConcepts\nExtensibility\nExtensibility\n2 minute read\nHigh-level architecture\nExample\nEcosystem\nSee also\nWebAssembly is a sandboxing technology which can be used to extend the Istio proxy (Envoy). The Proxy-Wasm sandbox API replaces Mixer as the primary extension mechanism in Istio.\nWebAssembly sandbox goals:\nEfficiency\n- An extension adds low latency, CPU, and memory overhead.\nFunction\n- An extension can enforce policy, collect telemetry, and perform payload mutations.\nIsolation\n- A programming error or crash in one plugin doesn’t affect other plugins.\nConfiguration\n- The plugins are configured using an API that is consistent with other Istio APIs. An extension can be configured dynamically.\nOperator\n- An extension can be canaried and deployed as log-only, fail-open or fail-close.\nExtension developer\n- The plugin can be written in several programming languages.\nThis\nvideo talk\nis an introduction about architecture of WebAssembly integration.\nHigh-level architecture\nIstio extensions (Proxy-Wasm plugins) have several components:\nFilter Service Provider Interface (SPI)\nfor building Proxy-Wasm plugins for filters.\nSandbox\nV8 Wasm Runtime embedded in Envoy.\nHost APIs\nfor headers, trailers and metadata.\nCall out APIs\nfor gRPC and HTTP calls.\nStats and Logging APIs\nfor metrics and monitoring.\nExtending Istio/Envoy\nExample\nAn example C++ Proxy-Wasm plugin for a filter can be found\nhere\n.\nYou can follow\nthis guide\nto implement a Wasm extension with C++.\nEcosystem\nIstio Ecosystem Wasm Extensions\nProxy-Wasm ABI specification\nProxy-Wasm C++ SDK\nProxy-Wasm Rust SDK\nProxy-Wasm AssemblyScript SDK\nWebAssembly Hub\nWebAssembly Extensions For Network Proxies (video)\nSee also\nAnnouncing the alpha availability of WebAssembly Plugins\nIntroduction to the new Wasm Plugin API and updates to the Wasm-based plugin support in Envoy and Istio.\nIstio and Envoy WebAssembly Extensibility, One Year On\nAn update on Envoy and Istio's WebAssembly-based extensibility effort.\nExtended and Improved WebAssemblyHub to Bring the Power of WebAssembly to Envoy and Istio\nCommunity partner tooling of Wasm for Istio by Solo.io.\nDeclarative WebAssembly deployment for Istio\nConfiguring Wasm extensions for Envoy and Istio declaratively.\nRedefining extensibility in proxies - introducing WebAssembly to Envoy and Istio\nThe future of Istio extensibility using WASM.\nObservability\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nHigh-level architecture\nExample\nEcosystem\nSee also",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Extensibility",
          "id": "title"
        },
        {
          "level": 2,
          "text": "High-level architecture",
          "id": "high-level-architecture"
        },
        {
          "level": 2,
          "text": "Example",
          "id": "example"
        },
        {
          "level": 2,
          "text": "Ecosystem",
          "id": "ecosystem"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732112.45262
    },
    {
      "url": "https://istio.io/latest/docs/setup/",
      "title": "Istio / Sidecar Mode",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nSidecar Mode\nInformation for setting up and operating Istio in sidecar mode.\nGetting Started\nTry Istio’s features quickly and easily.\nPlatform Setup\nHow to prepare various Kubernetes platforms before installing Istio.\nInstallation Guides\nChoose the guide that best suits your needs and platform.\nUpgrade Istio\nUpgrade, downgrade, and manage Istio across multiple control plane revisions.\nMore Guides\nMore information on additional setup tasks.\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Sidecar Mode",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 5,
          "text": "Getting Started",
          "id": ""
        },
        {
          "level": 5,
          "text": "Platform Setup",
          "id": ""
        },
        {
          "level": 5,
          "text": "Installation Guides",
          "id": ""
        },
        {
          "level": 5,
          "text": "Upgrade Istio",
          "id": ""
        },
        {
          "level": 5,
          "text": "More Guides",
          "id": ""
        }
      ],
      "timestamp": 1750732115.210985
    },
    {
      "url": "https://istio.io/latest/docs/setup/getting-started/",
      "title": "Istio / Getting Started",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nGetting Started\nGetting Started\n7 minute read\npage test\nDownload Istio\nInstall Istio\nInstall the Kubernetes Gateway API CRDs\nDeploy the sample application\nOpen the application to outside traffic\nAccess the application\nView the dashboard\nNext steps\nJoin the Istio community\nUninstall\nSee also\nWant to explore Istio’s\nambient mode\n? Visit the\nGetting Started with Ambient Mode\nguide!\nThis guide lets you quickly evaluate Istio. If you are already familiar with\nIstio or interested in installing other configuration profiles or\nadvanced\ndeployment models\n, refer to our\nwhich Istio installation method should I use?\nFAQ page.\nYou will need a Kubernetes cluster to proceed. If you don’t have a cluster, you can use\nkind\nor any other\nsupported Kubernetes platform\n.\nFollow these steps to get started with Istio:\nDownload and install Istio\nInstall the Kubernetes Gateway API CRDs\nDeploy the sample application\nOpen the application to outside traffic\nView the dashboard\nDownload Istio\nGo to the\nIstio release\npage to\ndownload the installation file for your OS, or\ndownload and\nextract the latest release automatically\n(Linux or macOS):\n$ curl -L https://istio.io/downloadIstio | sh -\nMove to the Istio package directory. For example, if the package is\nistio-1.26.2\n:\n$ cd istio-1.26.2\nThe installation directory contains:\nSample applications in\nsamples/\nThe\nistioctl\nclient binary in the\nbin/\ndirectory.\nAdd the\nistioctl\nclient to your path (Linux or macOS):\n$ export PATH=$PWD/bin:$PATH\nInstall Istio\nFor this guide, we use the\ndemo\nconfiguration profile\n. It is\nselected to have a good set of defaults for testing, but there are other\nprofiles for production, performance testing or\nOpenShift\n.\nUnlike\nIstio Gateways\n, creating\nKubernetes Gateways\nwill, by default, also\ndeploy gateway proxy servers\n.\nBecause they won’t be used, we disable the deployment of the default Istio gateway services that\nare normally installed as part of the\ndemo\nprofile.\nInstall Istio using the\ndemo\nprofile, without any gateways:\nZip\n$ istioctl install -f @samples/bookinfo/demo-profile-no-gateways.yaml@ -y\n✔ Istio core installed\n✔ Istiod installed\n✔ Installation complete\nMade this installation the default for injection and validation.\nAdd a namespace label to instruct Istio to automatically inject Envoy\nsidecar proxies when you deploy your application later:\n$ kubectl label namespace default istio-injection=enabled\nnamespace/default labeled\nInstall the Kubernetes Gateway API CRDs\nThe Kubernetes Gateway API CRDs do not come installed by default on most Kubernetes clusters, so make sure they are\ninstalled before using the Gateway API.\nInstall the Gateway API CRDs, if they are not already present:\n$ kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\\n{ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl apply -f -; }\nDeploy the sample application\nYou have configured Istio to inject sidecar containers into any application you deploy in your\ndefault\nnamespace.\nDeploy the\nBookinfo\nsample application\n:\nZip\n$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@\nservice/details created\nserviceaccount/bookinfo-details created\ndeployment.apps/details-v1 created\nservice/ratings created\nserviceaccount/bookinfo-ratings created\ndeployment.apps/ratings-v1 created\nservice/reviews created\nserviceaccount/bookinfo-reviews created\ndeployment.apps/reviews-v1 created\ndeployment.apps/reviews-v2 created\ndeployment.apps/reviews-v3 created\nservice/productpage created\nserviceaccount/bookinfo-productpage created\ndeployment.apps/productpage-v1 created\nThe application will start. As each pod becomes ready, the Istio sidecar will be\ndeployed along with it.\n$ kubectl get services\nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\ndetails       ClusterIP   10.0.0.212      <none>        9080/TCP   29s\nkubernetes    ClusterIP   10.0.0.1        <none>        443/TCP    25m\nproductpage   ClusterIP   10.0.0.57       <none>        9080/TCP   28s\nratings       ClusterIP   10.0.0.33       <none>        9080/TCP   29s\nreviews       ClusterIP   10.0.0.28       <none>        9080/TCP   29s\nand\n$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-558b8b4b76-2llld       2/2     Running   0          2m41s\nproductpage-v1-6987489c74-lpkgl   2/2     Running   0          2m40s\nratings-v1-7dc98c7588-vzftc       2/2     Running   0          2m41s\nreviews-v1-7f99cc4496-gdxfn       2/2     Running   0          2m41s\nreviews-v2-7d79d5bd5d-8zzqd       2/2     Running   0          2m41s\nreviews-v3-7dbcdcbc56-m8dph       2/2     Running   0          2m41s\nNote that the pods show\nREADY 2/2\n, confirming they have their application container and the Istio sidecar container.\nValidate that the app is running inside the cluster by\nchecking for the page title in the response:\n$ kubectl exec \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl -sS productpage:9080/productpage | grep -o \"<title>.*</title>\"\n<title>Simple Bookstore App</title>\nOpen the application to outside traffic\nThe Bookinfo application is deployed, but not accessible from the outside. To make it accessible,\nyou need to create an ingress gateway, which maps a path to a\nroute at the edge of your mesh.\nCreate a\nKubernetes Gateway\nfor the Bookinfo application:\nZip\n$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@\ngateway.gateway.networking.k8s.io/bookinfo-gateway created\nhttproute.gateway.networking.k8s.io/bookinfo created\nBy default, Istio creates a\nLoadBalancer\nservice for a gateway. As we will access this gateway by a tunnel, we don’t need a load balancer. If you want to learn about how load balancers are configured for external IP addresses, read the\ningress gateways\ndocumentation.\nChange the service type to\nClusterIP\nby annotating the gateway:\n$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default\nTo check the status of the gateway, run:\n$ kubectl get gateway\nNAME               CLASS   ADDRESS                                            PROGRAMMED   AGE\nbookinfo-gateway   istio   bookinfo-gateway-istio.default.svc.cluster.local   True         42s\nAccess the application\nYou will connect to the Bookinfo\nproductpage\nservice through the gateway you just provisioned. To access the gateway, you need to use the\nkubectl port-forward\ncommand:\n$ kubectl port-forward svc/bookinfo-gateway-istio 8080:80\nOpen your browser and navigate to\nhttp://localhost:8080/productpage\nto view the Bookinfo application.\nBookinfo Application\nIf you refresh the page, you should see the book reviews and ratings changing as the requests are distributed across the different versions of the\nreviews\nservice.\nView the dashboard\nIstio integrates with\nseveral different telemetry applications\n. These can help you gain\nan understanding of the structure of your service mesh, display the topology of the mesh, and analyze the health of your mesh.\nUse the following instructions to deploy the\nKiali\ndashboard, along with\nPrometheus\n,\nGrafana\n, and\nJaeger\n.\nInstall\nKiali and the other addons\nand wait for them to be deployed.\nZip\n$ kubectl apply -f @samples/addons@\n$ kubectl rollout status deployment/kiali -n istio-system\nWaiting for deployment \"kiali\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"kiali\" successfully rolled out\nAccess the Kiali dashboard.\n$ istioctl dashboard kiali\nIn the left navigation menu, select\nGraph\nand in the\nNamespace\ndrop down, select\ndefault\n.\nTo see trace data, you must send requests to your service. The number of requests depends on Istio’s sampling rate and can be configured using the\nTelemetry API\n. With the default sampling rate of 1%, you need to send at least 100 requests before the first trace is visible.\nTo send 100 requests to the\nproductpage\nservice, use the following command:\n$ for i in $(seq 1 100); do curl -s -o /dev/null \"http://$GATEWAY_URL/productpage\"; done\nThe Kiali dashboard shows an overview of your mesh with the relationships\nbetween the services in the\nBookinfo\nsample application. It also provides\nfilters to visualize the traffic flow.\nKiali Dashboard\nNext steps\nCongratulations on completing the evaluation installation!\nThese tasks are a great place for beginners to further evaluate Istio’s\nfeatures using this\ndemo\ninstallation:\nRequest routing\nFault injection\nTraffic shifting\nQuerying metrics\nVisualizing metrics\nAccessing external services\nVisualizing your mesh\nBefore you customize Istio for production use, see these resources:\nDeployment models\nDeployment best practices\nPod requirements\nGeneral installation instructions\nJoin the Istio community\nWe welcome you to ask questions and give us feedback by joining the\nIstio community\n.\nUninstall\nTo delete the\nBookinfo\nsample application and its configuration, see\nBookinfo\ncleanup\n.\nThe Istio uninstall deletes the RBAC permissions and all resources hierarchically\nunder the\nistio-system\nnamespace. It is safe to ignore errors for non-existent\nresources because they may have been deleted hierarchically.\nZip\n$ kubectl delete -f @samples/addons@\n$ istioctl uninstall -y --purge\nThe\nistio-system\nnamespace is not removed by default.\nIf no longer needed, use the following command to remove it:\n$ kubectl delete namespace istio-system\nThe label to instruct Istio to automatically inject Envoy sidecar proxies is not removed by default.\nIf no longer needed, use the following command to remove it:\n$ kubectl label namespace default istio-injection-\nIf you installed the Kubernetes Gateway API CRDs and would now like to remove them, run one of the following commands:\nIf you ran any tasks that required the\nexperimental version\nof the CRDs:\n$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.3.0\" | kubectl delete -f -\nOtherwise:\n$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl delete -f -\nSee also\nGetting Started without the Gateway API\nTry Istio’s features with the legacy Istio APIs.\nInstalling Gateways\nInstall and customize Istio Gateways.\nKubernetes Native Sidecars in Istio\nDemoing the new SidecarContainers feature with Istio.\nGetting started with the Kubernetes Gateway API\nUsing the Gateway API to configure ingress traffic for your Kubernetes cluster.\nExtending Gateway API support in Istio\nA standard API for service mesh, in Istio and in the broader community.\nDeploying Istio Control Planes Outside the Mesh\nA new deployment model for Istio.\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nDownload Istio\nInstall Istio\nInstall the Kubernetes Gateway API CRDs\nDeploy the sample application\nOpen the application to outside traffic\nAccess the application\nView the dashboard\nNext steps\nJoin the Istio community\nUninstall\nSee also",
      "code_examples": [
        {
          "language": "",
          "code": "$ curl -L https://istio.io/downloadIstio | sh -",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ curl -L https://istio.io/downloadIstio | sh -</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ curl -L https://istio.io/downloadIstio | sh -",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ curl -L https://istio.io/downloadIstio | sh -</code>"
        },
        {
          "language": "",
          "code": "istio-1.26.2",
          "element": "<code>istio-1.26.2</code>"
        },
        {
          "language": "",
          "code": "$ cd istio-1.26.2",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ cd istio-1.26.2</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ cd istio-1.26.2",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ cd istio-1.26.2</code>"
        },
        {
          "language": "",
          "code": "$ export PATH=$PWD/bin:$PATH",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ export PATH=$PWD/bin:$PATH</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ export PATH=$PWD/bin:$PATH",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ export PATH=$PWD/bin:$PATH</code>"
        },
        {
          "language": "",
          "code": "$ istioctl install -f @samples/bookinfo/demo-profile-no-gateways.yaml@ -y\n✔ Istio core installed\n✔ Istiod installed\n✔ Installation complete\nMade this installation the default for injection and validation.",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ istioctl install -f @samples/bookinfo/demo-profile-no-gateways.yaml@ -y\n✔ Istio core installed\n✔ Istiod installed\n✔ Install..."
        },
        {
          "language": "language-bash",
          "code": "$ istioctl install -f @samples/bookinfo/demo-profile-no-gateways.yaml@ -y\n✔ Istio core installed\n✔ Istiod installed\n✔ Installation complete\nMade this installation the default for injection and validation.",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ istioctl install -f @samples/bookinfo/demo-profile-no-gateways.yaml@ -y\n✔ Istio core installed\n✔ Istiod installed\n✔ Installation..."
        },
        {
          "language": "",
          "code": "$ kubectl label namespace default istio-injection=enabled\nnamespace/default labeled",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl label namespace default istio-injection=enabled\nnamespace/default labeled</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl label namespace default istio-injection=enabled\nnamespace/default labeled",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl label namespace default istio-injection=enabled\nnamespace/default labeled</code>"
        },
        {
          "language": "",
          "code": "$ kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\\n{ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl apply -f -; }",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get crd gateways.gateway.networking.k8s.io &amp;&gt; /dev/null || \\\n{ kubectl kustomize \"github.com/kubernetes-sigs..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\\n{ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl apply -f -; }",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get crd gateways.gateway.networking.k8s.io &amp;&gt; /dev/null || \\\n{ kubectl kustomize \"github.com/kubernetes-sigs/gate..."
        },
        {
          "language": "",
          "code": "$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@\nservice/details created\nserviceaccount/bookinfo-details created\ndeployment.apps/details-v1 created\nservice/ratings created\nserviceaccount/bookinfo-ratings created\ndeployment.apps/ratings-v1 created\nservice/reviews created\nserviceaccount/bookinfo-reviews created\ndeployment.apps/reviews-v1 created\ndeployment.apps/reviews-v2 created\ndeployment.apps/reviews-v3 created\nservice/productpage created\nserviceaccount/bookinfo-productpage created\ndeployment.apps/productpage-v1 created",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@\nservice/details created\nserviceaccount/bookinfo-details cre..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@\nservice/details created\nserviceaccount/bookinfo-details created\ndeployment.apps/details-v1 created\nservice/ratings created\nserviceaccount/bookinfo-ratings created\ndeployment.apps/ratings-v1 created\nservice/reviews created\nserviceaccount/bookinfo-reviews created\ndeployment.apps/reviews-v1 created\ndeployment.apps/reviews-v2 created\ndeployment.apps/reviews-v3 created\nservice/productpage created\nserviceaccount/bookinfo-productpage created\ndeployment.apps/productpage-v1 created",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@\nservice/details created\nserviceaccount/bookinfo-details created\n..."
        },
        {
          "language": "",
          "code": "$ kubectl get services\nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\ndetails       ClusterIP   10.0.0.212      <none>        9080/TCP   29s\nkubernetes    ClusterIP   10.0.0.1        <none>        443/TCP    25m\nproductpage   ClusterIP   10.0.0.57       <none>        9080/TCP   28s\nratings       ClusterIP   10.0.0.33       <none>        9080/TCP   29s\nreviews       ClusterIP   10.0.0.28       <none>        9080/TCP   29s",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get services\nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\ndetails       ClusterIP   10.0...."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl get services\nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\ndetails       ClusterIP   10.0.0.212      <none>        9080/TCP   29s\nkubernetes    ClusterIP   10.0.0.1        <none>        443/TCP    25m\nproductpage   ClusterIP   10.0.0.57       <none>        9080/TCP   28s\nratings       ClusterIP   10.0.0.33       <none>        9080/TCP   29s\nreviews       ClusterIP   10.0.0.28       <none>        9080/TCP   29s",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get services\nNAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\ndetails       ClusterIP   10.0.0.212..."
        },
        {
          "language": "",
          "code": "$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-558b8b4b76-2llld       2/2     Running   0          2m41s\nproductpage-v1-6987489c74-lpkgl   2/2     Running   0          2m40s\nratings-v1-7dc98c7588-vzftc       2/2     Running   0          2m41s\nreviews-v1-7f99cc4496-gdxfn       2/2     Running   0          2m41s\nreviews-v2-7d79d5bd5d-8zzqd       2/2     Running   0          2m41s\nreviews-v3-7dbcdcbc56-m8dph       2/2     Running   0          2m41s",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-558b8b4b76-2llld       2/2  ..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-558b8b4b76-2llld       2/2     Running   0          2m41s\nproductpage-v1-6987489c74-lpkgl   2/2     Running   0          2m40s\nratings-v1-7dc98c7588-vzftc       2/2     Running   0          2m41s\nreviews-v1-7f99cc4496-gdxfn       2/2     Running   0          2m41s\nreviews-v2-7d79d5bd5d-8zzqd       2/2     Running   0          2m41s\nreviews-v3-7dbcdcbc56-m8dph       2/2     Running   0          2m41s",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-558b8b4b76-2llld       2/2     Ru..."
        },
        {
          "language": "",
          "code": "$ kubectl exec \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl -sS productpage:9080/productpage | grep -o \"<title>.*</title>\"\n<title>Simple Bookstore App</title>",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl exec \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl -sS productpage..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl exec \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl -sS productpage:9080/productpage | grep -o \"<title>.*</title>\"\n<title>Simple Bookstore App</title>",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl exec \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl -sS productpage:9080..."
        },
        {
          "language": "",
          "code": "$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@\ngateway.gateway.networking.k8s.io/bookinfo-gateway created\nhttproute.gateway.networking.k8s.io/bookinfo created",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@\ngateway.gateway.networking.k8s.io/bookinfo-gateway cr..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@\ngateway.gateway.networking.k8s.io/bookinfo-gateway created\nhttproute.gateway.networking.k8s.io/bookinfo created",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@\ngateway.gateway.networking.k8s.io/bookinfo-gateway created..."
        },
        {
          "language": "",
          "code": "LoadBalancer",
          "element": "<code>LoadBalancer</code>"
        },
        {
          "language": "",
          "code": "$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default</code>"
        },
        {
          "language": "",
          "code": "$ kubectl get gateway\nNAME               CLASS   ADDRESS                                            PROGRAMMED   AGE\nbookinfo-gateway   istio   bookinfo-gateway-istio.default.svc.cluster.local   True         42s",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get gateway\nNAME               CLASS   ADDRESS                                            PROGRAMMED   AGE\nbookinfo..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl get gateway\nNAME               CLASS   ADDRESS                                            PROGRAMMED   AGE\nbookinfo-gateway   istio   bookinfo-gateway-istio.default.svc.cluster.local   True         42s",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get gateway\nNAME               CLASS   ADDRESS                                            PROGRAMMED   AGE\nbookinfo-gate..."
        },
        {
          "language": "",
          "code": "productpage",
          "element": "<code>productpage</code>"
        },
        {
          "language": "",
          "code": "kubectl port-forward",
          "element": "<code>kubectl port-forward</code>"
        },
        {
          "language": "",
          "code": "$ kubectl port-forward svc/bookinfo-gateway-istio 8080:80",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl port-forward svc/bookinfo-gateway-istio 8080:80</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl port-forward svc/bookinfo-gateway-istio 8080:80",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl port-forward svc/bookinfo-gateway-istio 8080:80</code>"
        },
        {
          "language": "",
          "code": "http://localhost:8080/productpage",
          "element": "<code>http://localhost:8080/productpage</code>"
        },
        {
          "language": "",
          "code": "$ kubectl apply -f @samples/addons@\n$ kubectl rollout status deployment/kiali -n istio-system\nWaiting for deployment \"kiali\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"kiali\" successfully rolled out",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f @samples/addons@\n$ kubectl rollout status deployment/kiali -n istio-system\nWaiting for deployment \"kiali\" ..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl apply -f @samples/addons@\n$ kubectl rollout status deployment/kiali -n istio-system\nWaiting for deployment \"kiali\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"kiali\" successfully rolled out",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f @samples/addons@\n$ kubectl rollout status deployment/kiali -n istio-system\nWaiting for deployment \"kiali\" rollo..."
        },
        {
          "language": "",
          "code": "$ istioctl dashboard kiali",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ istioctl dashboard kiali</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ istioctl dashboard kiali",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ istioctl dashboard kiali</code>"
        },
        {
          "language": "",
          "code": "productpage",
          "element": "<code>productpage</code>"
        },
        {
          "language": "",
          "code": "$ for i in $(seq 1 100); do curl -s -o /dev/null \"http://$GATEWAY_URL/productpage\"; done",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ for i in $(seq 1 100); do curl -s -o /dev/null \"http://$GATEWAY_URL/productpage\"; done</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ for i in $(seq 1 100); do curl -s -o /dev/null \"http://$GATEWAY_URL/productpage\"; done",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ for i in $(seq 1 100); do curl -s -o /dev/null \"http://$GATEWAY_URL/productpage\"; done</code>"
        },
        {
          "language": "",
          "code": "istio-system",
          "element": "<code>istio-system</code>"
        },
        {
          "language": "",
          "code": "$ kubectl delete -f @samples/addons@\n$ istioctl uninstall -y --purge",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl delete -f @samples/addons@\n$ istioctl uninstall -y --purge</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl delete -f @samples/addons@\n$ istioctl uninstall -y --purge",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl delete -f @samples/addons@\n$ istioctl uninstall -y --purge</code>"
        },
        {
          "language": "",
          "code": "istio-system",
          "element": "<code>istio-system</code>"
        },
        {
          "language": "",
          "code": "$ kubectl delete namespace istio-system",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl delete namespace istio-system</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl delete namespace istio-system",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl delete namespace istio-system</code>"
        },
        {
          "language": "",
          "code": "$ kubectl label namespace default istio-injection-",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl label namespace default istio-injection-</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl label namespace default istio-injection-",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl label namespace default istio-injection-</code>"
        },
        {
          "language": "",
          "code": "$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.3.0\" | kubectl delete -f -",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.3.0\" | kubectl delete -f -</code><..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.3.0\" | kubectl delete -f -",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.3.0\" | kubectl delete -f -</code>"
        },
        {
          "language": "",
          "code": "$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl delete -f -",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl delete -f -</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl delete -f -",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0\" | kubectl delete -f -</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Getting Started",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Download Istio",
          "id": "download"
        },
        {
          "level": 2,
          "text": "Install Istio",
          "id": "install"
        },
        {
          "level": 2,
          "text": "Install the Kubernetes Gateway API CRDs",
          "id": "gateway-api"
        },
        {
          "level": 2,
          "text": "Deploy the sample application",
          "id": "bookinfo"
        },
        {
          "level": 2,
          "text": "Open the application to outside traffic",
          "id": "ip"
        },
        {
          "level": 2,
          "text": "Access the application",
          "id": "access-the-application"
        },
        {
          "level": 2,
          "text": "View the dashboard",
          "id": "dashboard"
        },
        {
          "level": 2,
          "text": "Next steps",
          "id": "next-steps"
        },
        {
          "level": 2,
          "text": "Join the Istio community",
          "id": "join-the-istio-community"
        },
        {
          "level": 2,
          "text": "Uninstall",
          "id": "uninstall"
        },
        {
          "level": 2,
          "text": "See also",
          "id": ""
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732117.5341609
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/",
      "title": "Istio / Platform Setup",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nPlatform Setup\nHow to prepare various Kubernetes platforms before installing Istio.\nAlibaba Cloud\nInstructions to set up an Alibaba Cloud Kubernetes cluster for Istio.\nAmazon EKS\nInstructions to set up Istio on Amazon EKS in AWS cloud.\nAzure\nInstructions to set up an Azure cluster for Istio.\nDocker Desktop\nInstructions to set up Docker Desktop for Istio.\nGoogle Kubernetes Engine\nInstructions to set up a Google Kubernetes Engine cluster for Istio.\nHuawei Cloud\nInstructions to set up an Huawei Cloud kubernetes cluster for Istio.\nIBM Cloud\nInstructions to set up an IBM Cloud cluster for Istio.\nk3d\nInstructions to set up k3d for Istio.\nkind\nInstructions to set up kind for Istio.\nKops\nInstructions to set up Kops for use with Istio.\nKubernetes Gardener\nInstructions to set up a Gardener cluster for Istio.\nKubeSphere Container Platform\nInstructions to set up a KubeSphere Container Platform for Istio.\nMicroK8s\nInstructions to set up MicroK8s for use with Istio.\nMinikube\nInstructions to set up minikube for Istio.\nOpenShift\nInstructions to set up an OpenShift cluster for Istio.\nOracle Cloud Infrastructure\nInstructions to prepare a cluster for Istio using Oracle Container Engine for Kubernetes (OKE).\nTencent Cloud\nInstructions to set up Istio quickly in Tencent Cloud.\nIstio 1.26 is\nsupported on these Kubernetes versions\n: 1.29, 1.30, 1.31, 1.32.\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Platform Setup",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 5,
          "text": "Alibaba Cloud",
          "id": ""
        },
        {
          "level": 5,
          "text": "Amazon EKS",
          "id": ""
        },
        {
          "level": 5,
          "text": "Azure",
          "id": ""
        },
        {
          "level": 5,
          "text": "Docker Desktop",
          "id": ""
        },
        {
          "level": 5,
          "text": "Google Kubernetes Engine",
          "id": ""
        },
        {
          "level": 5,
          "text": "Huawei Cloud",
          "id": ""
        },
        {
          "level": 5,
          "text": "IBM Cloud",
          "id": ""
        },
        {
          "level": 5,
          "text": "k3d",
          "id": ""
        },
        {
          "level": 5,
          "text": "kind",
          "id": ""
        },
        {
          "level": 5,
          "text": "Kops",
          "id": ""
        },
        {
          "level": 5,
          "text": "Kubernetes Gardener",
          "id": ""
        },
        {
          "level": 5,
          "text": "KubeSphere Container Platform",
          "id": ""
        },
        {
          "level": 5,
          "text": "MicroK8s",
          "id": ""
        },
        {
          "level": 5,
          "text": "Minikube",
          "id": ""
        },
        {
          "level": 5,
          "text": "OpenShift",
          "id": ""
        },
        {
          "level": 5,
          "text": "Oracle Cloud Infrastructure",
          "id": ""
        },
        {
          "level": 5,
          "text": "Tencent Cloud",
          "id": ""
        }
      ],
      "timestamp": 1750732120.172423
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/alicloud/",
      "title": "Istio / Alibaba Cloud",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nAlibaba Cloud\nAlibaba Cloud\n2 minute read\nPrerequisites\nProcedure\nThis vendor-provided document has not been tested on the Istio 1.9 release and may contain bugs.\nFollow these instructions to prepare an\nAlibaba Cloud Kubernetes Container Service\ncluster for Istio.\nYou can deploy a Kubernetes cluster to Alibaba Cloud quickly and easily in the\nContainer Service console\n, which fully supports Istio.\nAlibaba Cloud offers a fully managed service mesh platform named Alibaba Cloud Service Mesh (ASM),\nwhich is fully compatible with Istio. Refer to\nAlibaba Cloud Service Mesh\nfor\ndetails and instructions.\nPrerequisites\nFollow the Alibaba Cloud instructions\nto activate the following services: Container Service, Resource Orchestration\nService (ROS), and RAM.\nProcedure\nLog on to the\nContainer Service console\n, and click\nClusters\nunder\nKubernetes\nin the left-side navigation pane to enter the\nCluster List\npage.\nClick the\nCreate Kubernetes Cluster\nbutton in the upper-right corner.\nEnter the cluster name. The cluster name can be 1–63 characters long and\nit can contain numbers, Chinese characters, English letters, and hyphens (-).\nSelect the\nregion\nand\nzone\nin which the cluster resides.\nSet the cluster network type. Kubernetes clusters only support the VPC\nnetwork type now.\nConfigure the node type, Pay-As-You-Go and Subscription types are supported.\nConfigure the master nodes. Select the generation, family, and type for the\nmaster nodes.\nConfigure the worker nodes. Select whether to create a worker node or add an\nexisting ECS instance as the worker node.\nConfigure the logon mode, and configure the Pod Network CIDR and Service\nCIDR.\nAmazon EKS\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nPrerequisites\nProcedure",
      "code_examples": [
        {
          "language": "",
          "code": "Container Service console",
          "element": "<code>Container Service console</code>"
        },
        {
          "language": "",
          "code": "Container Service console",
          "element": "<code>Container Service console</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Alibaba Cloud",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Procedure",
          "id": "procedure"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732122.501782
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/amazon-eks/",
      "title": "Istio / Amazon EKS",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nAmazon EKS\nAmazon EKS\nFollow\nIstio on EKS\ninstructions to provision EKS cluster with Istio setup in AWS cloud.\nAlibaba Cloud\nAzure\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [],
      "headings": [
        {
          "level": 1,
          "text": "Amazon EKS",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732125.362247
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/azure/",
      "title": "Istio / Azure",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nAzure\nAzure\n2 minute read\npage test\nAKS\nFollow these instructions to prepare an Azure cluster for Istio.\nAzure offers a\nmanaged control plane\nadd-on for the Azure Kubernetes Service (AKS),\nwhich you can use instead of installing Istio manually.\nPlease refer to\nDeploy Istio-based service mesh add-on for Azure Kubernetes Service\nfor details and instructions.\nYou can deploy a Kubernetes cluster to Azure via\nAKS\nor\nCluster API provider for Azure (CAPZ) for self-managed Kubernetes or AKS\nwhich fully supports Istio.\nAKS\nYou can create an AKS cluster via numerous means such as\nthe az cli\n,\nthe Azure portal\n,\naz cli with Bicep\n, or\nTerraform\nFor the\naz\ncli option, complete\naz login\nauthentication OR use cloud shell, then run the following commands below.\nDetermine the desired region name which supports AKS\n$ az provider list --query \"[?namespace=='Microsoft.ContainerService'].resourceTypes[] | [?resourceType=='managedClusters'].locations[]\" -o tsv\nVerify the supported Kubernetes versions for the desired region\nReplace\nmy location\nusing the desired region value from the above step, and then execute:\n$ az aks get-versions --location \"my location\" --query \"orchestrators[].orchestratorVersion\"\nCreate the resource group and deploy the AKS cluster\nReplace\nmyResourceGroup\nand\nmyAKSCluster\nwith desired names,\nmy location\nusing the value from step 1,\n1.28.3\nif not supported in the region, and then execute:\n$ az group create --name myResourceGroup --location \"my location\"\n$ az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 3 --kubernetes-version 1.28.3 --generate-ssh-keys\nGet the AKS\nkubeconfig\ncredentials\nReplace\nmyResourceGroup\nand\nmyAKSCluster\nwith the names from the previous step and execute:\n$ az aks get-credentials --resource-group myResourceGroup --name myAKSCluster\nAmazon EKS\nDocker Desktop\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nAKS",
      "code_examples": [
        {
          "language": "",
          "code": "$ az provider list --query \"[?namespace=='Microsoft.ContainerService'].resourceTypes[] | [?resourceType=='managedClusters'].locations[]\" -o tsv",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az provider list --query \"[?namespace=='Microsoft.ContainerService'].resourceTypes[] | [?resourceType=='managedClusters'].l..."
        },
        {
          "language": "language-bash",
          "code": "$ az provider list --query \"[?namespace=='Microsoft.ContainerService'].resourceTypes[] | [?resourceType=='managedClusters'].locations[]\" -o tsv",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az provider list --query \"[?namespace=='Microsoft.ContainerService'].resourceTypes[] | [?resourceType=='managedClusters'].locati..."
        },
        {
          "language": "",
          "code": "my location",
          "element": "<code>my location</code>"
        },
        {
          "language": "",
          "code": "$ az aks get-versions --location \"my location\" --query \"orchestrators[].orchestratorVersion\"",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az aks get-versions --location \"my location\" --query \"orchestrators[].orchestratorVersion\"</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ az aks get-versions --location \"my location\" --query \"orchestrators[].orchestratorVersion\"",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az aks get-versions --location \"my location\" --query \"orchestrators[].orchestratorVersion\"</code>"
        },
        {
          "language": "",
          "code": "myResourceGroup",
          "element": "<code>myResourceGroup</code>"
        },
        {
          "language": "",
          "code": "myAKSCluster",
          "element": "<code>myAKSCluster</code>"
        },
        {
          "language": "",
          "code": "my location",
          "element": "<code>my location</code>"
        },
        {
          "language": "",
          "code": "$ az group create --name myResourceGroup --location \"my location\"\n$ az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 3 --kubernetes-version 1.28.3 --generate-ssh-keys",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az group create --name myResourceGroup --location \"my location\"\n$ az aks create --resource-group myResourceGroup --name myA..."
        },
        {
          "language": "language-bash",
          "code": "$ az group create --name myResourceGroup --location \"my location\"\n$ az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 3 --kubernetes-version 1.28.3 --generate-ssh-keys",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az group create --name myResourceGroup --location \"my location\"\n$ az aks create --resource-group myResourceGroup --name myAKSClu..."
        },
        {
          "language": "",
          "code": "myResourceGroup",
          "element": "<code>myResourceGroup</code>"
        },
        {
          "language": "",
          "code": "myAKSCluster",
          "element": "<code>myAKSCluster</code>"
        },
        {
          "language": "",
          "code": "$ az aks get-credentials --resource-group myResourceGroup --name myAKSCluster",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az aks get-credentials --resource-group myResourceGroup --name myAKSCluster</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ az aks get-credentials --resource-group myResourceGroup --name myAKSCluster",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ az aks get-credentials --resource-group myResourceGroup --name myAKSCluster</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Azure",
          "id": "title"
        },
        {
          "level": 2,
          "text": "AKS",
          "id": "aks"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732127.722412
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/docker/",
      "title": "Istio / Docker Desktop",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nDocker Desktop\nDocker Desktop\nTo run Istio with Docker Desktop, install a version which contains a\nsupported Kubernetes version\n(1.29, 1.30, 1.31, 1.32).\nIf you want to run Istio under Docker Desktop’s built-in Kubernetes, you need to increase Docker’s memory limit\nunder the\nResources->Advanced\npane of Docker Desktop’s\nSettings…\n. Set the resources to at least 8.0\nGB\nof memory and 4\nCPUs\n.\nDocker Preferences\nMinimum memory requirements vary. 8\nGB\nis sufficient to run\nIstio and Bookinfo. If you don’t have enough memory allocated in Docker Desktop,\nthe following errors could occur:\nimage pull failures\nhealthcheck timeout failures\nkubectl failures on the host\ngeneral network instability of the hypervisor\nAdditional Docker Desktop resources may be freed up using:\n$ docker system prune\nAzure\nGoogle Kubernetes Engine\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [
        {
          "language": "",
          "code": "$ docker system prune",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ docker system prune</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ docker system prune",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ docker system prune</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Docker Desktop",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732130.576322
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/gke/",
      "title": "Istio / Google Kubernetes Engine",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nGoogle Kubernetes Engine\nGoogle Kubernetes Engine\n2 minute read\npage test\nMulti-cluster communication\nFollow these instructions to prepare a GKE cluster for Istio.\nCreate a new cluster.\n$ export PROJECT_ID=`gcloud config get-value project` && \\\n  export M_TYPE=n1-standard-2 && \\\n  export ZONE=us-west2-a && \\\n  export CLUSTER_NAME=${PROJECT_ID}-${RANDOM} && \\\n  gcloud services enable container.googleapis.com && \\\n  gcloud container clusters create $CLUSTER_NAME \\\n  --cluster-version latest \\\n  --machine-type=$M_TYPE \\\n  --num-nodes 4 \\\n  --zone $ZONE \\\n  --project $PROJECT_ID\nThe default installation of Istio requires nodes with >1 vCPU. If you are\ninstalling with the\ndemo configuration profile\n,\nyou can remove the\n--machine-type\nargument to use the smaller\nn1-standard-1\nmachine size instead.\nTo use the Istio CNI feature on GKE Standard, please check the\nCNI installation guide\nfor prerequisite cluster configuration steps. Since the CNI node agent requires the SYS_ADMIN capability, it is not available on GKE Autopilot. Instead, use the istio-init container.\nFor private GKE clusters\nAn automatically created firewall rule does not open port 15017. This is needed by the istiod discovery validation webhook.\nTo review this firewall rule for master access:\n$ gcloud compute firewall-rules list --filter=\"name~gke-${CLUSTER_NAME}-[0-9a-z]*-master\"\nTo replace the existing rule and allow master access:\n$ gcloud compute firewall-rules update <firewall-rule-name> --allow tcp:10250,tcp:443,tcp:15017\nRetrieve your credentials for\nkubectl\n.\n$ gcloud container clusters get-credentials $CLUSTER_NAME \\\n    --zone $ZONE \\\n    --project $PROJECT_ID\nGrant cluster administrator (admin) permissions to the current user. To\ncreate the necessary RBAC rules for Istio, the current user requires admin\npermissions.\n$ kubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=$(gcloud config get-value core/account)\nMulti-cluster communication\nIn some cases, a firewall rule must be explicitly created to allow cross-cluster traffic.\nThe following instructions will allow communication between\nall\nclusters in your project. Adjust the commands as needed.\nGather information about your clusters’ network.\n$ function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n$ ALL_CLUSTER_CIDRS=$(gcloud --project $PROJECT_ID container clusters list --format='value(clusterIpv4Cidr)' | sort | uniq)\n$ ALL_CLUSTER_CIDRS=$(join_by , $(echo \"${ALL_CLUSTER_CIDRS}\"))\n$ ALL_CLUSTER_NETTAGS=$(gcloud --project $PROJECT_ID compute instances list --format='value(tags.items.[0])' | sort | uniq)\n$ ALL_CLUSTER_NETTAGS=$(join_by , $(echo \"${ALL_CLUSTER_NETTAGS}\"))\nCreate the firewall rule.\n$ gcloud compute firewall-rules create istio-multicluster-pods \\\n    --allow=tcp,udp,icmp,esp,ah,sctp \\\n    --direction=INGRESS \\\n    --priority=900 \\\n    --source-ranges=\"${ALL_CLUSTER_CIDRS}\" \\\n    --target-tags=\"${ALL_CLUSTER_NETTAGS}\" --quiet\nDocker Desktop\nHuawei Cloud\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nMulti-cluster communication",
      "code_examples": [
        {
          "language": "",
          "code": "$ export PROJECT_ID=`gcloud config get-value project` && \\\n  export M_TYPE=n1-standard-2 && \\\n  export ZONE=us-west2-a && \\\n  export CLUSTER_NAME=${PROJECT_ID}-${RANDOM} && \\\n  gcloud services enable container.googleapis.com && \\\n  gcloud container clusters create $CLUSTER_NAME \\\n  --cluster-version latest \\\n  --machine-type=$M_TYPE \\\n  --num-nodes 4 \\\n  --zone $ZONE \\\n  --project $PROJECT_ID",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ export PROJECT_ID=`gcloud config get-value project` &amp;&amp; \\\n  export M_TYPE=n1-standard-2 &amp;&amp; \\\n  export ZONE=u..."
        },
        {
          "language": "language-bash",
          "code": "$ export PROJECT_ID=`gcloud config get-value project` && \\\n  export M_TYPE=n1-standard-2 && \\\n  export ZONE=us-west2-a && \\\n  export CLUSTER_NAME=${PROJECT_ID}-${RANDOM} && \\\n  gcloud services enable container.googleapis.com && \\\n  gcloud container clusters create $CLUSTER_NAME \\\n  --cluster-version latest \\\n  --machine-type=$M_TYPE \\\n  --num-nodes 4 \\\n  --zone $ZONE \\\n  --project $PROJECT_ID",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ export PROJECT_ID=`gcloud config get-value project` &amp;&amp; \\\n  export M_TYPE=n1-standard-2 &amp;&amp; \\\n  export ZONE=us-wes..."
        },
        {
          "language": "",
          "code": "--machine-type",
          "element": "<code>--machine-type</code>"
        },
        {
          "language": "",
          "code": "n1-standard-1",
          "element": "<code>n1-standard-1</code>"
        },
        {
          "language": "",
          "code": "$ gcloud compute firewall-rules list --filter=\"name~gke-${CLUSTER_NAME}-[0-9a-z]*-master\"",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud compute firewall-rules list --filter=\"name~gke-${CLUSTER_NAME}-[0-9a-z]*-master\"</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ gcloud compute firewall-rules list --filter=\"name~gke-${CLUSTER_NAME}-[0-9a-z]*-master\"",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud compute firewall-rules list --filter=\"name~gke-${CLUSTER_NAME}-[0-9a-z]*-master\"</code>"
        },
        {
          "language": "",
          "code": "$ gcloud compute firewall-rules update <firewall-rule-name> --allow tcp:10250,tcp:443,tcp:15017",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud compute firewall-rules update &lt;firewall-rule-name&gt; --allow tcp:10250,tcp:443,tcp:15017</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ gcloud compute firewall-rules update <firewall-rule-name> --allow tcp:10250,tcp:443,tcp:15017",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud compute firewall-rules update &lt;firewall-rule-name&gt; --allow tcp:10250,tcp:443,tcp:15017</code>"
        },
        {
          "language": "",
          "code": "$ gcloud container clusters get-credentials $CLUSTER_NAME \\\n    --zone $ZONE \\\n    --project $PROJECT_ID",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud container clusters get-credentials $CLUSTER_NAME \\\n    --zone $ZONE \\\n    --project $PROJECT_ID</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ gcloud container clusters get-credentials $CLUSTER_NAME \\\n    --zone $ZONE \\\n    --project $PROJECT_ID",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud container clusters get-credentials $CLUSTER_NAME \\\n    --zone $ZONE \\\n    --project $PROJECT_ID</code>"
        },
        {
          "language": "",
          "code": "$ kubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=$(gcloud config get-value core/account)",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=$(gcloud config get-..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=$(gcloud config get-value core/account)",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=$(gcloud config get-value..."
        },
        {
          "language": "",
          "code": "$ function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n$ ALL_CLUSTER_CIDRS=$(gcloud --project $PROJECT_ID container clusters list --format='value(clusterIpv4Cidr)' | sort | uniq)\n$ ALL_CLUSTER_CIDRS=$(join_by , $(echo \"${ALL_CLUSTER_CIDRS}\"))\n$ ALL_CLUSTER_NETTAGS=$(gcloud --project $PROJECT_ID compute instances list --format='value(tags.items.[0])' | sort | uniq)\n$ ALL_CLUSTER_NETTAGS=$(join_by , $(echo \"${ALL_CLUSTER_NETTAGS}\"))",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n$ ALL_CLUSTER_CIDRS=$(gcloud --project $PROJECT_ID container cluster..."
        },
        {
          "language": "language-bash",
          "code": "$ function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n$ ALL_CLUSTER_CIDRS=$(gcloud --project $PROJECT_ID container clusters list --format='value(clusterIpv4Cidr)' | sort | uniq)\n$ ALL_CLUSTER_CIDRS=$(join_by , $(echo \"${ALL_CLUSTER_CIDRS}\"))\n$ ALL_CLUSTER_NETTAGS=$(gcloud --project $PROJECT_ID compute instances list --format='value(tags.items.[0])' | sort | uniq)\n$ ALL_CLUSTER_NETTAGS=$(join_by , $(echo \"${ALL_CLUSTER_NETTAGS}\"))",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n$ ALL_CLUSTER_CIDRS=$(gcloud --project $PROJECT_ID container clusters lis..."
        },
        {
          "language": "",
          "code": "$ gcloud compute firewall-rules create istio-multicluster-pods \\\n    --allow=tcp,udp,icmp,esp,ah,sctp \\\n    --direction=INGRESS \\\n    --priority=900 \\\n    --source-ranges=\"${ALL_CLUSTER_CIDRS}\" \\\n    --target-tags=\"${ALL_CLUSTER_NETTAGS}\" --quiet",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud compute firewall-rules create istio-multicluster-pods \\\n    --allow=tcp,udp,icmp,esp,ah,sctp \\\n    --direction=INGRE..."
        },
        {
          "language": "language-bash",
          "code": "$ gcloud compute firewall-rules create istio-multicluster-pods \\\n    --allow=tcp,udp,icmp,esp,ah,sctp \\\n    --direction=INGRESS \\\n    --priority=900 \\\n    --source-ranges=\"${ALL_CLUSTER_CIDRS}\" \\\n    --target-tags=\"${ALL_CLUSTER_NETTAGS}\" --quiet",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ gcloud compute firewall-rules create istio-multicluster-pods \\\n    --allow=tcp,udp,icmp,esp,ah,sctp \\\n    --direction=INGRESS \\\n..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Google Kubernetes Engine",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Multi-cluster communication",
          "id": "multi-cluster-communication"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732133.6525
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/huaweicloud/",
      "title": "Istio / Huawei Cloud",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nHuawei Cloud\nHuawei Cloud\n2 minute read\npage test\nFollow these instructions to prepare a cluster for Istio using the\nHuawei Cloud Container Engine\n.\nYou can deploy a Kubernetes cluster to Huawei Cloud quickly and easily in the\nCloud Container Engine Console\n, which fully supports Istio.\nHuawei offers a\nmanaged control plane\nadd-on for the Huawei Cloud Container Engine,\nwhich you can use instead of installing Istio manually.\nRefer to\nHuawei Application Service Mesh\nfor details and instructions.\nFollowing the\nHuawei Cloud Instructions\nto prepare a cluster before manually installing Istio, proceed as follows:\nLog in to the CCE console. Choose\nDashboard\n>\nBuy Cluster\nto open the\nBuy Hybrid Cluster\npage. An alternative way to open that page is to choose\nResource Management\n>\nClusters\nin the navigation pane and click\nBuy\nnext to\nHybrid Cluster\n.\nOn the\nConfigure Cluster\npage, configure cluster parameters.\nIn this example, a majority of parameters retain default values. After the cluster configuration is complete, click Next:\nCreate Node\nto go to the node creation page.\nIstio release has some requirements for the Kubernetes version,\nselect the version according to Istio’s\nsupport policy\n.\nThe image below shows the GUI where you create and configure the cluster:\nConfigure Cluster\nOn the node creation page, configure the following parameters\nIstio adds some additional resource consumption,\nfrom our experience, reserve at least 4 vCPU and 8 GB memory to begin playing.\nThe image below shows the GUI where you create and configure the node:\nConfigure Node\nConfigure kubectl\nNow you can install Istio on CCE cluster according to\ninstall guide\n.\nConfigure\nELB\nto expose Istio ingress gateway if needed.\nCreate Elastic Load Balancer\nBind the ELB instance to\nistio-ingressgateway\nservice\nSet the ELB instance ID and\nloadBalancerIP\nto\nistio-ingressgateway\n.\n$ kubectl apply -f - <<EOF\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kubernetes.io/elb.class: union\n    kubernetes.io/elb.id: 4ee43d2b-cec5-4100-89eb-2f77837daa63 # ELB ID\n    kubernetes.io/elb.lb-algorithm: ROUND_ROBIN\n  labels:\n    app: istio-ingressgateway\n    install.operator.istio.io/owning-resource: unknown\n    install.operator.istio.io/owning-resource-namespace: istio-system\n    istio: ingressgateway\n    istio.io/rev: default\n    operator.istio.io/component: IngressGateways\n    operator.istio.io/managed: Reconcile\n    operator.istio.io/version: 1.9.0\n    release: istio\n  name: istio-ingressgateway\n  namespace: istio-system\nspec:\n  clusterIP: 10.247.7.192\n  externalTrafficPolicy: Cluster\n  loadBalancerIP: 119.8.36.132     ## ELB EIP\n  ports:\n  - name: status-port\n    nodePort: 32484\n    port: 15021\n    protocol: TCP\n    targetPort: 15021\n  - name: http2\n    nodePort: 30294\n    port: 80\n    protocol: TCP\n    targetPort: 8080\n  - name: https\n    nodePort: 31301\n    port: 443\n    protocol: TCP\n    targetPort: 8443\n  - name: tcp\n    nodePort: 30229\n    port: 31400\n    protocol: TCP\n    targetPort: 31400\n  - name: tls\n    nodePort: 32028\n    port: 15443\n    protocol: TCP\n    targetPort: 15443\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  sessionAffinity: None\n  type: LoadBalancer\nEOF\nStart playing with Istio by trying out the various\ntasks\n.\nGoogle Kubernetes Engine\nIBM Cloud\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [
        {
          "language": "",
          "code": "Cloud Container Engine Console",
          "element": "<code>Cloud Container Engine Console</code>"
        },
        {
          "language": "",
          "code": "istio-ingressgateway",
          "element": "<code>istio-ingressgateway</code>"
        },
        {
          "language": "",
          "code": "loadBalancerIP",
          "element": "<code>loadBalancerIP</code>"
        },
        {
          "language": "",
          "code": "istio-ingressgateway",
          "element": "<code>istio-ingressgateway</code>"
        },
        {
          "language": "",
          "code": "$ kubectl apply -f - <<EOF\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kubernetes.io/elb.class: union\n    kubernetes.io/elb.id: 4ee43d2b-cec5-4100-89eb-2f77837daa63 # ELB ID\n    kubernetes.io/elb.lb-algorithm: ROUND_ROBIN\n  labels:\n    app: istio-ingressgateway\n    install.operator.istio.io/owning-resource: unknown\n    install.operator.istio.io/owning-resource-namespace: istio-system\n    istio: ingressgateway\n    istio.io/rev: default\n    operator.istio.io/component: IngressGateways\n    operator.istio.io/managed: Reconcile\n    operator.istio.io/version: 1.9.0\n    release: istio\n  name: istio-ingressgateway\n  namespace: istio-system\nspec:\n  clusterIP: 10.247.7.192\n  externalTrafficPolicy: Cluster\n  loadBalancerIP: 119.8.36.132     ## ELB EIP\n  ports:\n  - name: status-port\n    nodePort: 32484\n    port: 15021\n    protocol: TCP\n    targetPort: 15021\n  - name: http2\n    nodePort: 30294\n    port: 80\n    protocol: TCP\n    targetPort: 8080\n  - name: https\n    nodePort: 31301\n    port: 443\n    protocol: TCP\n    targetPort: 8443\n  - name: tcp\n    nodePort: 30229\n    port: 31400\n    protocol: TCP\n    targetPort: 31400\n  - name: tls\n    nodePort: 32028\n    port: 15443\n    protocol: TCP\n    targetPort: 15443\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  sessionAffinity: None\n  type: LoadBalancer\nEOF",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kubernetes.io/elb.class: union\n   ..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl apply -f - <<EOF\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kubernetes.io/elb.class: union\n    kubernetes.io/elb.id: 4ee43d2b-cec5-4100-89eb-2f77837daa63 # ELB ID\n    kubernetes.io/elb.lb-algorithm: ROUND_ROBIN\n  labels:\n    app: istio-ingressgateway\n    install.operator.istio.io/owning-resource: unknown\n    install.operator.istio.io/owning-resource-namespace: istio-system\n    istio: ingressgateway\n    istio.io/rev: default\n    operator.istio.io/component: IngressGateways\n    operator.istio.io/managed: Reconcile\n    operator.istio.io/version: 1.9.0\n    release: istio\n  name: istio-ingressgateway\n  namespace: istio-system\nspec:\n  clusterIP: 10.247.7.192\n  externalTrafficPolicy: Cluster\n  loadBalancerIP: 119.8.36.132     ## ELB EIP\n  ports:\n  - name: status-port\n    nodePort: 32484\n    port: 15021\n    protocol: TCP\n    targetPort: 15021\n  - name: http2\n    nodePort: 30294\n    port: 80\n    protocol: TCP\n    targetPort: 8080\n  - name: https\n    nodePort: 31301\n    port: 443\n    protocol: TCP\n    targetPort: 8443\n  - name: tcp\n    nodePort: 30229\n    port: 31400\n    protocol: TCP\n    targetPort: 31400\n  - name: tls\n    nodePort: 32028\n    port: 15443\n    protocol: TCP\n    targetPort: 15443\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  sessionAffinity: None\n  type: LoadBalancer\nEOF",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kubernetes.io/elb.class: union\n    kube..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Huawei Cloud",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732136.0197492
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/ibm/",
      "title": "Istio / IBM Cloud",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nIBM Cloud\nIBM Cloud\n2 minute read\npage test\nFollow these instructions to prepare a cluster for Istio using the\nIBM Cloud Kubernetes Service\n.\nIBM offers a\nmanaged control plane\nadd-on for the IBM Cloud Kubernetes Service,\nwhich you can use instead of installing Istio manually.\nRefer to\nIstio on IBM Cloud Kubernetes Service\nfor details and instructions.\nTo prepare a cluster before manually installing Istio, proceed as follows:\nInstall the IBM Cloud CLI, the IBM Cloud Kubernetes Service plug-in, and the Kubernetes CLI\n.\nCreate a standard Kubernetes cluster using the following command.\nReplace\n<cluster-name>\nwith the name you want to use for your cluster and\n<zone-name>\nwith the name of an\navailable zone.\nYou can display your available zones by running\nibmcloud ks zones --provider classic\n.\nThe IBM Cloud Kubernetes Service\nLocations Reference Guide\ndescribes the available zones and how to specify them.\n$ ibmcloud ks cluster create classic --zone <zone-name> --machine-type b3c.4x16 \\\n  --workers 3 --name <cluster-name>\nIf you already have a private or a public VLAN, you must specify them in the above command\nusing the\n--private-vlan\nand\n--public-vlan\noptions. Otherwise, they will be automatically created for you.\nYou can view your available VLANs by running\nibmcloud ks vlans --zone <zone-name>\n.\nRun the following command to download your cluster configuration.\n$ ibmcloud ks cluster config --cluster <cluster-name>\nMake sure to use the\nkubectl\nCLI version that matches the Kubernetes version of your cluster.\nHuawei Cloud\nk3d\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [
        {
          "language": "",
          "code": "<cluster-name>",
          "element": "<code>&lt;cluster-name&gt;</code>"
        },
        {
          "language": "",
          "code": "<zone-name>",
          "element": "<code>&lt;zone-name&gt;</code>"
        },
        {
          "language": "",
          "code": "ibmcloud ks zones --provider classic",
          "element": "<code>ibmcloud ks zones --provider classic</code>"
        },
        {
          "language": "",
          "code": "$ ibmcloud ks cluster create classic --zone <zone-name> --machine-type b3c.4x16 \\\n  --workers 3 --name <cluster-name>",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ ibmcloud ks cluster create classic --zone &lt;zone-name&gt; --machine-type b3c.4x16 \\\n  --workers 3 --name &lt;cluster-name..."
        },
        {
          "language": "language-bash",
          "code": "$ ibmcloud ks cluster create classic --zone <zone-name> --machine-type b3c.4x16 \\\n  --workers 3 --name <cluster-name>",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ ibmcloud ks cluster create classic --zone &lt;zone-name&gt; --machine-type b3c.4x16 \\\n  --workers 3 --name &lt;cluster-name&gt;<..."
        },
        {
          "language": "",
          "code": "--private-vlan",
          "element": "<code>--private-vlan</code>"
        },
        {
          "language": "",
          "code": "--public-vlan",
          "element": "<code>--public-vlan</code>"
        },
        {
          "language": "",
          "code": "ibmcloud ks vlans --zone <zone-name>",
          "element": "<code>ibmcloud ks vlans --zone &lt;zone-name&gt;</code>"
        },
        {
          "language": "",
          "code": "$ ibmcloud ks cluster config --cluster <cluster-name>",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ ibmcloud ks cluster config --cluster &lt;cluster-name&gt;</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ ibmcloud ks cluster config --cluster <cluster-name>",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ ibmcloud ks cluster config --cluster &lt;cluster-name&gt;</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "IBM Cloud",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732138.47958
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/k3d/",
      "title": "Istio / k3d",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nk3d\nk3d\n3 minute read\npage test\nPrerequisites\nInstallation\nSet up Istio for k3d\nSet up Dashboard UI for k3d\nUninstall\nk3d is a lightweight wrapper to run\nk3s\n(Rancher Lab’s minimal Kubernetes distribution) in docker.\nk3d makes it very easy to create single- and multi-node k3s clusters in docker, e.g. for local development on Kubernetes.\nPrerequisites\nTo use k3d, you will also need to\ninstall docker\n.\nInstall the latest version of\nk3d\n.\nTo interact with the Kubernetes cluster\nkubectl\n(Optional)\nHelm\nis the package manager for Kubernetes\nInstallation\nCreate a cluster and disable\nTraefik\nwith the following command:\n$ k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=traefik@server:*'\nTo see the list of k3d clusters, use the following command:\n$ k3d cluster list\nk3s-default\nTo list the local Kubernetes contexts, use the following command.\n$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         k3d-k3s-default      k3d-k3s-default      k3d-k3s-default\nk3d-\nis prefixed to the context and cluster names, for example:\nk3d-k3s-default\nIf you run multiple clusters, you need to choose which cluster\nkubectl\ntalks to. You can set a default cluster\nfor\nkubectl\nby setting the current context in the\nKubernetes kubeconfig\nfile. Additionally you can run following command\nto set the current context for\nkubectl\n.\n$ kubectl config use-context k3d-k3s-default\nSwitched to context \"k3d-k3s-default\".\nSet up Istio for k3d\nOnce you are done setting up a k3d cluster, you can proceed to\ninstall Istio with Helm 3\non it.\n$ kubectl create namespace istio-system\n$ helm install istio-base istio/base -n istio-system --wait\n$ helm install istiod istio/istiod -n istio-system --wait\n(Optional) Install an ingress gateway:\n$ helm install istio-ingressgateway istio/gateway -n istio-system --wait\nSet up Dashboard UI for k3d\nk3d does not have a built-in Dashboard UI like minikube. But you can still set up Dashboard, a web based Kubernetes UI, to view your cluster.\nFollow these instructions to set up Dashboard for k3d.\nTo deploy Dashboard, run the following command:\n$ helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/\n$ helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard\nVerify that Dashboard is deployed and running.\n$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-8c47d4b5d-dd2ks    1/1     Running   0          25s\nkubernetes-dashboard-67bd8fc546-4xfmm        1/1     Running   0          25s\nCreate a\nServiceAccount\nand\nClusterRoleBinding\nto provide admin access to the newly created cluster.\n$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user\nTo log in to your Dashboard, you need a Bearer Token. Use the following command to store the token in a variable.\n$ token=$(kubectl -n kubernetes-dashboard create token admin-user)\nDisplay the token using the\necho\ncommand and copy it to use for logging in to your Dashboard.\n$ echo $token\nYou can access your Dashboard using the kubectl command-line tool by running the following command:\n$ kubectl proxy\nStarting to serve on 127.0.0.1:8001\nClick\nKubernetes Dashboard\nto\nview your deployments and services.\nYou have to save your token somewhere, otherwise you have to run step number 4 everytime you need a token to log in to your Dashboard.\nUninstall\nWhen you are done experimenting and you want to delete the existing cluster, use the following command:\n$ k3d cluster delete k3s-default\nDeleting cluster \"k3s-default\" ...\nIBM Cloud\nkind\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nPrerequisites\nInstallation\nSet up Istio for k3d\nSet up Dashboard UI for k3d\nUninstall",
      "code_examples": [
        {
          "language": "",
          "code": "$ k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=traefik@server:*'",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=tra..."
        },
        {
          "language": "language-bash",
          "code": "$ k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=traefik@server:*'",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=traefik@..."
        },
        {
          "language": "",
          "code": "$ k3d cluster list\nk3s-default",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ k3d cluster list\nk3s-default</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ k3d cluster list\nk3s-default",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ k3d cluster list\nk3s-default</code>"
        },
        {
          "language": "",
          "code": "$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         k3d-k3s-default      k3d-k3s-default      k3d-k3s-default",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         k3..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         k3d-k3s-default      k3d-k3s-default      k3d-k3s-default",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         k3d-k3s..."
        },
        {
          "language": "",
          "code": "k3d-k3s-default",
          "element": "<code>k3d-k3s-default</code>"
        },
        {
          "language": "",
          "code": "$ kubectl config use-context k3d-k3s-default\nSwitched to context \"k3d-k3s-default\".",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config use-context k3d-k3s-default\nSwitched to context \"k3d-k3s-default\".</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl config use-context k3d-k3s-default\nSwitched to context \"k3d-k3s-default\".",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config use-context k3d-k3s-default\nSwitched to context \"k3d-k3s-default\".</code>"
        },
        {
          "language": "",
          "code": "$ kubectl create namespace istio-system\n$ helm install istio-base istio/base -n istio-system --wait\n$ helm install istiod istio/istiod -n istio-system --wait",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create namespace istio-system\n$ helm install istio-base istio/base -n istio-system --wait\n$ helm install istiod ist..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl create namespace istio-system\n$ helm install istio-base istio/base -n istio-system --wait\n$ helm install istiod istio/istiod -n istio-system --wait",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create namespace istio-system\n$ helm install istio-base istio/base -n istio-system --wait\n$ helm install istiod istio/is..."
        },
        {
          "language": "",
          "code": "$ helm install istio-ingressgateway istio/gateway -n istio-system --wait",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ helm install istio-ingressgateway istio/gateway -n istio-system --wait</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ helm install istio-ingressgateway istio/gateway -n istio-system --wait",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ helm install istio-ingressgateway istio/gateway -n istio-system --wait</code>"
        },
        {
          "language": "",
          "code": "$ helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/\n$ helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/\n$ helm upgrade --install kubernetes-dashboard ku..."
        },
        {
          "language": "language-bash",
          "code": "$ helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/\n$ helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/\n$ helm upgrade --install kubernetes-dashboard kuberne..."
        },
        {
          "language": "",
          "code": "$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-8c47d4b5d-dd2ks    1/1     Running   0          25s\nkubernetes-dashboard-67bd8fc546-4xfmm        1/1     Running   0          25s",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashb..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-8c47d4b5d-dd2ks    1/1     Running   0          25s\nkubernetes-dashboard-67bd8fc546-4xfmm        1/1     Running   0          25s",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-..."
        },
        {
          "language": "",
          "code": "ServiceAccount",
          "element": "<code>ServiceAccount</code>"
        },
        {
          "language": "",
          "code": "ClusterRoleBinding",
          "element": "<code>ClusterRoleBinding</code>"
        },
        {
          "language": "",
          "code": "$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboar..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard adm..."
        },
        {
          "language": "",
          "code": "$ token=$(kubectl -n kubernetes-dashboard create token admin-user)",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ token=$(kubectl -n kubernetes-dashboard create token admin-user)</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ token=$(kubectl -n kubernetes-dashboard create token admin-user)",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ token=$(kubectl -n kubernetes-dashboard create token admin-user)</code>"
        },
        {
          "language": "",
          "code": "$ echo $token",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ echo $token</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ echo $token",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ echo $token</code>"
        },
        {
          "language": "",
          "code": "$ kubectl proxy\nStarting to serve on 127.0.0.1:8001",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl proxy\nStarting to serve on 127.0.0.1:8001</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl proxy\nStarting to serve on 127.0.0.1:8001",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl proxy\nStarting to serve on 127.0.0.1:8001</code>"
        },
        {
          "language": "",
          "code": "$ k3d cluster delete k3s-default\nDeleting cluster \"k3s-default\" ...",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ k3d cluster delete k3s-default\nDeleting cluster \"k3s-default\" ...</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ k3d cluster delete k3s-default\nDeleting cluster \"k3s-default\" ...",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ k3d cluster delete k3s-default\nDeleting cluster \"k3s-default\" ...</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "k3d",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Installation",
          "id": "installation"
        },
        {
          "level": 2,
          "text": "Set up Istio for k3d",
          "id": "set-up-istio-for-k3d"
        },
        {
          "level": 2,
          "text": "Set up Dashboard UI for k3d",
          "id": "set-up-dashboard-ui-for-k3d"
        },
        {
          "level": 2,
          "text": "Uninstall",
          "id": "uninstall"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732141.4877188
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/kind/",
      "title": "Istio / kind",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nkind\nkind\n3 minute read\npage test\nPrerequisites\nInstallation steps\nSetup LoadBalancer for kind\nSetup Dashboard UI for kind\nkind\nis a tool for running local Kubernetes clusters using Docker container\nnodes\n.\nkind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.\nFollow these instructions to prepare a kind cluster for Istio installation.\nPrerequisites\nPlease use the latest Go version.\nTo use kind, you will also need to\ninstall docker\n.\nInstall the latest version of\nkind\n.\nIncrease Docker’s\nmemory limit\n.\nInstallation steps\nCreate a cluster with the following command:\n$ kind create cluster --name istio-testing\n--name\nis used to assign a specific name to the cluster. By default, the cluster will be given the name “kind”.\nTo see the list of kind clusters, use the following command:\n$ kind get clusters\nistio-testing\nTo list the local Kubernetes contexts, use the following command.\n$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         kind-istio-testing   kind-istio-testing   kind-istio-testing\n          minikube             minikube             minikube\nkind\nis prefixed to the context and cluster names, for example:\nkind-istio-testing\nIf you run multiple clusters, you need to choose which cluster\nkubectl\ntalks to. You can set a default cluster\nfor\nkubectl\nby setting the current context in the\nKubernetes kubeconfig\nfile. Additionally you can run following command\nto set the current context for\nkubectl\n.\n$ kubectl config use-context kind-istio-testing\nSwitched to context \"kind-istio-testing\".\nOnce you are done setting up a kind cluster, you can proceed to\ninstall Istio\non it.\nWhen you are done experimenting and you want to delete the existing cluster, use the following command:\n$ kind delete cluster --name istio-testing\nDeleting cluster \"istio-testing\" ...\nSetup LoadBalancer for kind\nkind does not have any built-in way to provide IP addresses to your\nLoadbalancer\nservice types, to ensure IP address assignments to\nGateway\nServices please consult\nthis guide\nfor more information.\nSetup Dashboard UI for kind\nkind does not have a built-in Dashboard UI like minikube. But you can still setup Dashboard, a web-based Kubernetes UI, to view your cluster.\nFollow these instructions to set up Dashboard for kind.\nTo deploy Dashboard, run the following command:\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\nVerify that Dashboard is deployed and running.\n$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-76585494d8-zdb66   1/1     Running   0          39s\nkubernetes-dashboard-b7ffbc8cb-zl8zg         1/1     Running   0          39s\nCreate a\nServiceAccount\nand\nClusterRoleBinding\nto provide admin access to the newly created cluster.\n$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user\nTo log in to your Dashboard, you need a Bearer Token. Use the following command to store the token in a variable.\n$ token=$(kubectl -n kubernetes-dashboard create token admin-user)\nDisplay the token using the\necho\ncommand and copy it to use for logging in to your Dashboard.\n$ echo $token\nYou can access your Dashboard using the kubectl command-line tool by running the following command:\n$ kubectl proxy\nStarting to serve on 127.0.0.1:8001\nClick\nKubernetes Dashboard\nto\nview your deployments and services.\nYou have to save your token somewhere, otherwise you have to run step number 4 everytime you need a token to log in to your Dashboard.\nk3d\nKops\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nPrerequisites\nInstallation steps\nSetup LoadBalancer for kind\nSetup Dashboard UI for kind",
      "code_examples": [
        {
          "language": "",
          "code": "$ kind create cluster --name istio-testing",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kind create cluster --name istio-testing</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kind create cluster --name istio-testing",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kind create cluster --name istio-testing</code>"
        },
        {
          "language": "",
          "code": "$ kind get clusters\nistio-testing",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kind get clusters\nistio-testing</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kind get clusters\nistio-testing",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kind get clusters\nistio-testing</code>"
        },
        {
          "language": "",
          "code": "$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         kind-istio-testing   kind-istio-testing   kind-istio-testing\n          minikube             minikube             minikube",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         ki..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         kind-istio-testing   kind-istio-testing   kind-istio-testing\n          minikube             minikube             minikube",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config get-contexts\nCURRENT   NAME                 CLUSTER              AUTHINFO             NAMESPACE\n*         kind-is..."
        },
        {
          "language": "",
          "code": "kind-istio-testing",
          "element": "<code>kind-istio-testing</code>"
        },
        {
          "language": "",
          "code": "$ kubectl config use-context kind-istio-testing\nSwitched to context \"kind-istio-testing\".",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config use-context kind-istio-testing\nSwitched to context \"kind-istio-testing\".</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl config use-context kind-istio-testing\nSwitched to context \"kind-istio-testing\".",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl config use-context kind-istio-testing\nSwitched to context \"kind-istio-testing\".</code>"
        },
        {
          "language": "",
          "code": "$ kind delete cluster --name istio-testing\nDeleting cluster \"istio-testing\" ...",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kind delete cluster --name istio-testing\nDeleting cluster \"istio-testing\" ...</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kind delete cluster --name istio-testing\nDeleting cluster \"istio-testing\" ...",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kind delete cluster --name istio-testing\nDeleting cluster \"istio-testing\" ...</code>"
        },
        {
          "language": "",
          "code": "Loadbalancer",
          "element": "<code>Loadbalancer</code>"
        },
        {
          "language": "",
          "code": "$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</code>"
        },
        {
          "language": "",
          "code": "$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-76585494d8-zdb66   1/1     Running   0          39s\nkubernetes-dashboard-b7ffbc8cb-zl8zg         1/1     Running   0          39s",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashb..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-metrics-scraper-76585494d8-zdb66   1/1     Running   0          39s\nkubernetes-dashboard-b7ffbc8cb-zl8zg         1/1     Running   0          39s",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl get pod -n kubernetes-dashboard\nNAME                                         READY   STATUS    RESTARTS   AGE\ndashboard-..."
        },
        {
          "language": "",
          "code": "ServiceAccount",
          "element": "<code>ServiceAccount</code>"
        },
        {
          "language": "",
          "code": "ClusterRoleBinding",
          "element": "<code>ClusterRoleBinding</code>"
        },
        {
          "language": "",
          "code": "$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboar..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl create serviceaccount -n kubernetes-dashboard admin-user\n$ kubectl create clusterrolebinding -n kubernetes-dashboard adm..."
        },
        {
          "language": "",
          "code": "$ token=$(kubectl -n kubernetes-dashboard create token admin-user)",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ token=$(kubectl -n kubernetes-dashboard create token admin-user)</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ token=$(kubectl -n kubernetes-dashboard create token admin-user)",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ token=$(kubectl -n kubernetes-dashboard create token admin-user)</code>"
        },
        {
          "language": "",
          "code": "$ echo $token",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ echo $token</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ echo $token",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ echo $token</code>"
        },
        {
          "language": "",
          "code": "$ kubectl proxy\nStarting to serve on 127.0.0.1:8001",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl proxy\nStarting to serve on 127.0.0.1:8001</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl proxy\nStarting to serve on 127.0.0.1:8001",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl proxy\nStarting to serve on 127.0.0.1:8001</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "kind",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Installation steps",
          "id": "installation-steps"
        },
        {
          "level": 2,
          "text": "Setup LoadBalancer for kind",
          "id": "setup-loadbalancer-for-kind"
        },
        {
          "level": 2,
          "text": "Setup Dashboard UI for kind",
          "id": "setup-dashboard-ui-for-kind"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732144.0100439
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/kops/",
      "title": "Istio / Kops",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nKops\nKops\nNo special configuration is required to run Istio on Kubernetes clusters version 1.22 or newer. For prior Kubernetes versions, you will need to continue to perform these steps.\nIf you wish to run Istio\nSecret Discovery Service\n(SDS) for your mesh on Kops managed clusters, you must add\nextra configurations\nto enable service account token projection volumes in the api-server.\nOpen the configuration file:\n$ kops edit cluster $YOURCLUSTER\nAdd the following in the configuration file:\nkubeAPIServer:\n    apiAudiences:\n    - api\n    - istio-ca\n    serviceAccountIssuer: kubernetes.default.svc\nPerform the update:\n$ kops update cluster\n$ kops update cluster --yes\nLaunch the rolling update:\n$ kops rolling-update cluster\n$ kops rolling-update cluster --yes\nkind\nKubernetes Gardener\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [
        {
          "language": "",
          "code": "$ kops edit cluster $YOURCLUSTER",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kops edit cluster $YOURCLUSTER</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kops edit cluster $YOURCLUSTER",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kops edit cluster $YOURCLUSTER</code>"
        },
        {
          "language": "",
          "code": "kubeAPIServer:\n    apiAudiences:\n    - api\n    - istio-ca\n    serviceAccountIssuer: kubernetes.default.svc",
          "element": "<pre><code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">kubeAPIServer:\n    apiAudiences:\n    - api\n    - istio-ca\n    serviceAccountIssuer: kubernetes.default.svc</code></pre>"
        },
        {
          "language": "language-yaml",
          "code": "kubeAPIServer:\n    apiAudiences:\n    - api\n    - istio-ca\n    serviceAccountIssuer: kubernetes.default.svc",
          "element": "<code class=\"language-yaml\" data-expandlinks=\"true\" data-repo=\"istio\">kubeAPIServer:\n    apiAudiences:\n    - api\n    - istio-ca\n    serviceAccountIssuer: kubernetes.default.svc</code>"
        },
        {
          "language": "",
          "code": "$ kops update cluster\n$ kops update cluster --yes",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kops update cluster\n$ kops update cluster --yes</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kops update cluster\n$ kops update cluster --yes",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kops update cluster\n$ kops update cluster --yes</code>"
        },
        {
          "language": "",
          "code": "$ kops rolling-update cluster\n$ kops rolling-update cluster --yes",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kops rolling-update cluster\n$ kops rolling-update cluster --yes</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kops rolling-update cluster\n$ kops rolling-update cluster --yes",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kops rolling-update cluster\n$ kops rolling-update cluster --yes</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Kops",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732147.037387
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/gardener/",
      "title": "Istio / Kubernetes Gardener",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nKubernetes Gardener\nKubernetes Gardener\n3 minute read\npage test\nBootstrapping Gardener\nInstall and configure\nkubectl\nAccess Gardener\nCreating a Kubernetes cluster\nConfigure\nkubectl\nfor your cluster\nCleaning up\nBootstrapping Gardener\nTo set up your own\nGardener\nfor your organization’s Kubernetes-as-a-Service needs, follow the\ndocumentation\n.\nFor testing purposes, you can set up\nGardener on your laptop\nby checking out the source code repository and simply running\nmake kind-up gardener-up\n(the easiest developer way of checking out Gardener!).\nAlternatively,\n23 Technologies GmbH\noffers a fully-managed Gardener service that conveniently works with all supported cloud providers and comes with a free trial:\nOkeanos\n. Similarly, cloud providers such as\nSTACKIT\n,\nB'Nerd\n,\nMetalStack\n, and many others run Gardener as their Kubernetes Engine.\nTo learn more about the inception of this open source project, read\nGardener Project Update\nand\nGardener - The Kubernetes Botanist\non\nkubernetes.io\n.\nGardener yourself a Shoot with Istio, custom Domains, and Certificates\nis a detailed tutorial for the end user of Gardener.\nInstall and configure\nkubectl\nIf you already have\nkubectl\nCLI, run\nkubectl version --short\nto check\nthe version. You need a current version that at least matches your Kubernetes\ncluster version you want to order. If your\nkubectl\nis older, follow the\nnext step to install a newer version.\nInstall the\nkubectl\nCLI\n.\nAccess Gardener\nCreate a project in the Gardener dashboard. This will essentially create a\nKubernetes namespace with the name\ngarden-<my-project>\n.\nConfigure access to your Gardener project\nusing a kubeconfig.\nYou can skip this step if you intend to create and interact with your cluster using the Gardener dashboard and the embedded webterminal; this step is only needed for programmatic access.\nIf you are not the Gardener Administrator already, you can create a technical user in the Gardener dashboard:\ngo to the “Members” section and add a service account. You can then download the kubeconfig for your project.\nMake sure you\nexport KUBECONFIG=garden-my-project.yaml\nin your shell.\nCreating a Kubernetes cluster\nYou can create your cluster using the\nkubectl\ncli by providing a cluster\nspecification yaml file. You can find an example for GCP\nhere\n.\nMake sure the namespace matches that of your project. Then apply the\nprepared so-called “shoot” cluster manifest with\nkubectl\n:\n$ kubectl apply --filename my-cluster.yaml\nAn easier alternative is to create the cluster following the cluster creation\nwizard in the Gardener dashboard:\nConfigure\nkubectl\nfor your cluster\nYou can now download the kubeconfig for your freshly created cluster in the\nGardener dashboard or via cli as follows:\n$ kubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode > my-cluster.yaml\nThis kubeconfig file has full administrator access to you cluster.\nFor any activities with the payload cluster be sure you have\nexport KUBECONFIG=my-cluster.yaml\nset.\nCleaning up\nUse the Gardener dashboard to delete your cluster, or execute the following with\nkubectl\npointing to your\ngarden-my-project.yaml\nkubeconfig:\n$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.garden.sapcloud.io/deletion=true\n$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project delete shoot my-cluster\nKops\nKubeSphere Container Platform\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nBootstrapping Gardener\nInstall and configure\nkubectl\nAccess Gardener\nCreating a Kubernetes cluster\nConfigure\nkubectl\nfor your cluster\nCleaning up",
      "code_examples": [
        {
          "language": "",
          "code": "make kind-up gardener-up",
          "element": "<code>make kind-up gardener-up</code>"
        },
        {
          "language": "",
          "code": "23 Technologies GmbH",
          "element": "<code>23 Technologies GmbH</code>"
        },
        {
          "language": "",
          "code": "kubernetes.io",
          "element": "<code>kubernetes.io</code>"
        },
        {
          "language": "",
          "code": "kubectl version --short",
          "element": "<code>kubectl version --short</code>"
        },
        {
          "language": "",
          "code": "garden-<my-project>",
          "element": "<code>garden-&lt;my-project&gt;</code>"
        },
        {
          "language": "",
          "code": "export KUBECONFIG=garden-my-project.yaml",
          "element": "<code>export KUBECONFIG=garden-my-project.yaml</code>"
        },
        {
          "language": "",
          "code": "$ kubectl apply --filename my-cluster.yaml",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply --filename my-cluster.yaml</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ kubectl apply --filename my-cluster.yaml",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl apply --filename my-cluster.yaml</code>"
        },
        {
          "language": "",
          "code": "$ kubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode > my-cluster.yaml",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode > my-cluster.yaml",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode &gt;..."
        },
        {
          "language": "",
          "code": "export KUBECONFIG=my-cluster.yaml",
          "element": "<code>export KUBECONFIG=my-cluster.yaml</code>"
        },
        {
          "language": "",
          "code": "garden-my-project.yaml",
          "element": "<code>garden-my-project.yaml</code>"
        },
        {
          "language": "",
          "code": "$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.garden.sapcloud.io/deletion=true\n$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project delete shoot my-cluster",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.garden.sa..."
        },
        {
          "language": "language-bash",
          "code": "$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.garden.sapcloud.io/deletion=true\n$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project delete shoot my-cluster",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.garden.sapclou..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Kubernetes Gardener",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Bootstrapping Gardener",
          "id": "bootstrapping-gardener"
        },
        {
          "level": 2,
          "text": "Cleaning up",
          "id": "cleaning-up"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        },
        {
          "level": 3,
          "text": "Install and configurekubectl",
          "id": "install-and-configure-kubectl"
        },
        {
          "level": 3,
          "text": "Access Gardener",
          "id": "access-gardener"
        },
        {
          "level": 3,
          "text": "Creating a Kubernetes cluster",
          "id": "creating-a-kubernetes-cluster"
        },
        {
          "level": 3,
          "text": "Configurekubectlfor your cluster",
          "id": "configure-kubectl-for-your-cluster"
        }
      ],
      "timestamp": 1750732150.285183
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/kubesphere/",
      "title": "Istio / KubeSphere Container Platform",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nKubeSphere Container Platform\nKubeSphere Container Platform\n2 minute read\npage test\nPrerequisites\nProvisioning a Kubernetes cluster\nEnable installing Istio on Kubernetes\nThis page was last updated March 9, 2021.\nThis vendor-provided document has not been tested on the Istio 1.9 release and may contain bugs.\nFollow these instructions to prepare the\nKubeSphere Container Platform\nfor Istio. You can download KubeSphere to easily install a Kubernetes cluster on your Linux machines.\nKubeSphere provides\nAll-in-One\nand\nMulti-Node\ninstallations. This enables quick setup and manages Kubernetes and Istio in a unified web console. This tutorial will walk you through the All-in-One installation. Reference\nMulti-node Installation\nfor further information.\nPrerequisites\nA Linux machine that is either a virtual machine or bare metal. This machine requires at a minimum:\nHardware:\nCPU: at least 2 Cores\nMemory: at least 4\nGB\nOperating Systems:\nCentOS 7.4 ~ 7.7 (\n64-bit\n)\nUbuntu 16.04/18.04 LTS (\n64-bit\n)\nRHEL 7.4 (\n64-bit\n)\nDebian Stretch 9.5 (\n64-bit\n)\nEnsure your firewall meets the\nport requirements\n. If this is not immediately feasible, you may evaluate Istio and KubeSphere by disabling the firewall as documented in your distribution.\nProvisioning a Kubernetes cluster\nDownload KubeSphere to your Linux machine, move to the KubeSphere directory. For example, if the created directory is\nkubesphere-all-v2.1.1\n:\n$ curl -L https://kubesphere.io/download/stable/latest > installer.tar.gz\n$ tar -xzf installer.tar.gz\n$ cd kubesphere-all-v2.1.1/scripts\nExecute the installation script, it will create a standard Kubernetes cluster. Select the\n“1) All-in-one”\noption when prompted:\n$ ./install.sh\nInstallation may take 15 ~ 20 minutes. Wait until all pods are running. Access the console using the account information obtained from the installation logs:\n#####################################################\n###              Welcome to KubeSphere!           ###\n#####################################################\nConsole: http://192.168.0.8:30880\nAccount: admin\nPassword: It will be generated by KubeSphere Installer\nAt the same time, Kubernetes has been installed into your environment.\nEnable installing Istio on Kubernetes\nKubeSphere will install Istio within Kubernetes. Now reference\nEnable Service Mesh\nto enable Istio.\nKubernetes Gardener\nMicroK8s\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nPrerequisites\nProvisioning a Kubernetes cluster\nEnable installing Istio on Kubernetes",
      "code_examples": [
        {
          "language": "",
          "code": "kubesphere-all-v2.1.1",
          "element": "<code>kubesphere-all-v2.1.1</code>"
        },
        {
          "language": "",
          "code": "$ curl -L https://kubesphere.io/download/stable/latest > installer.tar.gz\n$ tar -xzf installer.tar.gz\n$ cd kubesphere-all-v2.1.1/scripts",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ curl -L https://kubesphere.io/download/stable/latest &gt; installer.tar.gz\n$ tar -xzf installer.tar.gz\n$ cd kubesphere-all-..."
        },
        {
          "language": "language-bash",
          "code": "$ curl -L https://kubesphere.io/download/stable/latest > installer.tar.gz\n$ tar -xzf installer.tar.gz\n$ cd kubesphere-all-v2.1.1/scripts",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ curl -L https://kubesphere.io/download/stable/latest &gt; installer.tar.gz\n$ tar -xzf installer.tar.gz\n$ cd kubesphere-all-v2.1...."
        },
        {
          "language": "",
          "code": "$ ./install.sh",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ ./install.sh</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ ./install.sh",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ ./install.sh</code>"
        },
        {
          "language": "",
          "code": "#####################################################\n###              Welcome to KubeSphere!           ###\n#####################################################\nConsole: http://192.168.0.8:30880\nAccount: admin\nPassword: It will be generated by KubeSphere Installer",
          "element": "<pre><code class=\"language-plain\" data-expandlinks=\"true\" data-repo=\"istio\">#####################################################\n###              Welcome to KubeSphere!           ###\n################..."
        },
        {
          "language": "language-plain",
          "code": "#####################################################\n###              Welcome to KubeSphere!           ###\n#####################################################\nConsole: http://192.168.0.8:30880\nAccount: admin\nPassword: It will be generated by KubeSphere Installer",
          "element": "<code class=\"language-plain\" data-expandlinks=\"true\" data-repo=\"istio\">#####################################################\n###              Welcome to KubeSphere!           ###\n#####################..."
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "KubeSphere Container Platform",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Provisioning a Kubernetes cluster",
          "id": "provisioning-a-kubernetes-cluster"
        },
        {
          "level": 2,
          "text": "Enable installing Istio on Kubernetes",
          "id": "enable-installing-istio-on-kubernetes"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732152.815434
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/microk8s/",
      "title": "Istio / MicroK8s",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nMicroK8s\nMicroK8s\nThis page was last updated August 28, 2019.\nThis vendor-provided document has not been tested on the Istio 1.9 release and may contain bugs.\nFollow these instructions to prepare MicroK8s for using Istio.\nAdministrative privileges are required to run MicroK8s.\nInstall the latest version of\nMicroK8s\nusing the command\n$ sudo snap install microk8s --classic\nEnable Istio with the following command:\n$ microk8s.enable istio\nWhen prompted, choose whether to enforce mutual TLS authentication among sidecars.\nIf you have a mixed deployment with non-Istio and Istio enabled services or you’re unsure, choose No.\nPlease run the following command to check deployment progress:\n$ watch microk8s.kubectl get all --all-namespaces\nKubeSphere Container Platform\nMinikube\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [
        {
          "language": "",
          "code": "$ sudo snap install microk8s --classic",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ sudo snap install microk8s --classic</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ sudo snap install microk8s --classic",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ sudo snap install microk8s --classic</code>"
        },
        {
          "language": "",
          "code": "$ microk8s.enable istio",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ microk8s.enable istio</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ microk8s.enable istio",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ microk8s.enable istio</code>"
        },
        {
          "language": "",
          "code": "$ watch microk8s.kubectl get all --all-namespaces",
          "element": "<pre><code><pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ watch microk8s.kubectl get all --all-namespaces</code></pre></code></pre>"
        },
        {
          "language": "",
          "code": "$ watch microk8s.kubectl get all --all-namespaces",
          "element": "<code><pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ watch microk8s.kubectl get all --all-namespaces</code></pre></code>"
        },
        {
          "language": "",
          "code": "$ watch microk8s.kubectl get all --all-namespaces",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ watch microk8s.kubectl get all --all-namespaces</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ watch microk8s.kubectl get all --all-namespaces",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ watch microk8s.kubectl get all --all-namespaces</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "MicroK8s",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732155.319623
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/minikube/",
      "title": "Istio / Minikube",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nMinikube\nMinikube\n2 minute read\npage test\nPrerequisites\nInstallation steps\nFollow these instructions to prepare minikube for Istio installation with sufficient\nresources to run Istio and some basic applications.\nPrerequisites\nAdministrative privileges are required to run minikube.\nTo enable the\nSecret Discovery Service\n(SDS) for your mesh, you must add\nextra configurations\nto your Kubernetes deployment.\nRefer to the\napi-server\nreference docs\nfor the most up-to-date flags.\nInstallation steps\nInstall the latest version of\nminikube\nand a\nminikube hypervisor driver\n.\nIf you’re not using the default driver, set your minikube hypervisor driver.\nFor example, if you installed the KVM hypervisor, set the\ndriver\nwithin the minikube configuration using the following command:\n$ minikube config set driver kvm2\nStart minikube with 16384\nMB\nof memory and 4\nCPUs\n. This example uses Kubernetes version\n1.26.1\n.\nYou can change the version to any Kubernetes version supported by Istio by altering the\n--kubernetes-version\nvalue:\n$ minikube start --memory=16384 --cpus=4 --kubernetes-version=v1.26.1\nDepending on the hypervisor you use and the platform on which the hypervisor\nis run, minimum memory requirements vary. 16384\nMB\nis sufficient to run\nIstio and bookinfo.\nIf you don’t have enough RAM allocated to the minikube\nvirtual machine, the following errors could occur:\nimage pull failures\nhealthcheck timeout failures\nkubectl failures on the host\ngeneral network instability of the virtual machine and the host\ncomplete lock-up of the virtual machine\nhost NMI watchdog reboots\nOne effective way to monitor memory usage in minikube is to\nssh\ninto the minikube virtual machine\nand from that prompt run the top command:\n$ minikube ssh\n$ top\nGiB Mem : 12.4/15.7\nThis shows 12.4GiB used of an available 15.7 GiB RAM within the virtual\nmachine. This data was generated with the VMWare Fusion hypervisor on a\nMacbook Pro 13\" with 16GiB RAM running Istio 1.2 with bookinfo installed.\n(Optional, recommended) If you want minikube to provide a load balancer for use\nby Istio, you can use the\nminikube tunnel\nfeature.\nRun this command in a different terminal, because the minikube tunnel feature will block your\nterminal to output diagnostic information about the network:\n$ minikube tunnel\nSometimes minikube does not clean up the tunnel network properly. To force a proper\ncleanup:\n$ minikube tunnel --cleanup\nMicroK8s\nOpenShift\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks\nPrerequisites\nInstallation steps",
      "code_examples": [
        {
          "language": "",
          "code": "$ minikube config set driver kvm2",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube config set driver kvm2</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ minikube config set driver kvm2",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube config set driver kvm2</code>"
        },
        {
          "language": "",
          "code": "--kubernetes-version",
          "element": "<code>--kubernetes-version</code>"
        },
        {
          "language": "",
          "code": "$ minikube start --memory=16384 --cpus=4 --kubernetes-version=v1.26.1",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube start --memory=16384 --cpus=4 --kubernetes-version=v1.26.1</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ minikube start --memory=16384 --cpus=4 --kubernetes-version=v1.26.1",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube start --memory=16384 --cpus=4 --kubernetes-version=v1.26.1</code>"
        },
        {
          "language": "",
          "code": "$ minikube ssh",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube ssh</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ minikube ssh",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube ssh</code>"
        },
        {
          "language": "",
          "code": "$ top\nGiB Mem : 12.4/15.7",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ top\nGiB Mem : 12.4/15.7</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ top\nGiB Mem : 12.4/15.7",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ top\nGiB Mem : 12.4/15.7</code>"
        },
        {
          "language": "",
          "code": "$ minikube tunnel",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube tunnel</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ minikube tunnel",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube tunnel</code>"
        },
        {
          "language": "",
          "code": "$ minikube tunnel --cleanup",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube tunnel --cleanup</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ minikube tunnel --cleanup",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ minikube tunnel --cleanup</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "Minikube",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Prerequisites",
          "id": "prerequisites"
        },
        {
          "level": 2,
          "text": "Installation steps",
          "id": "installation-steps"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732157.9703748
    },
    {
      "url": "https://istio.io/latest/docs/setup/platform-setup/openshift/",
      "title": "Istio / OpenShift",
      "content": "Overview\nWhat is Istio?\nWhy choose Istio?\nSidecar or ambient?\nQuickstart\nConcepts\nTraffic Management\nSecurity\nObservability\nExtensibility\nSidecar Mode\nGetting Started\nPlatform Setup\nAlibaba Cloud\nAmazon EKS\nAzure\nDocker Desktop\nGoogle Kubernetes Engine\nHuawei Cloud\nIBM Cloud\nk3d\nkind\nKops\nKubernetes Gardener\nKubeSphere Container Platform\nMicroK8s\nMinikube\nOpenShift\nOracle Cloud Infrastructure\nTencent Cloud\nInstall\nInstall with Istioctl\nInstall with Helm\nInstall Multicluster\nBefore you begin\nInstall Multi-Primary\nInstall Primary-Remote\nInstall Multi-Primary on different networks\nInstall Primary-Remote on different networks\nVerify the installation\nInstall Istio with an External Control Plane\nInstall Multiple Istio Control Planes in a Single Cluster\nVirtual Machine Installation\nUpgrade\nCanary Upgrades\nIn-place Upgrades\nUpgrade with Helm\nMore Guides\nDownload the Istio release\nInstallation Configuration Profiles\nCompatibility Versions\nInstalling Gateways\nInstalling the Sidecar\nCustomizing the installation configuration\nAdvanced Helm Chart Customization\nInstall Istio in Dual-Stack mode\nInstall Istio with Pod Security Admission\nInstall the Istio CNI node agent\nGetting Started without the Gateway API\nAmbient Mode\nOverview\nGetting Started\nDeploy a sample application\nSecure and visualize the application\nEnforce authorization policies\nManage traffic\nClean up\nInstall\nPlatform-Specific Prerequisites\nInstall with Helm\nInstall with istioctl\nUpgrade\nUpgrade with Helm\nUser Guides\nAdd workloads to the mesh\nVerify mutual TLS is enabled\nAmbient and Kubernetes NetworkPolicy\nUse Layer 4 security policy\nConfigure waypoint proxies\nUse Layer 7 features\nExtend waypoints with WebAssembly plugins *\nTroubleshoot connectivity issues with ztunnel\nTroubleshoot issues with waypoints\nArchitecture\nAmbient and the Istio control plane\nAmbient data plane\nHBONE\nZtunnel traffic redirection\nTasks\nTraffic Management\nRequest Routing\nFault Injection\nTraffic Shifting\nTCP Traffic Shifting\nRequest Timeouts\nCircuit Breaking\nMirroring\nLocality Load Balancing\nBefore you begin\nLocality failover\nLocality weighted distribution\nCleanup\nIngress\nIngress Gateways\nSecure Gateways\nIngress Gateway without TLS Termination\nIngress Sidecar TLS Termination\nKubernetes Ingress\nKubernetes Gateway API\nEgress\nAccessing External Services\nEgress TLS Origination\nEgress Gateways\nEgress Gateways with TLS Origination\nEgress using Wildcard Hosts\nKubernetes Services for Egress Traffic\nUsing an External HTTPS Proxy\nSecurity\nCertificate Management\nPlug in CA Certificates\nCustom CA Integration using Kubernetes CSR *\nAuthentication\nAuthentication Policy\nJWT claim based routing *\nCopy JWT Claims to HTTP Headers *\nMutual TLS Migration\nAuthorization\nHTTP Traffic\nTCP Traffic\nJWT Token\nExternal Authorization\nExplicit Deny\nIngress Access Control\nTrust Domain Migration\nDry Run *\nTLS Configuration\nIstio Workload Minimum TLS Version Configuration\nPolicy Enforcement\nEnabling Rate Limits using Envoy\nObservability\nTelemetry API\nMetrics\nCustomizing Istio Metrics with Telemetry API\nCollecting Metrics for TCP Services\nCustomizing Istio Metrics\nClassifying Metrics Based on Request or Response\nQuerying Metrics from Prometheus\nVisualizing Metrics with Grafana\nLogs\nConfigure access logs with Telemetry API\nEnvoy Access Logs\nOpenTelemetry\nDistributed Tracing\nOverview\nConfigure tracing with Telemetry API\nConfigure tracing using MeshConfig and pod annotations\nConfigure trace sampling\nOpenTelemetry\nJaeger\nZipkin\nApache SkyWalking\nVisualizing Your Mesh\nRemotely Accessing Telemetry Addons\nExtensibility\nDistributing WebAssembly Modules *\nExamples\nBookinfo Application\nBookinfo with a Virtual Machine\nLearn Microservices using Kubernetes and Istio\nPrerequisites\nSet up a Kubernetes Cluster\nSet up a Local Computer\nRun a Microservice Locally\nRun ratings in Docker\nRun Bookinfo with Kubernetes\nTest in production\nAdd a new version of reviews\nEnable Istio on productpage\nEnable Istio on all the microservices\nConfigure Istio Ingress Gateway\nMonitoring with Istio\nOperations\nDeployment\nPlatform Requirements\nArchitecture\nSecurity Model\nDeployment Models\nVirtual Machine Architecture\nPerformance and Scalability\nApplication Requirements\nConfiguration\nMesh Configuration\nDynamic Admission Webhooks Overview\nHealth Checking of Istio Services\nConfiguration Scoping\nTraffic Management\nProtocol Selection\nManaging In-Mesh Certificates\nTLS Configuration\nTraffic Routing\nDNS\nConfiguring Gateway Network Topology *\nDNS Proxying\nMulti-cluster Traffic Management\nSecurity\nSecurity policy examples\nHarden Docker Container Images\nObservability\nEnvoy Statistics\nMonitoring Multicluster Istio with Prometheus\nExtensibility\nPull Policy for WebAssembly Modules *\nBest Practices\nDeployment Best Practices\nTraffic Management Best Practices\nSecurity Best Practices\nImage Signing and Validation\nObservability Best Practices\nCommon Problems\nTraffic Management Problems\nSecurity Problems\nObservability Problems\nSidecar Injection Problems\nConfiguration Validation Problems\nUpgrade Problems\nDiagnostic Tools\nUsing the Istioctl Command-line Tool\nDebugging Envoy and Istiod\nUnderstand your Mesh with Istioctl Describe\nDiagnose your Configuration with Istioctl Analyze\nVerifying Istio Sidecar Injection with Istioctl Check-Inject\nIstiod Introspection\nComponent Logging\nDebugging Virtual Machines\nTroubleshooting Multicluster\nTroubleshooting the Istio CNI plugin\nIntegrations\ncert-manager\nGrafana\nJaeger\nKiali\nPrometheus\nSPIRE\nApache SkyWalking\nZipkin\nThird Party Load Balancers\nReleases\nFeature Status\nReporting Bugs\nSecurity Vulnerabilities\nSupported Releases\nContribute Documentation\nWork with GitHub\nAdd New Documentation\nRemove Retired Documentation\nBuild and serve the website locally\nFront matter\nDocumentation Review Process\nAdd Code Blocks\nUse Shortcodes\nFollow Formatting Standards\nStyle Guide\nTerminology Standards\nDiagram Creation Guidelines\nWebsite Content Changes\nReference\nConfiguration\nAnalysis Messages\nGlobal Mesh Options\nIstioOperator Options\nConfiguration Status Field\nProxy Extensions\nWasm Plugin\nTraffic Management\nDestination Rule\nEnvoy Filter\nGateway\nProxyConfig\nService Entry\nSidecar\nVirtual Service\nWorkload Entry\nWorkload Group\nSecurity\nPeerAuthentication\nRequestAuthentication\nAuthorization Policy\nAuthorization Policy Conditions\nAuthorization Policy Normalization\nTelemetry\nCommon Types\nWorkload Selector\nIstio Standard Metrics\nResource Annotations\nResource Labels\nConfiguration Analysis Messages\nAlphaAnnotation\nAnalyzer Message Format\nConflictingMeshGatewayVirtualServiceHosts\nConflictingSidecarWorkloadSelectors\nConflictingTelemetryWorkloadSelectors\nDeploymentAssociatedToMultipleServices\nDeploymentConflictingPorts\nDeprecated\nDeprecatedAnnotation\nEnvoyFilterUsesAddOperationIncorrectly\nEnvoyFilterUsesRelativeOperation\nEnvoyFilterUsesRelativeOperationWithProxyVersion\nEnvoyFilterUsesRemoveOperationIncorrectly\nEnvoyFilterUsesReplaceOperationIncorrectly\nExternalControlPlaneAddressIsNotAHostname\nExternalNameServiceTypeInvalidPortName\nGatewayPortNotDefinedOnService\nIneffectivePolicy\nIneffectiveSelector\nInternalError\nInvalidAnnotation\nInvalidApplicationUID\nInvalidExternalControlPlaneConfig\nInvalidGatewayCredential\nInvalidTelemetryProvider\nLocalhostListener\nMisplacedAnnotation\nMultipleSidecarsWithoutWorkloadSelectors\nMultipleTelemetriesWithoutWorkloadSelectors\nNamespaceMultipleInjectionLabels\nNamespaceNotInjected\nNoMatchingWorkloadsFound\nNoServerCertificateVerificationDestinationLevel\nNoServerCertificateVerificationPortLevel\nPodMissingProxy\nPodsIstioProxyImageMismatchInNamespace\nPortNameIsNotUnderNamingConvention\nReferencedResourceNotFound\nSchemaValidationError\nServiceEntryAddressesRequired\nUnknownAnnotation\nVirtualServiceDestinationPortSelectorRequired\nVirtualServiceHostNotFoundInGateway\nVirtualServiceIneffectiveMatch\nVirtualServiceUnreachableRule\nCommands\ninstall-cni\nistioctl\npilot-agent\npilot-discovery\nGlossary\nContents\nDocumentation\nSidecar Mode\nPlatform Setup\nOpenShift\nOpenShift\nFollow these instructions to prepare an OpenShift cluster for Istio.\nInstall Istio using the OpenShift profile:\n$ istioctl install --set profile=openshift\nAfter installation is complete, expose an OpenShift route for the ingress gateway.\n$ oc -n istio-system expose svc/istio-ingressgateway --port=http2\nMinikube\nOracle Cloud Infrastructure\nWas this information useful?\nYes\nNo\nDo you have any suggestions for improvement?\nThanks for your feedback!\nLinks",
      "code_examples": [
        {
          "language": "",
          "code": "$ istioctl install --set profile=openshift",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ istioctl install --set profile=openshift</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ istioctl install --set profile=openshift",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ istioctl install --set profile=openshift</code>"
        },
        {
          "language": "",
          "code": "$ oc -n istio-system expose svc/istio-ingressgateway --port=http2",
          "element": "<pre><code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ oc -n istio-system expose svc/istio-ingressgateway --port=http2</code></pre>"
        },
        {
          "language": "language-bash",
          "code": "$ oc -n istio-system expose svc/istio-ingressgateway --port=http2",
          "element": "<code class=\"language-bash\" data-expandlinks=\"true\" data-repo=\"istio\">$ oc -n istio-system expose svc/istio-ingressgateway --port=http2</code>"
        }
      ],
      "headings": [
        {
          "level": 1,
          "text": "OpenShift",
          "id": "title"
        },
        {
          "level": 2,
          "text": "Links",
          "id": ""
        }
      ],
      "timestamp": 1750732160.4950762
    }
  ],
  "total_pages": 30,
  "errors": []
}